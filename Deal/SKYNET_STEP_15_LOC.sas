%INCLUDE "\\CSSSASAPP\CADA\SAS SOURCE CODE\PRODUCTION\SERVICE ACCOUNTS\SVC_SASUSER.SAS";
%INCLUDE "E:\SHARED\CADA\SAS SOURCE CODE\DEVELOPMENT\JHUBBARD\TOP SECRET PROGRAM.SAS";
%INCLUDE "E:\SHARED\CADA\SAS SOURCE CODE\DEVELOPMENT\JHUBBARD\SKYNET REDESIGN\DATAMART REDESIGN\DEAL\DEAL_ERROR_INPUTS.SAS";


%LET LOC_LIB = AA_LOC;

/*DATASOURCE='NW-DQU-DB-01.AEAONLINE.NET\QA_03'*/

LIBNAME &LOC_LIB OLEDB DATASOURCE='RPTDB02.AEAONLINE.NET\AANET' PROVIDER=SQLOLEDB DBMAX_TEXT=32767 
               USER="&USER" PASSWORD=&PASSWORD
               PROPERTIES=("INITIAL CATALOG"=LGV4) SCHEMA=DBO DEFER=YES;

LIBNAME AA_BTAG OLEDB DATASOURCE='RPTDB02.AEAONLINE.NET\AANET' PROVIDER=SQLOLEDB DBMAX_TEXT=32767 
               USER="&USER" PASSWORD=&PASSWORD
               PROPERTIES=("INITIAL CATALOG"=BTAGCOMMON) SCHEMA=DBO DEFER=YES;

LIBNAME SKYNET "E:\SHARED\CADA\SAS DATA\DATAMART\STDM\";
DATA _NULL_;
	/*DEAL*/
	CALL SYMPUTX('DEAL_LOGPATH',"E:\SHARED\CADA\LOGS\SKYNET V2",'G');
	CALL SYMPUTX('DEAL_FILE_PATH',"E:\SHARED\CADA\SAS SOURCE CODE\PRODUCTION\SKYNET V2\SKYNET REDESIGN\DATAMART REDESIGN\DEAL",'G');
%RUNQUIT(&job,&sub15);

PROC SQL;
	CREATE TABLE LOC_DEALS_PROD AS
		SELECT UPCASE(LOANTYPENAME) AS PRODUCT
		      ,'AA' AS BRANDCD
			  ,'STANDARD' AS BANKMODEL
			  ,'USA' AS COUNTRYCD
			  ,'' AS CITY
			  ,'' AS ZIP
			  ,0 AS ZONENBR
			  ,'' AS ZONENAME
			  ,0 AS REGIONNBR
			  ,'' AS REGIONRDO
			  ,0 AS DIVISIONNBR
			  ,'' AS DIVISIONDDO
			  ,0 AS BUSINESS_UNIT
			  ,LOANTYPECODE AS PRODUCT_TYPE
			  ,DHMS(INPUT(FUNDINGDATE,YYMMDD10.),00,00,00) AS FUNDINGDATE2 FORMAT=DATETIME20.
			  ,DS.* 
		FROM &LOC_LIB..LOAN DS
		INNER JOIN 
		&LOC_LIB..LOANTYPE TP
		ON(DS.LOANTYPEID=TP.LOANTYPEID)
	WHERE UPCASE(TP.LOANTYPENAME) = 'LINEOFCREDIT'
;
%RUNQUIT(&job,&sub15);

PROC SQL;
	CREATE TABLE LOC_DEALS_CUSTNBR AS
		SELECT CUSTACCTNBR AS CUSTNBR
			  ,DS.*
	    FROM LOC_DEALS_PROD DS
		INNER JOIN
		&LOC_LIB..ACCT ACCT
		ON(DS.ACCTID=ACCT.ACCTID)
;
%RUNQUIT(&job,&sub15);

PROC SQL;
	CREATE TABLE LOC_DEALS_SSN AS
		SELECT SSN
			  ,DS.*
		FROM LOC_DEALS_CUSTNBR DS
		INNER JOIN
		&LOC_LIB..CUSTIDENTITY CID
		ON(DS.CUSTIDENTITYID=CID.CUSTIDENTITYID)
;
%RUNQUIT(&job,&sub15);

PROC SQL;
	CREATE TABLE LOC_DEALS_DEALSTATUS AS
		SELECT LOANSTATUSNAME AS DEALSTATUSCD
		      ,DS.*
		FROM LOC_DEALS_SSN DS
		INNER JOIN
		&LOC_LIB..LOANSTATUS ST
		ON(ST.LOANSTATUSID=DS.LOANSTATUSID)
;
%RUNQUIT(&job,&sub15);

PROC SQL;
	CREATE TABLE LOC_DEAL_METRICS AS
		SELECT
			PRODUCT
		   ,"ONLINE" AS POS
		   ,"AANET" AS INSTANCE
		   ,BRANDCD
		   ,BANKMODEL
		   ,COUNTRYCD
		   ,COMPANYCODE AS STATE
		   ,CITY
		   ,ZIP
		   ,ZONENBR
		   ,ZONENAME
		   ,REGIONNBR
		   ,REGIONRDO
		   ,DIVISIONNBR
		   ,DIVISIONDDO
		   ,BUSINESS_UNIT
		   ,DS.COMPANYID AS LOCNBR
		   ,''DT AS LOC_OPEN_DT FORMAT=DATETIME20.
		   ,''DT AS LOC_CLOSE_DT FORMAT=DATETIME20.
		   ,DATEPART(CASE WHEN ORIGINATIONDATE = . THEN FUNDINGDATE2 ELSE ORIGINATIONDATE END) AS DEAL_DT FORMAT=MMDDYY10.
		   ,CASE WHEN ORIGINATIONDATE = . THEN FUNDINGDATE2 ELSE ORIGINATIONDATE END AS DEAL_DTTM FORMAT=DATETIME20.
		   ,LOANID AS DEALNBR
		   ,CUSTNBR
		   ,SSN
		   ,LOANAMT AS LINELIMIT
		   ,DEALSTATUSCD
		   ,PRODUCT_TYPE
		FROM LOC_DEALS_DEALSTATUS DS
		INNER JOIN 
		AA_BTAG.COMPANY LOC
		ON(DS.COMPANYID=LOC.COMPANYID)
;
%RUNQUIT(&job,&sub15);

PROC SQL;
	CREATE TABLE LOC_OUTSTANDING AS
		SELECT DS.*
			  ,OUT.PRINCIPAL AS PRINCIPAL_BAL
			  ,OUT.INTEREST AS INTEREST_BAL
			  ,OUT.FEE AS FEE_BAL
			  ,OUT.TOTAL AS TOTALOWED
		FROM LOC_DEAL_METRICS DS
		LEFT JOIN
		&LOC_LIB..VW_LOANBALANCE OUT
		ON(DS.DEALNBR=OUT.LOANID)
;
%RUNQUIT(&job,&sub15);

PROC SQL;
	CREATE TABLE LOAN_STATUS_PRE AS
		SELECT LOG.LOANID AS DEALNBR
			  ,LOG.TOLOANACCOUNTINGSTATUSID AS LOANACCOUNTINGSTATUSID
			  ,ST.LOANACCOUNTINGSTATUSNAME AS DEALSTATUSCD
			  ,DHMS(INPUT(LOG.EFFECTIVEDATE,YYMMDD10.),00,00,00) AS EFFECTIVEDATE FORMAT=DATETIME20.
			  ,LASTMODIFIED FORMAT=DATETIME20.
		FROM &LOC_LIB..LOANACCOUNTINGSTATUS ST
		INNER JOIN 
		&LOC_LIB..LOANACCOUNTINGSTATUSLOG LOG
		ON(ST.LOANACCOUNTINGSTATUSID=LOG.TOLOANACCOUNTINGSTATUSID)
	ORDER BY LOG.LOANID
	        ,LASTMODIFIED
;
%RUNQUIT(&job,&sub15);

DATA COMPLIANT_PRE
	 CHARGE_OFF_PRE
	 DEFAULT_PRE;
	 SET WORK.LOAN_STATUS_PRE;
	 IF LOANACCOUNTINGSTATUSID = 1 THEN OUTPUT COMPLIANT_PRE;
	 ELSE IF LOANACCOUNTINGSTATUSID = 2 THEN OUTPUT CHARGE_OFF_PRE;
	 ELSE IF LOANACCOUNTINGSTATUSID = 3 THEN OUTPUT DEFAULT_PRE;
%RUNQUIT(&job,&sub15);

DATA COMPLIANT_DATES;
	SET COMPLIANT_PRE;
	BY DEALNBR;
	IF LAST.DEALNBR;
%RUNQUIT(&job,&sub15);

DATA DEFAULT_DATES;
	SET DEFAULT_PRE;
	BY DEALNBR;
	IF LAST.DEALNBR;
%RUNQUIT(&job,&sub15);

DATA CHARGE_OFF_DATES;
	SET CHARGE_OFF_PRE;
	BY DEALNBR;
	IF LAST.DEALNBR;
%RUNQUIT(&job,&sub15);

PROC SQL;
	CREATE TABLE LOC_EVENT_DATES AS
		SELECT DS.*
		      ,COM.LASTMODIFIED AS COMPLIANT_AS_OF
			  ,DEF.LASTMODIFIED AS DEFAULTDT
			  ,WO.LASTMODIFIED AS WRITEOFFDT
		FROM LOC_OUTSTANDING DS
		LEFT JOIN COMPLIANT_DATES COM
		ON(DS.DEALNBR=COM.DEALNBR)
		LEFT JOIN DEFAULT_DATES DEF
		ON(DS.DEALNBR=DEF.DEALNBR)
		LEFT JOIN CHARGE_OFF_DATES WO
		ON(DS.DEALNBR=WO.DEALNBR)
	WHERE DEAL_DT NOT IS MISSING;
;
%RUNQUIT(&job,&sub15);

PROC SQL;
	CREATE TABLE LOC_TOTAL_PAID AS
		SELECT DS.*
			  ,CASE WHEN DM.TOTALDOLLARSPAIDTHISLOAN = . THEN 0 ELSE DM.TOTALDOLLARSPAIDTHISLOAN END AS TOTALPAID
		FROM LOC_EVENT_DATES DS
		INNER JOIN
		&LOC_LIB..VW_DATAMART DM
		ON(DS.DEALNBR=DM.LOANAPPLICATIONID)
;
%RUNQUIT(&job,&sub15);

PROC SQL;
   CREATE TABLE WORK.CHARGED AS 
   SELECT LoanID 
         ,(SUM(CASE WHEN ((UPCASE(TrnTypeName) = "FULLY EARNED FINANCE CHARGE") 
			   OR (UPCASE(TrnTypeName) = "DATABASE VERIFICATION FEE")) AND UPCASE(TrnDirectionName) = "DEBIT" THEN Fee ELSE 0 END)) AS FEES_CHARGED
         ,(SUM(CASE WHEN (
                      UPCASE(TrnTypeName) = "FUNDING" OR UPCASE(TrnTypeName) = "REFI TRANSFER" OR UPCASE(TrnTypeName)= "DRAW") AND UPCASE(TrnDirectionName) = "DEBIT" 
			          THEN Principal 
                      ELSE 0 
            END)) AS ADVAMT 
         ,(SUM(CASE WHEN UPCASE(TrnDirectionName) = "DEBIT" THEN Interest ELSE 0 END)) AS INTEREST_CHARGED
         ,(SUM(CASE WHEN UPCASE(TrnTypeName) = "NSF FEE" AND UPCASE(TrnDirectionName) = "DEBIT" THEN Fee ELSE 0 END)) AS NSFFEEAMT
         ,(SUM(CASE WHEN UPCASE(TrnTypeName) = "ADJUSTMENT" THEN Fee ELSE 0 END)) AS FEE_ADJ
         ,(SUM(CASE WHEN UPCASE(TrnTypeName) = "NSF FEE" THEN Fee ELSE 0 END)) AS NSFFEE
         ,(SUM(CASE WHEN UPCASE(TrnTypeName) = "CSO FEE" AND UPCASE(TrnDirectionName) = "DEBIT" THEN Principal ELSE 0 END)) AS CSO_FEE
      FROM &LOC_LIB..VW_Trn
      GROUP BY LoanID;
%RUNQUIT(&job,&sub15);

PROC SQL;
	CREATE TABLE LOC_CHARGED AS 
		SELECT DS.*
			  ,CH.ADVAMT
			  ,CH.FEES_CHARGED AS FEEAMT
			  ,CH.INTEREST_CHARGED AS INTERESTFEE
			  ,CH.NSFFEEAMT
		FROM LOC_TOTAL_PAID DS
		INNER JOIN
		WORK.CHARGED CH
		ON(DS.DEALNBR=CH.LOANID)
;
%RUNQUIT(&job,&sub15);

PROC SQL;
	CREATE TABLE DUEDT_PRE AS
		SELECT LC.LOANCYCLEGUID
	          ,LC.LOANID AS DEALNBR
	          ,LC.CYCLENUMBER
			  ,DHMS(INPUT(LC.CYCLEDATE,YYMMDD10.),00,00,00) AS CYCLE_DTTM FORMAT=DATETIME20.
	          ,LC.CYCLEDATE
			  ,DHMS(INPUT(LC.DUEDATE,YYMMDD10.),00,00,00) AS DUE_DTTM FORMAT = DATETIME20.
	          ,LC.DUEDATE
	          ,LC.PROCESSSTATUSID
	          ,LC.CYCLEBALANCEAMT
	          ,LC.CYCLEMINPAYMENTAMT
	          ,LC.RESPONSEXML
	          ,LC.ERRORMESSAGE
	          ,LC.DATECREATED 
	          ,LC.DATEMODIFIED 
	          ,LC.REFERENCEID 
	          ,LC.CORRELATIONID 
	          ,LC.LATEFEETRNGUID 
	          ,LC.CYCLEAMOUNTDUE 
	          ,LC.COMPANYID
	          ,LC.NEXTCYCLEDATE 
	          ,LC.CYCLEPRINCIPALBALANCE
		FROM AA_LOC.LOANCYCLE LC
		INNER JOIN
		WORK.LOC_CHARGED CH
		ON(CH.DEALNBR=LC.LOANID)
	WHERE CYCLEBALANCEAMT ^= 0
	ORDER BY LOANID
		    ,CYCLENUMBER
;
%RUNQUIT(&job,&sub15);

DATA DUEDT;
	SET DUEDT_PRE;
	BY DEALNBR;
	IF LAST.DEALNBR;
	KEEP DEALNBR DUE_DTTM;
%RUNQUIT(&job,&sub15);

PROC SQL;
	CREATE TABLE LOC_DAILY_UPDATE AS 
		SELECT PRODUCT
			  ,POS
			  ,INSTANCE
			  ,BRANDCD
			  ,BANKMODEL
			  ,COUNTRYCD
			  ,STATE
			  ,CITY
			  ,ZIP
			  ,ZONENBR
			  ,ZONENAME
			  ,REGIONNBR
			  ,REGIONRDO
			  ,DIVISIONNBR
			  ,DIVISIONDDO
			  ,BUSINESS_UNIT
			  ,LOCNBR
			  ,LOC_OPEN_DT
			  ,LOC_CLOSE_DT
			  ,DEAL_DT
			  ,DEAL_DTTM
			  ,LC.DEALNBR
			  ,.					 AS TITLE_DEALNBR
			  ,CUSTNBR
			  ,SSN
			  ,FEEAMT
			  ,LINELIMIT AS ADVAMT
			  ,PRINCIPAL_BAL AS OUTSTANDING_DRAW_AMT
			  ,INTERESTFEE
			  ,NSFFEEAMT
			  ,0 AS OTHERFEEAMT
			  ,0 AS LATEFEEAMT
			  ,0 AS WAIVEDFEEAMT
			  ,0 AS REBATEAMT
			  ,0 AS COUPONAMT
			  ,TOTALPAID
			  ,TOTALOWED
			  ,0 AS CONSECUTIVEDEALFLG
			  ,0 AS CASHAGNCNT
			  ,DD.DUE_DTTM AS DUEDT
			  ,''DT AS DEALENDDT FORMAT=DATETIME20.
			  ,''DT AS DEPOSITDT FORMAT=DATETIME20.
			  ,WRITEOFFDT
			  ,DEFAULTDT
			  ,'' AS ACHSTATUSCD
			  ,CASE WHEN UPCASE(DEALSTATUSCD) IN('ADJUSTED IN FULL', 'FRAUD LOAN', 'PAID IN FULL') THEN 'CLO'
			        WHEN UPCASE(DEALSTATUSCD) IN('OPEN','WORKOUT', 'PENDING RESCISSION','COLLECTIONS','PAST DUE', 'RIGHT TO CURE') THEN 'OPN'
					WHEN UPCASE(DEALSTATUSCD) IN('RESCINDED') THEN 'V'
					WHEN UPCASE(DEALSTATUSCD) IN('BANKRUPTCY', 'WRITE OFF') THEN 'WO'
			   END AS DEALSTATUSCD
			  ,'' AS CHECKSTATUSCD
			  ,'' AS RETURNREASONCD
			  ,'' AS COLLATERAL_TYPE
			  ,''DT AS ETLDT FORMAT=DATETIME20.
			  ,. AS PREVDEALNBR
			  ,PRODUCT_TYPE AS PRODUCTCD
			  ,'' AS ACHAUTHFLG
			  ,''DT AS UPDATEDT FORMAT=DATETIME20.
		FROM LOC_CHARGED LC
		LEFT JOIN DUEDT DD
		ON(LC.DEALNBR=DD.DEALNBR)
;
%RUNQUIT(&job,&sub15);

PROC SQL;
   CREATE TABLE WORK.DEAL_SUMMARY_TMP AS 
   SELECT t1.PRODUCT, 
          t1.POS, 
          t1.INSTANCE, 
          t1.BRANDCD, 
          t1.COUNTRYCD, 
          t1.STATE, 
          t1.CITY, 
          t1.ZIP, 
          t1.ZONENBR, 
          t1.ZONENAME, 
          t1.REGIONNBR, 
          t1.REGIONRDO, 
          t1.DIVISIONNBR, 
          t1.DIVISIONDDO, 
          t1.LOC_OPEN_DT, 
          t1.LOC_CLOSE_DT, 
          /* BUSINESS_UNIT */
            (COMPRESS(PUT(T1.BUSINESS_UNIT,BEST9.))) AS BUSINESS_UNIT, 
          t1.LOCNBR, 
          /* DEAL_DT */
            (dhms(t1.DEAL_DT,00,00,00)) FORMAT=DATETIME20. AS DEAL_DT, 
          t1.DEAL_DTTM, 
          /* DEALNBR */
            (COMPRESS(PUT(DEALNBR,30.))) AS DEALNBR, 
		  t1.TITLE_DEALNBR, 
          t1.CUSTNBR, 
          t1.SSN, 
          t1.ADVAMT, 
          t1.FEEAMT, 
          t1.LATEFEEAMT, 
          t1.NSFFEEAMT, 
          t1.OTHERFEEAMT, 
          t1.REBATEAMT, 
          t1.COUPONAMT, 
          t1.INTERESTFEE, 
          t1.TOTALPAID, 
          t1.TOTALOWED, 
          t1.CONSECUTIVEDEALFLG, 
          t1.CASHAGNCNT, 
          t1.DUEDT, 
          t1.DEALENDDT, 
          t1.WRITEOFFDT, 
          t1.DEFAULTDT, 
          t1.ACHSTATUSCD, 
		  '' AS RETURNREASONCD LENGTH=5 FORMAT=$5.,
          t1.CHECKSTATUSCD, 
          t1.DEALSTATUSCD, 
          t1.COLLATERAL_TYPE, 
		  '' AS CUSTCHECKNBR LENGTH=15 FORMAT=$15.,
          t1.ETLDT, 
          t1.PRODUCTCD, 
          t1.PREVDEALNBR, 
          t1.ACHAUTHFLG, 
          t1.UPDATEDT,
		  t1.OUTSTANDING_DRAW_AMT,
		  '' AS UNDER_COLLATERALIZED LENGTH=1 FORMAT=$1.
		FROM LOC_DAILY_UPDATE t1;
%RUNQUIT(&job,&sub15);

PROC SQL;
   CREATE TABLE WORK.DEAL_SUM_DAILY_UPDATE_PRE AS 
   SELECT t1.PRODUCT, 
          t1.POS, 
          t1.INSTANCE, 
		  'ONLINE'					AS CHANNELCD, 
          t1.BRANDCD, 
          ''							AS BANKMODEL, 
          t1.COUNTRYCD, 
          t1.STATE, 
          t1.CITY, 
          t1.ZIP, 
          t1.ZONENBR, 
          t1.ZONENAME, 
          t1.REGIONNBR, 
          t1.REGIONRDO, 
          t1.DIVISIONNBR, 
          t1.DIVISIONDDO, 
          /* BUSINESS_UNIT */
          BUSINESS_UNIT, 
          t1.LOCNBR, 
          t1.LOC_OPEN_DT, 
          t1.LOC_CLOSE_DT, 
          /* DEAL_DT */
          DEAL_DT, 
          t1.DEAL_DTTM, 
          /* LAST_REPORT_DT */
            (dhms(today()-1,0,0,0)) FORMAT=datetime20. LABEL="LAST_REPORT_DT" AS LAST_REPORT_DT, 
          /* DEALNBR */
          DEALNBR, 
          /* TITLE_DEALNBR */
            (COMPRESS(PUT((CASE 
               WHEN . = t1.TITLE_DEALNBR THEN 0
               ELSE t1.TITLE_DEALNBR
            END),30.))) AS TITLE_DEALNBR, 
          /* CUSTNBR */
          CUSTNBR, 
          t1.SSN,
		  ''	AS OMNINBR, 
          t1.ADVAMT, 
          t1.FEEAMT,
		  .			AS CUSTOMARYFEE,  
          t1.NSFFEEAMT, 
          t1.OTHERFEEAMT, 
          t1.LATEFEEAMT, 
          .								AS WAIVEDFEEAMT, 
          t1.REBATEAMT, 
          t1.COUPONAMT, 
          t1.TOTALPAID, 
          t1.TOTALOWED, 
          t1.CONSECUTIVEDEALFLG, 
          t1.CASHAGNCNT, 
          t1.DUEDT, 
          t1.DEALENDDT, 
          ' 'DT								AS DEPOSITDT, 
          t1.WRITEOFFDT, 
          t1.DEFAULTDT, 
          t1.ACHSTATUSCD,
		  '' AS RETURNREASONCD LENGTH=5 FORMAT=$5.,
          t1.DEALSTATUSCD, 
          t1.CHECKSTATUSCD, 
          t1.COLLATERAL_TYPE, 
		  '' AS CUSTCHECKNBR LENGTH=15 FORMAT=$15.,
          t1.ETLDT, 
          t1.PREVDEALNBR, 
          t1.PRODUCTCD, 
          t1.INTERESTFEE, 
          t1.ACHAUTHFLG, 
          t1.UPDATEDT,
		  T1.OUTSTANDING_DRAW_AMT,
		  t1.UNDER_COLLATERALIZED
      FROM WORK.DEAL_SUMMARY_TMP t1;
%RUNQUIT(&job,&sub15);

DATA UNION_TABLE;
SET TMP_TBLS.UNION_TABLE ;
RUN;

PROC SQL;
	CREATE TABLE WORK.DEAL_SUM_DAILY_UPDATE_PRE AS
	SELECT *
	FROM UNION_TABLE
	UNION ALL CORR
	SELECT *
	FROM WORK.DEAL_SUM_DAILY_UPDATE_PRE
;
QUIT;

PROC FORMAT;
    PICTURE CHECKTHEDAY OTHER=%0Y.%0M.%0D (DATATYPE=DATE);
    PICTURE CHECKTHETIME OTHER=%0H.%0M.%0S (DATATYPE=TIME);
%RUNQUIT(&job,&sub15);

%LET DATE=%SYSFUNC(INTNX(DAY,%SYSFUNC(TODAY()),0,END),DATE7.);
%PUT &DATE;


/* CREATE MACROS FOR BULKLOAD PATH AND TIMESTAMP */
DATA _NULL_;
	CALL SYMPUTX('TIMESTAMP',TRANWRD(PUT(DATETIME(),DATETIME20.),':','.'),'G');
    CALL SYMPUTX('PATH',"E:\SHARED\CADA\SAS DATA\DATAMART\SKYNET REDESIGN BULKLOAD LOGS\DEAL\ONLINE\LOC",'G');
    CALL SYMPUTX('PATHTWO',"E:\SHARED\CADA\SAS DATA\DATAMART\SKYNET REDESIGN BULKLOAD LOGS\DEAL\ONLINE\LOC\DIR2\",'G');
%RUNQUIT(&job,&sub15);

PROC SQL;
    INSERT INTO SKY.DEALSUM_DATAMART_LOC (BULKLOAD=YES BL_LOG="&PATH.\BL_&DATE..LOG" BL_DELETE_DATAFILE=YES 
                                                   BL_DEFAULT_DIR="&PATHTWO.")
    SELECT 
        *
    FROM WORK.DEAL_SUM_DAILY_UPDATE_PRE;
%RUNQUIT(&job,&sub15);

/*UPLOAD LOC*/
%INCLUDE "&DEAL_FILE_PATH.\DEALSUM_UPLOAD_LOC.SAS";
