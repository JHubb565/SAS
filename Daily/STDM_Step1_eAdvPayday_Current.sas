%INCLUDE "\\CSSSASAPP\CADA\SAS SOURCE CODE\PRODUCTION\SERVICE ACCOUNTS\SVC_SASUSER.SAS";
%INCLUDE "E:\SHARED\CADA\SAS SOURCE CODE\PRODUCTION\STDM\STDM_LIBRARY_SCRIPT.SAS";
%INCLUDE "E:\SHARED\CADA\SAS SOURCE CODE\DEVELOPMENT\JHUBBARD\TOP SECRET PROGRAM.SAS";
%INCLUDE "E:\SHARED\CADA\SAS SOURCE CODE\DEVELOPMENT\JHUBBARD\SKYNET REDESIGN\DATAMART REDESIGN\DAILY\DAILY_ERROR_INPUTS.SAS";
LIBNAME SKYNET "E:\SHARED\CADA\SAS DATA\DATAMART\STDM";

LIBNAME EADVRPT ORACLE
	USER=&USER
	PW=&PASSWORD
	PATH=EAPROD1
	SCHEMA=EADV_RPT DEFER=YES;

LIBNAME EADV2 ORACLE 
	SCHEMA=EADV 
	USER=&USER 
	PW=&PASSWORD
	PATH=EAPROD1 
	DBSLICEPARM=(ALL,4) DEFER=YES;

%LET ENDINGDT = INTNX('DAY',TODAY(),-1,'BEGINNING');

DATA _NULL_;
	CALL SYMPUTX('DAILY_LOGPATH',"E:\SHARED\CADA\LOGS\SKYNET V2",'G');
	CALL SYMPUTX('DAILY_FILE_PATH',"E:\SHARED\CADA\SAS SOURCE CODE\PRODUCTION\SKYNET V2\SKYNET REDESIGN\DATAMART REDESIGN\DAILY",'G');
%RUNQUIT(&job,&sub1);

DATA _NULL_;
	CALL SYMPUTX('END_DT',PUT(&ENDINGDT,YYMMDDN8.),G);
%RUNQUIT(&job,&sub1);

PROC SQL;
   CREATE TABLE WORK.DAILYSUMMARY AS 
   SELECT /* PRODUCT */
            ("PAYDAY") LABEL="PRODUCT" AS PRODUCT, 
          /* POS */
            ("EADVANTAGE") FORMAT=$18. LABEL="POS" AS POS, 
          /* INSTANCE */
            ("EAPROD1") LABEL="INSTANCE" AS INSTANCE, 
          T2.BRND_CD AS BRANDCD, 
          /* BANKMODEL */
            (CASE
              WHEN T2.ST_PVC_CD ~= 'TX' THEN 'STANDARD'
              ELSE 'CSO'
            END) FORMAT=$8. LABEL="BANKMODEL" AS BANKMODEL, 
          T2.CTRY_CD AS COUNTRYCD, 
          T2.ST_PVC_CD AS STATE, 
          T2.ADR_CITY_NM AS CITY, 
          T2.MAIL_CD AS ZIP, 
          T2.BUSN_UNIT_ID AS BUSINESS_UNIT, 
          T2.HIER_ZONE_NBR AS ZONENBR, 
          T2.HIER_ZONE_NM AS ZONENAME, 
          T2.HIER_RGN_NBR AS REGIONNBR, 
          T2.HIER_RDO_NM AS REGIONRDO, 
          T2.HIER_DIV_NBR AS DIVISIONNBR, 
          T2.HIER_DDO_NM AS DIVISIONDDO, 
          T1.LOCNBR, 
          T2.LOC_NM AS LOCATION_NAME, 
          T2.OPEN_DT AS LOC_OPEN_DT, 
          T2.CLS_DT AS LOC_CLOSE_DT, 
          /* BUSINESSDT */
            (DATEPART(T1.BUSINESSDT)) FORMAT=MMDDYY10. LABEL="BUSINESSDT" AS BUSINESSDT, 
          /* BEGINDT */
            (INTNX('MONTH',TODAY(),-24,'BEGINNING')) FORMAT=MMDDYY10. LABEL="BEGINDT" AS BEGINDT, 
          T1.ADVCNT, 
          T1.ADVAMTSUM, 
          T1.BUYCNT, 
          T1.BUYAMTSUM, 
          T1.AGNCNT, 
          T1.AGNADVSUM, 
          T1.DPCNT, 
          T1.DPAMTSUM, 
          T1.NPCNT, 
          T1.NPAMTSUM, 
          T1.NPPCNT, 
          T1.NPPAMTSUM, 
          T1.NSFCNT, 
          T1.NSFAMTSUM, 
          T1.WOCNT, 
          T1.WOAMTSUM, 
          T1.WOBCNT, 
          T1.WOBAMTSUM, 
          T1.REFCNT, 
          T1.REFAMTSUM, 
          T1.WORCNT, 
          T1.WORAMTSUM, 
          T1.VOIDCNT, 
          T1.VOIDAMTSUM, 
          T1.COUPONCNT, 
          T1.COUPONAMTSUM, 
          T1.WAIVEDCNT, 
          T1.WAIVEDAMTSUM, 
          T1.NEWCUSTCNT, 
          T1.NEWCUSTDEALCNT, 
          T1.MISCDISBAMTSUM, 
          T1.MISCRCPTAMTSUM, 
          T1.HELDCNT, 
          T1.HELDCHECKAMTSUM, 
          T1.TOTADVRECV, 
          T1.TOTADVFEERECV, 
          T1.TOTNSFCNT, 
          T1.TOTNSFRECV, 
          T1.TOTNSFFEERECV, 
          T1.OVERSHORTAMT, 
          T1.PASTDUECNT, 
          T1.EARNEDFEES, 
          T1.HOLDOVERAMT, 
          T1.VOIDMONEYMGMTCNT, 
          T1.VOIDMONEYMGMTAMTSUM, 
          T1.PASTDUEAMT, 
          T1.SAFEDEPAMT, 
          T1.HELDCHECKADVAMT, 
          T1.HELDCHECKFEEAMT, 
          T1.REPMTPLANCNT, 
          T1.CARDSSOLD, 
          T1.BEGINCARDCNT, 
          T1.CARDSLOAD, 
          T1.CARDSLOADAMT, 
          T1.SECONDPRESENTSUM, 
          T1.THIRDPRESENTSUM, 
          T1.SECONDPRESENTCNT, 
          T1.THIRDPRESENTCNT, 
          T1.AVGADVAMT, 
          T1.AVGDURATION, 
          T1.AVGFEEAMT, 
          T1.AVGDURATIONDAYS, 
          T1.AVGDURATIONCNT, 
          /* ENDDT */
            (INTNX('DAY',TODAY(),-1,'BEGINNING')) FORMAT=MMDDYY10. LABEL="ENDDT" AS ENDDT, 
          /* END_DATE */
            (DHMS(INTNX('DAY',TODAY(),-1,'BEGINNING'),0,0,0)) FORMAT=DATETIME20. LABEL="END_DATE" AS END_DATE, 
          /* BEGIN_DATE */
            (DHMS(INTNX('MONTH',TODAY(),-24,'BEGINNING'),0,0,0)) FORMAT=DATETIME20. LABEL="BEGIN_DATE" AS BEGIN_DATE
      FROM EADV.DAILYSUMMARY T1
           INNER JOIN EDW.D_LOCATION T2 ON (T1.LOCNBR = T2.LOC_NBR)
      WHERE T2.ST_PVC_CD NOT IN 
           (
           'AB',
           'BC',
           'CO',
           'MB',
           'ND',
           'MT',
           'NH',
           'AZ',
           'NM',
           'OR',
           'AR',
           'PA'
           ) AND T2.ST_PVC_CD NOT IS MISSING AND T1.BUSINESSDT BETWEEN (CALCULATED BEGIN_DATE) AND (CALCULATED END_DATE)
      ORDER BY T1.BUSINESSDT,
               T1.LOCNBR;
%RUNQUIT(&job,&sub1);

PROC SQL;
   CREATE TABLE WORK.DAILYSUMMARY_SORTED AS 
   SELECT T1.PRODUCT, 
          T1.POS, 
          T1.INSTANCE, 
          T1.BRANDCD, 
          T1.BANKMODEL, 
          T1.COUNTRYCD, 
          T1.STATE, 
          T1.CITY, 
          T1.ZIP, 
          T1.BUSINESS_UNIT, 
          T1.ZONENBR, 
          T1.ZONENAME, 
          T1.REGIONNBR, 
          T1.REGIONRDO, 
          T1.DIVISIONNBR, 
          T1.DIVISIONDDO, 
          T1.LOCNBR, 
          T1.LOCATION_NAME, 
          T1.LOC_OPEN_DT, 
          T1.LOC_CLOSE_DT, 
          T1.BUSINESSDT, 
          T1.BEGINDT, 
          T1.ADVCNT, 
          T1.ADVAMTSUM, 
          T1.BUYCNT, 
          T1.BUYAMTSUM, 
          T1.AGNCNT, 
          T1.AGNADVSUM, 
          T1.DPCNT, 
          T1.DPAMTSUM, 
          T1.NPCNT, 
          T1.NPAMTSUM, 
          T1.NPPCNT, 
          T1.NPPAMTSUM, 
          T1.NSFCNT, 
          T1.NSFAMTSUM, 
          T1.WOCNT, 
          T1.WOAMTSUM, 
          T1.WOBCNT, 
          T1.WOBAMTSUM, 
          T1.REFCNT, 
          T1.REFAMTSUM, 
          T1.WORCNT, 
          T1.WORAMTSUM, 
          T1.VOIDCNT, 
          T1.VOIDAMTSUM, 
          T1.COUPONCNT, 
          T1.COUPONAMTSUM, 
          T1.WAIVEDCNT, 
          T1.WAIVEDAMTSUM, 
          T1.NEWCUSTCNT, 
          T1.NEWCUSTDEALCNT, 
          T1.MISCDISBAMTSUM, 
          T1.MISCRCPTAMTSUM, 
          T1.HELDCNT, 
          T1.HELDCHECKAMTSUM, 
          T1.TOTADVRECV, 
          T1.TOTADVFEERECV, 
          T1.TOTNSFCNT, 
          T1.TOTNSFRECV, 
          T1.TOTNSFFEERECV, 
          T1.OVERSHORTAMT, 
          T1.PASTDUECNT, 
          T1.EARNEDFEES, 
          T1.HOLDOVERAMT, 
          T1.VOIDMONEYMGMTCNT, 
          T1.VOIDMONEYMGMTAMTSUM, 
          T1.PASTDUEAMT, 
          T1.SAFEDEPAMT, 
          T1.HELDCHECKADVAMT, 
          T1.HELDCHECKFEEAMT, 
          T1.REPMTPLANCNT, 
          T1.CARDSSOLD, 
          T1.BEGINCARDCNT, 
          T1.CARDSLOAD, 
          T1.CARDSLOADAMT, 
          T1.SECONDPRESENTSUM, 
          T1.THIRDPRESENTSUM, 
          T1.SECONDPRESENTCNT, 
          T1.THIRDPRESENTCNT, 
          T1.AVGADVAMT, 
          T1.AVGDURATION, 
          T1.AVGFEEAMT
      FROM WORK.DAILYSUMMARY T1
      ORDER BY T1.LOCNBR,
               T1.BUSINESSDT;
%RUNQUIT(&job,&sub1);

DATA DAILYSUMMARY_SORTED_TMP1;
	SET WORK.DAILYSUMMARY_SORTED;
	BY LOCNBR BUSINESSDT;
	SUBSTITUTEROW = 'N';
	OUTPUT;
	IF LAST.LOCNBR THEN DO;
		IF LOC_CLOSE_DT = . AND BUSINESSDT ~= TODAY() -1 THEN DO;
			BUSINESSDT = TODAY() - 1;
			ADVCNT = .;
			ADVAMTSUM = .;
			BUYCNT = .;
			BUYAMTSUM = .;
			AGNCNT = .;
			AGNADVSUM = .;
			DPCNT = .;
			DPAMTSUM = .;
			NPCNT = .;
			NPAMTSUM = .;
			NPPCNT = .;
			NPPAMTSUM = .;
			NSFCNT = .;
			NSFAMTSUM = .;
			WOCNT = .;
			WOAMTSUM = .;
			WOBCNT = .;
			WOBAMTSUM = .;
			REFCNT = .;
			REFAMTSUM = .;
			WORCNT = .;
			WORAMTSUM = .;
			VOIDCNT = .;
			VOIDAMTSUM = .;
			COUPONCNT = .;
			COUPONAMTSUM = .;
			WAIVEDCNT = .;
			WAIVEDAMTSUM = .;
			NEWCUSTCNT = .;
			NEWCUSTDEALCNT = .;
			MISCDISBAMTSUM = .;
			MISCRCPTAMTSUM = .;
			OVERSHORTAMT = .;
			PASTDUECNT = .;
			EARNEDFEES = .;
			VOIDMONEYMGMTCNT = .;
			VOIDMONEYMGMTAMTSUM = .;
			PASTDUEAMT = .;
			SAFEDEPAMT = .;
			CARDSSOLD = .;
			BEGINCARDCNT = .;
			CARDSLOAD = .;
			CARDSLOADAMT = .;
			SECONDPRESENTSUM = .;
			THIRDPRESENTSUM = .;
			SECONDPRESENTCNT = .;
			THIRDPRESENTCNT = .;
			AVGADVAMT = .;
			AVGFEEAMT = .;
			AVGDURATION = .;
			SUBSTITUTEROW = 'Y';
			OUTPUT;
		END;
	END;
%RUNQUIT(&job,&sub1);


PROC SORT
	DATA=WORK.DAILYSUMMARY_SORTED_TMP1(KEEP=BUSINESSDT PASTDUECNT PASTDUEAMT HELDCNT HELDCHECKAMTSUM REPMTPLANCNT TOTADVRECV TOTADVFEERECV TOTNSFCNT TOTNSFRECV TOTNSFFEERECV HELDCHECKADVAMT 
		HELDCHECKFEEAMT PRODUCT POS INSTANCE BRANDCD BANKMODEL COUNTRYCD STATE CITY ZIP BUSINESS_UNIT ZONENBR ZONENAME REGIONNBR REGIONRDO DIVISIONNBR DIVISIONDDO LOCNBR LOCATION_NAME 
	    LOC_OPEN_DT LOC_CLOSE_DT BEGINDT)
	OUT=WORK.SORTTEMPTABLESORTED
	;
	BY PRODUCT POS INSTANCE BRANDCD BANKMODEL COUNTRYCD STATE CITY ZIP BUSINESS_UNIT ZONENBR ZONENAME REGIONNBR REGIONRDO DIVISIONNBR DIVISIONDDO LOCNBR LOCATION_NAME LOC_OPEN_DT LOC_CLOSE_DT BEGINDT BUSINESSDT;
%RUNQUIT(&job,&sub1);

PROC TIMESERIES
DATA=WORK.SORTTEMPTABLESORTED
OUT=WORK.TSDSTIMESERIESDATADAILYSUMMARY_S(LABEL="TIME SERIES OUTPUT FOR WORK.DAILYSUMMARY_SORTED_TMP1")
	;
	ID BUSINESSDT 	INTERVAL=DAY ZEROMISS=NONE;
	VAR HELDCNT /	ACCUMULATE=NONE SETMISSING=PREVIOUS;
	VAR HELDCHECKAMTSUM /	ACCUMULATE=NONE SETMISSING=PREVIOUS;
	VAR REPMTPLANCNT /	ACCUMULATE=NONE SETMISSING=PREVIOUS;
	VAR TOTADVRECV /	ACCUMULATE=NONE SETMISSING=PREVIOUS;
	VAR TOTADVFEERECV /	ACCUMULATE=NONE SETMISSING=PREVIOUS;
	VAR TOTNSFCNT /	ACCUMULATE=NONE SETMISSING=PREVIOUS;
	VAR TOTNSFRECV /	ACCUMULATE=NONE SETMISSING=PREVIOUS;
	VAR TOTNSFFEERECV /	ACCUMULATE=NONE SETMISSING=PREVIOUS;
	VAR HELDCHECKADVAMT /	ACCUMULATE=NONE SETMISSING=PREVIOUS;
	VAR HELDCHECKFEEAMT /	ACCUMULATE=NONE SETMISSING=PREVIOUS;
	VAR PASTDUEAMT / ACCUMULATE=NONE SETMISSING=PREVIOUS;
	VAR PASTDUECNT / ACCUMULATE=NONE SETMISSING=PREVIOUS;
	BY PRODUCT POS INSTANCE BRANDCD BANKMODEL COUNTRYCD STATE CITY ZIP BUSINESS_UNIT ZONENBR ZONENAME REGIONNBR REGIONRDO DIVISIONNBR DIVISIONDDO LOCNBR LOCATION_NAME LOC_OPEN_DT LOC_CLOSE_DT BEGINDT;

%RUNQUIT(&job,&sub1);


PROC SQL;
   CREATE TABLE WORK.MISSINGDATES(LABEL="MISSING DATES") AS 
   SELECT T1.PRODUCT, 
          T1.POS, 
          T1.INSTANCE, 
          T1.BRANDCD, 
          T1.BANKMODEL, 
          T1.COUNTRYCD, 
          T1.STATE, 
          T1.CITY, 
          T1.ZIP, 
          T1.BUSINESS_UNIT, 
          T1.ZONENBR, 
          T1.ZONENAME, 
          T1.REGIONNBR, 
          T1.REGIONRDO, 
          T1.DIVISIONNBR, 
          T1.DIVISIONDDO, 
          T1.LOCNBR, 
          T1.LOCATION_NAME, 
          T1.LOC_OPEN_DT, 
          T1.LOC_CLOSE_DT, 
          T1.BUSINESSDT, 
          T1.BEGINDT, 
          T1.HELDCNT, 
          T1.HELDCHECKAMTSUM, 
          T1.REPMTPLANCNT, 
          T1.TOTADVRECV, 
          T1.TOTADVFEERECV, 
          T1.TOTNSFCNT, 
          T1.TOTNSFRECV, 
          T1.TOTNSFFEERECV, 
          T1.HELDCHECKADVAMT, 
          T1.HELDCHECKFEEAMT, 
          T1.PASTDUEAMT, 
          T1.PASTDUECNT, 
          T2.AVGDURATIONDAYS, 
          T2.AVGDURATIONCNT
      FROM WORK.TSDSTIMESERIESDATADAILYSUMMARY_S T1
           LEFT JOIN WORK.DAILYSUMMARY T2 ON (T1.LOCNBR = T2.LOCNBR) AND (T1.BUSINESSDT = T2.BUSINESSDT)
      WHERE T2.BUSINESSDT IS MISSING AND T2.LOCNBR IS MISSING;
%RUNQUIT(&job,&sub1);


DATA WORK.COMBINED_DS;
	SET WORK.DAILYSUMMARY
		WORK.MISSINGDATES;
%RUNQUIT(&job,&sub1);

PROC SQL;
   CREATE TABLE WORK.COMBINED_DS_SORTED AS 
   SELECT T1.PRODUCT, 
          T1.POS, 
          T1.INSTANCE, 
          T1.BRANDCD, 
          T1.BANKMODEL, 
          T1.COUNTRYCD, 
          T1.STATE, 
          T1.CITY, 
          T1.ZIP, 
          T1.BUSINESS_UNIT, 
          T1.ZONENBR, 
          T1.ZONENAME, 
          T1.REGIONNBR, 
          T1.REGIONRDO, 
          T1.DIVISIONNBR, 
          T1.DIVISIONDDO, 
          T1.LOCNBR, 
          T1.LOCATION_NAME, 
          T1.LOC_OPEN_DT, 
          T1.LOC_CLOSE_DT, 
          T1.BUSINESSDT, 
          T1.BEGINDT, 
          T1.ADVCNT, 
          T1.ADVAMTSUM, 
          T1.BUYCNT, 
          T1.BUYAMTSUM, 
          T1.AGNCNT, 
          T1.AGNADVSUM, 
          T1.DPCNT, 
          T1.DPAMTSUM, 
          T1.NPCNT, 
          T1.NPAMTSUM, 
          T1.NPPCNT, 
          T1.NPPAMTSUM, 
          T1.NSFCNT, 
          T1.NSFAMTSUM, 
          T1.WOCNT, 
          T1.WOAMTSUM, 
          T1.WOBCNT, 
          T1.WOBAMTSUM, 
          T1.REFCNT, 
          T1.REFAMTSUM, 
          T1.WORCNT, 
          T1.WORAMTSUM, 
          T1.VOIDCNT, 
          T1.VOIDAMTSUM, 
          T1.COUPONCNT, 
          T1.COUPONAMTSUM, 
          T1.WAIVEDCNT, 
          T1.WAIVEDAMTSUM, 
          T1.NEWCUSTCNT, 
          T1.NEWCUSTDEALCNT, 
          T1.MISCDISBAMTSUM, 
          T1.MISCRCPTAMTSUM, 
          T1.HELDCNT, 
          T1.HELDCHECKAMTSUM, 
          T1.TOTADVRECV, 
          T1.TOTADVFEERECV, 
          T1.TOTNSFCNT, 
          T1.TOTNSFRECV, 
          T1.TOTNSFFEERECV, 
          T1.OVERSHORTAMT, 
          T1.PASTDUECNT, 
          T1.EARNEDFEES, 
          T1.HOLDOVERAMT, 
          T1.VOIDMONEYMGMTCNT, 
          T1.VOIDMONEYMGMTAMTSUM, 
          T1.PASTDUEAMT, 
          T1.SAFEDEPAMT, 
          T1.HELDCHECKADVAMT, 
          T1.HELDCHECKFEEAMT, 
          T1.REPMTPLANCNT, 
          T1.CARDSSOLD, 
          T1.BEGINCARDCNT, 
          T1.CARDSLOAD, 
          T1.CARDSLOADAMT, 
          T1.SECONDPRESENTSUM, 
          T1.THIRDPRESENTSUM, 
          T1.SECONDPRESENTCNT, 
          T1.THIRDPRESENTCNT, 
          T1.AVGADVAMT, 
          T1.AVGDURATION, 
          T1.AVGFEEAMT, 
          T1.AVGDURATIONDAYS, 
          T1.AVGDURATIONCNT
      FROM WORK.COMBINED_DS T1
      ORDER BY T1.LOCNBR,
               T1.BUSINESSDT;
%RUNQUIT(&job,&sub1);

PROC SQL;
   CREATE TABLE WORK.DASHBOARD AS 
   SELECT T1.PRODUCT, 
          T1.POS, 
          T1.INSTANCE, 
          T1.BRANDCD, 
          T1.BANKMODEL, 
          T1.COUNTRYCD, 
          T1.STATE, 
          T1.CITY, 
          T1.ZIP, 
          T1.BUSINESS_UNIT, 
          T1.ZONENBR, 
          T1.ZONENAME, 
          T1.REGIONNBR, 
          T1.REGIONRDO, 
          T1.DIVISIONNBR, 
          T1.DIVISIONDDO, 
          T1.LOCNBR, 
          T1.LOCATION_NAME, 
          T1.LOC_OPEN_DT, 
          T1.LOC_CLOSE_DT, 
          T1.BUSINESSDT, 
          T1.BEGINDT, 
          T1.ADVCNT, 
          T1.ADVAMTSUM, 
          T1.AGNCNT, 
          T1.AGNADVSUM, 
          T1.EARNEDFEES, 
          T1.WOCNT, 
          T1.WOAMTSUM, 
          T1.WOBCNT, 
          T1.WOBAMTSUM, 
          T1.WORCNT, 
          T1.WORAMTSUM, 
          T1.NPAMTSUM, 
          T1.NPPAMTSUM, 
          T1.NSFCNT, 
          T1.NSFAMTSUM, 
          T1.NEWCUSTCNT, 
          T1.NEWCUSTDEALCNT, 
          T1.TOTADVRECV, 
          T1.TOTADVFEERECV, 
          T1.TOTNSFCNT AS DEFAULTCNT, 
          T1.TOTNSFRECV AS TOTDEFAULTRECV, 
          T1.TOTNSFFEERECV AS TOTDEFAULTFEERECV, 
          T1.HELDCNT, 
          T1.HELDCHECKAMTSUM, 
          T1.REPMTPLANCNT, 
          T1.BUYCNT, 
          T1.DPCNT, 
          T1.AVGADVAMT, 
          T1.AVGDURATION, 
          T1.AVGFEEAMT, 
          T1.PASTDUECNT, 
          T1.PASTDUEAMT, 
          T1.AVGDURATIONDAYS, 
          T1.AVGDURATIONCNT, 
          /* SUBSTITUTEROW */
            (CASE
              WHEN ADVCNT = . THEN 'Y'
              ELSE 'N'
            END) AS SUBSTITUTEROW
      FROM WORK.COMBINED_DS_SORTED T1;
%RUNQUIT(&job,&sub1);

PROC SQL;
   CREATE TABLE WORK.ACQUIREDLOANS AS 
   SELECT T1.DEALNBR
      FROM DBADMIN.ACQ_DEALREFERENCE T1;
%RUNQUIT(&job,&sub1);


DATA DEALSUMMARY;
	*SET EADV2.DEALSUMMARY (WHERE=(DATEPART(DEALDT) >= INTNX('MONTH',TODAY(),-31,'BEGINNING') AND (DEALSTATUSCD ~= 'V')));
	SET EADV2.DEALSUMMARY;
	LENGTH PRODUCT $15.;
	INSTANCE = 'EAPROD1';
	POS = 'EADVANTAGE';
	IF PRODUCTCD IN ('A', 'C') THEN PRODUCT = 'PAYDAY';
	ELSE IF PRODUCTCD = 'I' THEN PRODUCT = 'INSTALLMENT';
	BEGINDT = INTNX('MONTH',TODAY(),-24,'BEGINNING');
	DURATION_EVENT_DATE = MIN(DEALENDDT, DEPOSITDT, WRITEOFFDT);
	DEAL_DT = DATEPART(DEALDT);
	DUE_DT = DATEPART(DUEDT);
	DEPOSIT_DT = DATEPART(DEPOSITDT);
	WRITEOFF_DT = DATEPART(WRITEOFFDT);
	DEALEND_DT = DATEPART(DEALENDDT);
	IF (DURATION_EVENT_DATE >= DHMS(BEGINDT,0,0,0) AND DEALSTATUSCD ~= 'V')
    OR (DEALDT >= DHMS(BEGINDT,0,0,0) AND DEALSTATUSCD ~= 'V');
	FORMAT BEGINDT DEAL_DT DUE_DT DEPOSIT_DT WRITEOFF_DT DEALEND_DT MMDDYY10. DURATION_EVENT_DATE DATETIME20.;
	KEEP INSTANCE POS PRODUCT BEGINDT LOCNBR DEALNBR DEAL_DT DUE_DT DEPOSIT_DT WRITEOFF_DT DEALEND_DT ADVAMT FEEAMT OTHERFEEAMT INTERESTFEE DURATION_EVENT_DATE DEALSTATUSCD;
%RUNQUIT(&job,&sub1);



PROC SQL;
   CREATE TABLE WORK.EADV_DURATIONS AS 
   SELECT T1.DEALNBR, 
          T1.LOCNBR, 
          T1.ADVAMT, 
          T1.FEEAMT, 
          T1.OTHERFEEAMT, 
          T1.INTERESTFEE, 
          T1.INSTANCE, 
          T1.POS, 
          T1.PRODUCT, 
          T1.DEAL_DT, 
          T1.DUE_DT, 
          T1.DEPOSIT_DT, 
          T1.WRITEOFF_DT, 
          T1.DEALEND_DT, 
          /* DURATION_EVENT_DATE */
            (DATEPART(T1.DURATION_EVENT_DATE)) FORMAT=MMDDYY10. AS DURATION_EVENT_DATE, 
          T1.BEGINDT, 
          /* SCHED_DURATION_DAYS */
            (INTCK('DAY',DEAL_DT,DUE_DT)) AS SCHED_DURATION_DAYS, 
          /* TOTALFEES */
            (SUM(T1.FEEAMT,T1.OTHERFEEAMT,T1.INTERESTFEE)) AS TOTALFEES
      FROM DEALSUMMARY T1
           LEFT JOIN WORK.ACQUIREDLOANS T2 ON (T1.DEALNBR = T2.DEALNBR)
      WHERE T2.DEALNBR IS MISSING AND T1.PRODUCT NOT IN 
           (
           'INSTALLMENT',
           '""'
           );
%RUNQUIT(&job,&sub1);



PROC SQL;
   CREATE TABLE WORK.EADV_DURATIONS_TMP1 AS 
   SELECT T1.LOCNBR, 
          T1.POS, 
          T1.PRODUCT, 
          T1.DEAL_DT, 
          T1.DUE_DT, 
          T1.DEPOSIT_DT, 
          T1.WRITEOFF_DT, 
          T1.DEALEND_DT, 
          T1.DURATION_EVENT_DATE, 
          T1.SCHED_DURATION_DAYS, 
          T1.ADVAMT, 
          T1.FEEAMT, 
          T1.OTHERFEEAMT, 
          T1.INTERESTFEE, 
          T1.TOTALFEES, 
          /* DEPOSIT_DURATION_COUNT */
            (CASE
              WHEN T1.DURATION_EVENT_DATE ~= . AND T1.DURATION_EVENT_DATE = T1.DEPOSIT_DT THEN 1
              ELSE 0
            END) AS DEPOSIT_DURATION_COUNT, 
          /* DEPOSIT_DURATION_DAYS */
            (CASE
              WHEN T1.DURATION_EVENT_DATE ~= . AND T1.DURATION_EVENT_DATE = T1.DEPOSIT_DT THEN T1.DEPOSIT_DT - 
            T1.DEAL_DT
              ELSE 0
            END) AS DEPOSIT_DURATION_DAYS, 
          /* WO_DURATION_COUNT */
            (CASE
              WHEN T1.DURATION_EVENT_DATE ~= . AND T1.DURATION_EVENT_DATE = T1.WRITEOFF_DT THEN 1
              ELSE 0
            END) AS WO_DURATION_COUNT, 
          /* WO_DURATION_DAYS */
            (CASE
              WHEN T1.DURATION_EVENT_DATE ~= . AND T1.DURATION_EVENT_DATE = T1.WRITEOFF_DT THEN T1.WRITEOFF_DT - 
            T1.DEAL_DT
              ELSE 0
            END) AS WO_DURATION_DAYS, 
          /* WOB_DURATION_COUNT */
            (0) AS WOB_DURATION_COUNT, 
          /* WOB_DURATION_DAYS */
            (0) AS WOB_DURATION_DAYS, 
          /* WOD_DURATION_COUNT */
            (0) AS WOD_DURATION_COUNT, 
          /* WOD_DURATION_DAYS */
            (0) AS WOD_DURATION_DAYS, 
          /* REPAID_DURATION_COUNT */
            (CASE
              WHEN T1.DURATION_EVENT_DATE ~= . AND T1.DURATION_EVENT_DATE = T1.DEALEND_DT AND T1.DEALEND_DT ~= 
            T1.WRITEOFF_DT AND T1.DEALEND_DT ~= T1.DEPOSIT_DT THEN 1
              ELSE 0
            END) AS REPAID_DURATION_COUNT, 
          /* REPAID_DURATION_DAYS */
            (CASE
              WHEN T1.DURATION_EVENT_DATE ~= . AND T1.DURATION_EVENT_DATE = T1.DEALEND_DT AND T1.DEALEND_DT ~= 
            T1.WRITEOFF_DT AND T1.DEALEND_DT ~= T1.DEPOSIT_DT THEN T1.DEALEND_DT - T1.DEAL_DT
              ELSE 0
            END) AS REPAID_DURATION_DAYS, 
          /* DURATION */
            (T1.DURATION_EVENT_DATE - T1.DEAL_DT) LABEL="DURATION" AS DURATION
      FROM WORK.EADV_DURATIONS T1;
%RUNQUIT(&job,&sub1);


PROC SQL;
   CREATE TABLE WORK.EADV_SCHED_DURATION AS 
   SELECT T1.LOCNBR, 
          T1.POS, 
          T1.PRODUCT, 
          T1.DEAL_DT, 
          /* SCHED_DURATION_DAYS */
            (SUM(T1.SCHED_DURATION_DAYS)) AS SCHED_DURATION_DAYS, 
          /* SCHED_DURATION_ADVAMT */
            (SUM(T1.ADVAMT)) LABEL="SCHED_DURATION_ADVAMT" AS SCHED_DURATION_ADVAMT, 
          /* SCHED_DURATION_FEES */
            (SUM(SUM(T1.FEEAMT,T1.OTHERFEEAMT,T1.INTERESTFEE))) LABEL="SCHED_DURATION_FEES" AS SCHED_DURATION_FEES
      FROM WORK.EADV_DURATIONS_TMP1 T1
      GROUP BY T1.LOCNBR,
               T1.POS,
               T1.PRODUCT,
               T1.DEAL_DT;
%RUNQUIT(&job,&sub1);



PROC SQL;
   CREATE TABLE WORK.EADV_ACTUAL_DURATION AS 
   SELECT T1.LOCNBR, 
          T1.POS, 
          T1.PRODUCT, 
          T1.DURATION_EVENT_DATE AS BUSINESSDT, 
          /* DEPOSIT_DURATION_COUNT */
            (SUM(T1.DEPOSIT_DURATION_COUNT)) AS DEPOSIT_DURATION_COUNT, 
          /* DEPOSIT_DURATION_DAYS */
            (SUM(T1.DEPOSIT_DURATION_DAYS)) AS DEPOSIT_DURATION_DAYS, 
          /* WO_DURATION_COUNT */
            (SUM(T1.WO_DURATION_COUNT)) AS WO_DURATION_COUNT, 
          /* WO_DURATION_DAYS */
            (SUM(T1.WO_DURATION_DAYS)) AS WO_DURATION_DAYS, 
          /* WOB_DURATION_COUNT */
            (SUM(T1.WOB_DURATION_COUNT)) AS WOB_DURATION_COUNT, 
          /* WOB_DURATION_DAYS */
            (SUM(T1.WOB_DURATION_DAYS)) AS WOB_DURATION_DAYS, 
          /* WOD_DURATION_COUNT */
            (SUM(T1.WOD_DURATION_COUNT)) AS WOD_DURATION_COUNT, 
          /* WOD_DURATION_DAYS */
            (SUM(T1.WOD_DURATION_DAYS)) AS WOD_DURATION_DAYS, 
          /* REPAID_DURATION_COUNT */
            (SUM(T1.REPAID_DURATION_COUNT)) AS REPAID_DURATION_COUNT, 
          /* REPAID_DURATION_DAYS */
            (SUM(T1.REPAID_DURATION_DAYS)) AS REPAID_DURATION_DAYS, 
          /* ACTUAL_DURATION_ADVAMT */
            (SUM(T1.ADVAMT)) LABEL="ACTUAL_DURATION_ADVAMT" AS ACTUAL_DURATION_ADVAMT, 
          /* ACTUAL_DURATION_FEES */
            (SUM(SUM(T1.FEEAMT,T1.OTHERFEEAMT,T1.INTERESTFEE))) LABEL="ACTUAL_DURATION_FEES" AS ACTUAL_DURATION_FEES
      FROM WORK.EADV_DURATIONS_TMP1 T1
      WHERE T1.DURATION_EVENT_DATE NOT IS MISSING AND T1.DURATION <= 365
      GROUP BY T1.LOCNBR,
               T1.POS,
               T1.PRODUCT,
               T1.DURATION_EVENT_DATE;
%RUNQUIT(&job,&sub1);



PROC SQL;
   CREATE TABLE WORK.NEWFEEAMT AS 
   SELECT T1.PRODUCT AS PRODUCT, 
          T1.LOCNBR, 
          T1.DEAL_DT, 
          /* ADVFEEAMT */
            (SUM(SUM(T1.FEEAMT,T1.OTHERFEEAMT,T1.INTERESTFEE))) AS ADVFEEAMT
      FROM WORK.EADV_DURATIONS T1
      GROUP BY T1.PRODUCT,
               T1.LOCNBR,
               T1.DEAL_DT;
%RUNQUIT(&job,&sub1);


/*  EADVANTAGE PAYDAY  */
PROC SQL;
	CREATE TABLE EADV_PDL AS 
		SELECT 
			 LOCNBR
			,DATEPART(BUSINESSDT) 	AS BUSINESSDT FORMAT MMDDYY10.
			,SUM(PWOBEGINAMT) 						AS BEGIN_PWO_AMT
			,SUM(PWOCURRENTMONTHAMT) 				AS CURRENT_PWO_AMT
			,SUM(PWONEXTMONTHAMT) 					AS NEXT_MONTH_PWO_AMT
			,SUM(CASE WHEN BUSINESSDT BETWEEN DHMS(INTNX('MONTH',TODAY(),2,'B'),00,00,00) AND DHMS(INTNX('MONTH',TODAY(),2,'E'),00,00,00)
					  THEN PWOBEGINAMT
					  ELSE 0
				 END) 								AS NEXT_2_MONTH_PWO_AMT
			,SUM(WOAMTSUM) 							AS WO_AMT
			,SUM(OVERSHORTAMT) AS OVERSHORTAMT
			,SUM(HOLDOVERAMT) AS HOLDOVERAMT
			,SUM(WORAMTSUM) 						AS WOR_AMT
			,SUM(WOAMTSUM,-WORAMTSUM) 				AS NET_ACTUAL_WO
			,SUM(EARNEDFEESAMT) 					AS EARNED_FEES
			,'EAPROD1' 								AS INSTANCE
			,'EADV PAYDAY' 							AS PRODUCT_DESC
		FROM EADVRPT.RPT_DAILYREPORT
	WHERE BUSINESSDT BETWEEN DHMS(INTNX('MONTH',TODAY(),-24,'B'),00,00,00) AND DHMS(INTNX('DAY',TODAY(),-1,'B'),00,00,00)
	GROUP BY
		 LOCNBR
		,CALCULATED BUSINESSDT
	ORDER BY LOCNBR
		    ,CALCULATED BUSINESSDT
;
%RUNQUIT(&job,&sub1);

PROC TIMESERIES DATA=EADV_PDL OUT=EADV_PWO_TS;
ID BUSINESSDT INTERVAL=DAY;
VAR BEGIN_PWO_AMT / ACCUMULATE=NONE SETMISSING=NEXT;
BY LOCNBR;
%RUNQUIT(&job,&sub1);

DATA BEGIN_PWO_AMT;
	SET WORK.EADV_PWO_TS;
	MONTH=MONTH(BUSINESSDT);
	YEAR=YEAR(BUSINESSDT);
	WHERE DAY(BUSINESSDT) = 1;
	KEEP LOCNBR BUSINESSDT BEGIN_PWO_AMT MONTH YEAR;
	FORMAT BUSINESSDT MMDDYY10.;
%RUNQUIT(&job,&sub1);


PROC SQL;
   CREATE TABLE WORK.EADV_DAILYSUMMARY AS 
   SELECT T1.PRODUCT, 
          T1.POS, 
          T1.INSTANCE, 
          T1.BRANDCD, 
          T1.BANKMODEL, 
          T1.COUNTRYCD, 
          T1.STATE, 
          T1.CITY, 
          T1.ZIP, 
          T1.BUSINESS_UNIT, 
          T1.ZONENBR, 
          T1.ZONENAME, 
          T1.REGIONNBR, 
          T1.REGIONRDO, 
          T1.DIVISIONNBR, 
          T1.DIVISIONDDO, 
          T1.LOCNBR, 
          T1.LOCATION_NAME, 
          T1.LOC_OPEN_DT, 
          T1.LOC_CLOSE_DT, 
          T1.BUSINESSDT, 
          T1.BEGINDT, 
          T1.ADVCNT, 
          T1.ADVAMTSUM, 
          T4.ADVFEEAMT, 
          T1.AGNCNT, 
          T1.AGNADVSUM, 
          T1.EARNEDFEES, 
          T1.WOCNT, 
          T1.WOAMTSUM, 
          T1.WOBCNT, 
          T1.WOBAMTSUM, 
          T1.WORCNT, 
          T1.WORAMTSUM, 
          T1.NPAMTSUM, 
          /* DEFAULT_PMT */
            (T1.NPAMTSUM) AS DEFAULT_PMT, 
          T1.NPPAMTSUM, 
          T1.NSFCNT, 
          /* DEFAULT_CNT */
            (T1.NSFCNT) AS DEFAULT_CNT, 
          T1.NSFAMTSUM, 
          /* DEFAULT_AMT */
            (T1.NSFAMTSUM) AS DEFAULT_AMT, 
          T1.NEWCUSTCNT, 
          T1.NEWCUSTDEALCNT, 
          T1.TOTADVRECV, 
          T1.TOTADVFEERECV, 
          T1.DEFAULTCNT, 
          T1.TOTDEFAULTRECV, 
          T1.TOTDEFAULTFEERECV, 
          T1.HELDCNT, 
          T1.HELDCHECKAMTSUM, 
          T1.REPMTPLANCNT, 
          T1.BUYCNT, 
          T1.DPCNT, 
          T1.PASTDUECNT AS PASTDUECNT_1, 
          T1.PASTDUEAMT AS PASTDUEAMT_1, 
          T5.OVERSHORTAMT, 
          T5.HOLDOVERAMT, 
          T1.AVGADVAMT, 
          T1.AVGDURATION, 
          T1.AVGFEEAMT, 
          T3.SCHED_DURATION_DAYS, 
          T3.SCHED_DURATION_ADVAMT, 
          T3.SCHED_DURATION_FEES, 
          T1.AVGDURATIONDAYS, 
          T1.AVGDURATIONCNT, 
          T2.DEPOSIT_DURATION_COUNT, 
          T2.DEPOSIT_DURATION_DAYS, 
          T2.WO_DURATION_COUNT, 
          T2.WO_DURATION_DAYS, 
          T2.WOB_DURATION_COUNT, 
          T2.WOB_DURATION_DAYS, 
          T2.WOD_DURATION_COUNT, 
          T2.WOD_DURATION_DAYS, 
          T2.REPAID_DURATION_COUNT, 
          T2.REPAID_DURATION_DAYS, 
          T2.ACTUAL_DURATION_ADVAMT, 
          T2.ACTUAL_DURATION_FEES, 
          T5.CURRENT_PWO_AMT, 
          T5.NEXT_MONTH_PWO_AMT, 
          T5.NEXT_2_MONTH_PWO_AMT, 
          T1.SUBSTITUTEROW, 
          /* MONTH */
            (MONTH(T1.BUSINESSDT)) AS MONTH, 
          /* YEAR */
            (YEAR(T1.BUSINESSDT)) AS YEAR
      FROM WORK.DASHBOARD T1
           LEFT JOIN WORK.EADV_ACTUAL_DURATION T2 ON (T1.LOCNBR = T2.LOCNBR) AND (T1.POS = T2.POS) AND (T1.PRODUCT = 
          T2.PRODUCT) AND (T1.BUSINESSDT = T2.BUSINESSDT)
           LEFT JOIN WORK.EADV_SCHED_DURATION T3 ON (T1.LOCNBR = T3.LOCNBR) AND (T1.POS = T3.POS) AND (T1.PRODUCT = 
          T3.PRODUCT) AND (T1.BUSINESSDT = T3.DEAL_DT)
           LEFT JOIN WORK.NEWFEEAMT T4 ON (T1.LOCNBR = T4.LOCNBR) AND (T1.BUSINESSDT = T4.DEAL_DT)
           LEFT JOIN WORK.EADV_PDL T5 ON (T1.LOCNBR = T5.LOCNBR) AND (T1.BUSINESSDT = T5.BUSINESSDT)
/*	  WHERE T1.BUSINESSDT >= DHMS(TODAY()-5,00,00,00)*/
;
%RUNQUIT(&job,&sub1);

PROC SQL;
	CREATE TABLE EADV_DAILYSUMMARY AS
		SELECT T1.*
		      ,CASE WHEN T2.BEGIN_PWO_AMT = . THEN 0 ELSE T2.BEGIN_PWO_AMT END AS BEGIN_PWO_AMT
		FROM WORK.EADV_DAILYSUMMARY T1
		LEFT JOIN
		WORK.BEGIN_PWO_AMT T2
		ON (T1.LOCNBR = T2.LOCNBR AND
		    T1.MONTH = T2.MONTH AND
			T1.YEAR = T2.YEAR)
		WHERE T1.BUSINESSDT >= TODAY() - 10
;
%RUNQUIT(&job,&sub1);

/* ----- ADDED BY HARITHA ----- */
/* THIS IS TO EXRACT THE FIRST DATES BY LOCATION WHEN THE UNDER-COLLATERIZED LOANS WAS IMPLEMENTED IN TX */
/* KEEPING THE LIST OF TX CENTERS WITHIN WHICH UNDER_COLLATERIZED LOANS SHOULD BE IDENTIFIED */

DATA TXLOCNBR;
	SET EADV.LOCATION;
	IF STATECD = "TX";
	KEEP LOCNBR;
%RUNQUIT(&job,&sub1);

/* EXTRACTING THE DEALS WITH UNDER-COLLATERIZED LOAN AS THEIR PRODUCT */
/* DEFINING THE AS UNDER-COLLATERIZED WHEN THEIR CUSTCHECKAMT <	 (ADVAMT + FEEAMT + OTHERFEEAMT + COUPONAMT) */
/* FILTERING THE DATA ONLY FOR TX BY LIMITING THE LOCATIONS TO THOSE EXTRACTED ABOVE */
/* SINCE THE PRODUCT CHANGE OCCURED RECENTLY, ADDING THE DATE FILTER TO 2017 AND AFTER */

PROC SQL;
	CONNECT TO ORACLE(USER=&USER. PASSWORD=&PASSWORD. PATH='EAPROD1');
	CREATE TABLE TX_UC_LOANS AS
	SELECT *
	FROM CONNECTION TO ORACLE
	(
/*	SELECT **/
/*	FROM */
/*	(*/
		SELECT	A.LOCNBR,
				A.DEALNBR,
				A.DEALDT,
				A.DEALDT		AS DEALDATE,
				A.CUSTCHECKAMT,
				A.ADVAMT,
				A.FEEAMT,
				A.OTHERFEEAMT,
				A.COUPONAMT,
				A.REBATEAMT,
				A.PRODUCTCD,	
				A.ADVAMT + A.FEEAMT + A.OTHERFEEAMT + (A.OTHERFEEAMT * -.20) - A.COUPONAMT AS TOTALFEES,
				(CASE WHEN ROUND(A.CUSTCHECKAMT, 2) = A.ADVAMT + A.FEEAMT + A.OTHERFEEAMT + (A.OTHERFEEAMT * -.20) - A.COUPONAMT THEN 1 ELSE 0 END) AS FLG
		FROM  EADV.DEALSUMMARY A
		INNER JOIN (SELECT DISTINCT LOCNBR
					FROM EADV.LOCATION
					WHERE STATECD = 'TX'
					) B
			ON (A.LOCNBR = B.LOCNBR)
		WHERE A.DEALDT >= '01JAN2017'
			AND A.DEALSTATUSCD ^= 'V'		  
	)
/*	WHERE FLG = 1*/
/*	ORDER BY LOCNBR*/
/*		    ,DEALDT*/
/*	)*/
	;
	DISCONNECT FROM ORACLE;
%RUNQUIT(&job,&sub1);

PROC SORT DATA=TX_UC_LOANS;
BY LOCNBR DEALDT;
WHERE FLG = 1;
%RUNQUIT(&job,&sub1);

/* PULLING IN THE FIRST DATES WHEN CHANGE IN THE PRODUCT OCCURED */

DATA SKYNET.TX_UC_DATEBYLOC;
	SET TX_UC_LOANS;
	BY	LOCNBR
		DEALDT
	;
	IF FIRST.LOCNBR;
	KEEP	LOCNBR
			DEALDATE
	;
%RUNQUIT(&job,&sub1);

/* USING THIS FINAL DATASET IN STDM_STEP18_ROLLUP1_DEV FOR MODIFYING THE PRODUCT DESCRIPTION */

%LET ENDINGDT = INTNX('DAY',TODAY(),-1,'BEGINNING');

DATA _NULL_;
	CALL SYMPUTX('END_DT',PUT(&ENDINGDT,YYMMDDN8.),G);
%RUNQUIT(&job,&sub1);

DATA WORK.A&END_DT;
	X = &ENDINGDT;
	FORMAT X MMDDYY10.;
%RUNQUIT(&job,&sub1);
							 
/*--------------*/
/*   EADV PDL   */
/*--------------*/

PROC SQL;
   CREATE TABLE EADV_NEW_ORIGINATIONS AS 
   SELECT T1.PRODUCT, 
          T1.POS, 
          T1.INSTANCE, 
          T1.BRANDCD, 
          T1.BANKMODEL, 
          T1.COUNTRYCD, 
          T1.STATE, 
          T1.CITY, 
          T1.ZIP, 
          T1.BUSINESS_UNIT, 
          T1.ZONENBR, 
          T1.ZONENAME, 
          T1.REGIONNBR, 
          T1.REGIONRDO, 
          T1.DIVISIONNBR, 
          T1.DIVISIONDDO, 
          T1.LOCNBR, 
          T1.LOCATION_NAME, 
          T1.LOC_OPEN_DT, 
          T1.LOC_CLOSE_DT, 
          T1.BUSINESSDT, 
          /* NEW_ORIGINATIONS */
            (SUM(T1.ADVCNT,T1.AGNCNT)) AS NEW_ORIGINATIONS, 
          /* NEW_ADV_AMT */
            (SUM(T1.ADVAMTSUM,T1.AGNADVSUM)) AS NEW_ADV_AMT, 
          T1.ADVFEEAMT AS NEW_ADVFEE_AMT, 
          T1.TOTADVRECV, 
          T1.TOTADVFEERECV, 
          /* COMPLIANT_LOANS_OUTSTANDING */
            (SUM(T1.HELDCNT,T1.REPMTPLANCNT)) AS COMPLIANT_LOANS_OUTSTANDING, 
          T1.DEFAULTCNT AS DEFAULT_LOANS_OUTSTANDING, 
          T1.TOTDEFAULTRECV, 
          T1.TOTDEFAULTFEERECV, 
          T1.NSFAMTSUM AS NSF_AMOUNT, 
          T1.NPAMTSUM AS NSF_PAYMENT_AMOUNT, 
          T1.NPPAMTSUM AS NSF_PREPAYMENT_AMOUNT, 
          T1.WOCNT, 
          T1.WOAMTSUM, 
          T1.WOBAMTSUM, 
          T1.WOBCNT, 
          T1.WORCNT, 
          T1.WORAMTSUM, 
          T1.AGNCNT AS CASHAGAIN_COUNT, 
          T1.BUYCNT AS BUYBACK_COUNT, 
          T1.DPCNT AS DEPOSIT_COUNT, 
          T1.BEGIN_PWO_AMT, 
          T1.CURRENT_PWO_AMT, 
          T1.NEXT_MONTH_PWO_AMT, 
          T1.NEXT_2_MONTH_PWO_AMT, 
          T1.DEFAULT_PMT, 
          T1.DEFAULT_CNT, 
          T1.DEFAULT_AMT, 
          /* GROSS_REVENUE */
            (T1.EARNEDFEES) FORMAT=10.2 AS GROSS_REVENUE, 
          /* GROSS_WRITE_OFF */
            (SUM(T1.WOAMTSUM,T1.WOBAMTSUM)) FORMAT=10.2 AS GROSS_WRITE_OFF, 
          /* NET_WRITE_OFF */
            ((SUM(T1.WOAMTSUM,T1.WOBAMTSUM)) - T1.WORAMTSUM) FORMAT=10.2 AS NET_WRITE_OFF, 
          /* NET_REVENUE */
            ((T1.EARNEDFEES) - ((SUM(T1.WOAMTSUM,T1.WOBAMTSUM)) - T1.WORAMTSUM)) FORMAT=10.2 AS NET_REVENUE, 
          /* ACTUAL_DURATION_COUNT */
            (SUM(T1.DEPOSIT_DURATION_COUNT,T1.WO_DURATION_COUNT,T1.WOB_DURATION_COUNT,T1.WOD_DURATION_COUNT,T1.REPAID_DURATION_COUNT)) 
            AS ACTUAL_DURATION_COUNT, 
          /* ACTUAL_DURATION_DAYS */
            (SUM(T1.DEPOSIT_DURATION_DAYS,T1.WO_DURATION_DAYS,T1.WOB_DURATION_DAYS,T1.WOD_DURATION_DAYS,T1.REPAID_DURATION_DAYS)) 
            AS ACTUAL_DURATION_DAYS, 
          T1.ACTUAL_DURATION_ADVAMT, 
          T1.ACTUAL_DURATION_FEES, 
          T1.AVGDURATIONDAYS, 
          T1.AVGDURATIONCNT, 
          /* PRODUCT_DESC */
/*	          ("EADV PAYDAY") AS PRODUCT_DESC, */
		 (CASE 
			WHEN (T1.BUSINESSDT >= DATEPART(T2.DEALDATE)  AND T2.DEALDATE ^= .) 
				THEN "TX CSO CASH ADVANCE" 
				ELSE "EADV PAYDAY" 
		  END) AS PRODUCT_DESC,
          T1.HELDCNT, 
          T1.PASTDUECNT_1, 
          T1.PASTDUEAMT_1, 
          T1.OVERSHORTAMT, 
          T1.HOLDOVERAMT, 
          T1.ADVAMTSUM, 
          T1.AGNADVSUM, 
          T1.REPMTPLANCNT, 
          T1.ADVCNT, 
          T1.AVGADVAMT, 
          T1.AVGDURATION, 
          T1.AVGFEEAMT
  	FROM EADV_DAILYSUMMARY T1
		LEFT JOIN SKYNET.TX_UC_DATEBYLOC AS T2
			ON T1.LOCNBR = T2.LOCNBR
	;
%RUNQUIT(&job,&sub1);

/* SUM ALL METRICS TO COLLAPSE DUPLICATE CENTER/DAY FROM PNL */
PROC SQL;
   CREATE TABLE RU1_LENDINGPRODUCTS_ROLLUP AS 
   SELECT T1.PRODUCT, 
          T1.PRODUCT_DESC, 
          T1.POS, 
          T1.INSTANCE, 
          T1.BRANDCD, 
          T1.BANKMODEL, 
          T1.COUNTRYCD, 
          T1.STATE, 
          T1.CITY, 
          T1.ZIP, 
          T1.BUSINESS_UNIT, 
          T1.ZONENBR, 
          T1.ZONENAME, 
          T1.REGIONNBR, 
          T1.REGIONRDO, 
          T1.DIVISIONNBR, 
          T1.DIVISIONDDO, 
          T1.LOCNBR, 
          T1.LOCATION_NAME, 
          T1.LOC_OPEN_DT, 
          T1.LOC_CLOSE_DT, 
          T1.BUSINESSDT, 
          /* NEW_ORIGINATIONS */
            (SUM(T1.NEW_ORIGINATIONS)) AS NEW_ORIGINATIONS, 
          /* NEW_ADV_AMT */
            (SUM(T1.NEW_ADV_AMT)) AS NEW_ADV_AMT, 
          /* NEW_ADVFEE_AMT */
            (SUM(T1.NEW_ADVFEE_AMT)) AS NEW_ADVFEE_AMT, 
          /* TOTADVRECV */
            (SUM(T1.TOTADVRECV)) FORMAT=12.2 AS TOTADVRECV, 
          /* TOTADVFEERECV */
            (SUM(T1.TOTADVFEERECV)) FORMAT=10.2 AS TOTADVFEERECV, 
          /* COMPLIANT_LOANS_OUTSTANDING */
            (SUM(T1.COMPLIANT_LOANS_OUTSTANDING)) AS COMPLIANT_LOANS_OUTSTANDING, 
          /* DEFAULT_LOANS_OUTSTANDING */
            (SUM(T1.DEFAULT_LOANS_OUTSTANDING)) AS DEFAULT_LOANS_OUTSTANDING, 
          /* TOTDEFAULTRECV */
            (SUM(T1.TOTDEFAULTRECV)) FORMAT=12.2 AS TOTDEFAULTRECV, 
          /* TOTDEFAULTFEERECV */
            (SUM(T1.TOTDEFAULTFEERECV)) FORMAT=10.2 AS TOTDEFAULTFEERECV, 
          /* NSF_AMOUNT */
            (SUM(T1.NSF_AMOUNT)) FORMAT=10.2 AS NSF_AMOUNT, 
          /* NSF_PAYMENT_AMOUNT */
            (SUM(T1.NSF_PAYMENT_AMOUNT)) FORMAT=10.2 AS NSF_PAYMENT_AMOUNT, 
          /* NSF_PREPAYMENT_AMOUNT */
            (SUM(T1.NSF_PREPAYMENT_AMOUNT)) FORMAT=10.2 AS NSF_PREPAYMENT_AMOUNT, 
          /* WOCNT */
            (SUM(T1.WOCNT)) AS WOCNT, 
          /* WOAMTSUM */
            (SUM(T1.WOAMTSUM)) FORMAT=14.2 AS WOAMTSUM, 
          /* WOBAMTSUM */
            (SUM(T1.WOBAMTSUM)) FORMAT=10.2 AS WOBAMTSUM, 
          /* WOBCNT */
            (SUM(T1.WOBCNT)) AS WOBCNT, 
          /* WORCNT */
            (SUM(T1.WORCNT)) AS WORCNT, 
          /* WORAMTSUM */
            (SUM(T1.WORAMTSUM)) FORMAT=10.2 AS WORAMTSUM, 
          /* CASHAGAIN_COUNT */
            (SUM(T1.CASHAGAIN_COUNT)) AS CASHAGAIN_COUNT, 
          /* BUYBACK_COUNT */
            (SUM(T1.BUYBACK_COUNT)) AS BUYBACK_COUNT, 
          /* DEPOSIT_COUNT */
            (SUM(T1.DEPOSIT_COUNT)) AS DEPOSIT_COUNT, 
          /* BEGIN_PWO_AMT */
            (SUM(T1.BEGIN_PWO_AMT)) AS BEGIN_PWO_AMT, 
          /* CURRENT_PWO_AMT */
            (SUM(T1.CURRENT_PWO_AMT)) AS CURRENT_PWO_AMT, 
          /* NEXT_MONTH_PWO_AMT */
            (SUM(T1.NEXT_MONTH_PWO_AMT)) AS NEXT_MONTH_PWO_AMT, 
          /* NEXT_2_MONTH_PWO_AMT */
            (SUM(T1.NEXT_2_MONTH_PWO_AMT)) AS NEXT_2_MONTH_PWO_AMT, 
          /* DEFAULT_PMT */
            (SUM(T1.DEFAULT_PMT)) FORMAT=10.2 AS DEFAULT_PMT, 
          /* DEFAULT_CNT */
            (SUM(T1.DEFAULT_CNT)) AS DEFAULT_CNT, 
          /* DEFAULT_AMT */
            (SUM(T1.DEFAULT_AMT)) FORMAT=10.2 AS DEFAULT_AMT, 
          /* GROSS_REVENUE */
            (SUM(T1.GROSS_REVENUE)) FORMAT=10.2 AS GROSS_REVENUE, 
          /* GROSS_WRITE_OFF */
            (SUM(T1.GROSS_WRITE_OFF)) FORMAT=10.2 AS GROSS_WRITE_OFF, 
          /* NET_WRITE_OFF */
            (SUM(T1.NET_WRITE_OFF)) FORMAT=10.2 AS NET_WRITE_OFF, 
          /* NET_REVENUE */
            (SUM(T1.NET_REVENUE)) FORMAT=10.2 AS NET_REVENUE, 
          /* ACTUAL_DURATION_COUNT */
            (SUM(T1.ACTUAL_DURATION_COUNT)) AS ACTUAL_DURATION_COUNT, 
          /* ACTUAL_DURATION_DAYS */
            (SUM(T1.ACTUAL_DURATION_DAYS)) AS ACTUAL_DURATION_DAYS, 
          /* ACTUAL_DURATION_ADVAMT */
            (SUM(T1.ACTUAL_DURATION_ADVAMT)) AS ACTUAL_DURATION_ADVAMT, 
          /* ACTUAL_DURATION_FEES */
            (SUM(T1.ACTUAL_DURATION_FEES)) AS ACTUAL_DURATION_FEES, 
          /* AVGDURATIONDAYS */
            (SUM(T1.AVGDURATIONDAYS)) AS AVGDURATIONDAYS, 
          /* AVGDURATIONCNT */
            (SUM(T1.AVGDURATIONCNT)) AS AVGDURATIONCNT, 
          /* HELDCNT */
            (SUM(T1.HELDCNT)) AS HELDCNT, 
          /* PASTDUECNT_1 */
            (SUM(T1.PASTDUECNT_1)) AS PASTDUECNT_1, 
          /* PASTDUEAMT_1 */
            (SUM(T1.PASTDUEAMT_1)) FORMAT=12.2 AS PASTDUEAMT_1, 
          /* OVERSHORTAMT */
            (SUM(T1.OVERSHORTAMT)) AS OVERSHORTAMT, 
          /* HOLDOVERAMT */
            (SUM(T1.HOLDOVERAMT)) AS HOLDOVERAMT, 
          /* ADVAMTSUM */
            (SUM(T1.ADVAMTSUM)) FORMAT=14.2 AS ADVAMTSUM, 
          /* AGNADVSUM */
            (SUM(T1.AGNADVSUM)) FORMAT=14.2 AS AGNADVSUM, 
          /* REPMTPLANCNT */
            (SUM(T1.REPMTPLANCNT)) AS REPMTPLANCNT, 
          /* ADVCNT */
            (SUM(T1.ADVCNT)) AS ADVCNT, 
          /* AVGADVAMT */
            (SUM(T1.AVGADVAMT)) FORMAT=10.2 AS AVGADVAMT, 
          /* AVGDURATION */
            (SUM(T1.AVGDURATION)) FORMAT=10.2 AS AVGDURATION, 
          /* AVGFEEAMT */
            (SUM(T1.AVGFEEAMT)) FORMAT=10.2 AS AVGFEEAMT, 
          /* PASTDUEAMT_2 */
            (SUM(0)) FORMAT=12.2 AS PASTDUEAMT_2, 
          /* PASTDUECNT_2 */
            (SUM(0)) FORMAT=11. AS PASTDUECNT_2, 
          /* REFINANCE_CNT */
            (SUM(0)) AS REFINANCE_CNT, 
          /* AGNCNT */
            (SUM(0)) AS AGNCNT, 
          /* POSSESSION_AMT */
            (SUM(0)) FORMAT=21.4 AS POSSESSION_AMT, 
          /* POSSESSION_CNT */
            (SUM(0)) AS POSSESSION_CNT, 
          /* PASTDUEAMT_3 */
            (SUM(0)) FORMAT=21.4 AS PASTDUEAMT_3, 
          /* PASTDUECNT_3 */
            (SUM(0)) AS PASTDUECNT_3, 
          /* PASTDUEAMT_4 */
            (SUM(0)) FORMAT=21.4 AS PASTDUEAMT_4, 
          /* PASTDUECNT_4 */
            (SUM(0)) AS PASTDUECNT_4, 
          /* PASTDUEAMT_5 */
            (SUM(0)) FORMAT=21.4 AS PASTDUEAMT_5, 
          /* PASTDUECNT_5 */
            (SUM(0)) AS PASTDUECNT_5, 
          /* PASTDUEAMT_6 */
            (SUM(0)) FORMAT=21.4 AS PASTDUEAMT_6, 
          /* PASTDUECNT_6 */
            (SUM(0)) AS PASTDUECNT_6, 
          /* BLACK_BOOK_VALUE */
            (SUM(0)) AS BLACK_BOOK_VALUE, 
          /* SOLD_AMOUNT */
            (SUM(0)) FORMAT=21.4 AS SOLD_AMOUNT, 
          /* AGNAMTSUM */
            (SUM(0)) AS AGNAMTSUM, 
          /* RCC_IN_PROCESS */
            (SUM(0)) AS RCC_IN_PROCESS, 
          /* RCC_INELIGIBLE */
            (SUM(0)) FORMAT=11. AS RCC_INELIGIBLE, 
          /* ADVAMT */
            (SUM(0)) FORMAT=12.2 AS ADVAMT, 
          /* CASHAGAIN_AMOUNT */
            (SUM(0)) FORMAT=12.2 AS CASHAGAIN_AMOUNT, 
          /* SOLD_COUNT */
            (SUM(0)) FORMAT=12.2 AS SOLD_COUNT, 
          /* NET_WRITE_OFF_NEW */
            (SUM(0)) AS NET_WRITE_OFF_NEW, 
          /* GROSS_REVENUE_NEW */
            (SUM(0)) AS GROSS_REVENUE_NEW, 
          /* GROSS_WRITE_OFF_NEW */
            (SUM(0)) FORMAT=12.2 AS GROSS_WRITE_OFF_NEW, 
          /* NET_REVENUE_NEW */
            (SUM(0)) AS NET_REVENUE_NEW, 
          /* WORAMTSUM_OLD */
            (SUM(0)) FORMAT=12.2 AS WORAMTSUM_OLD, 
          /* FIRST_PRESENTMENT_CNT */
            (SUM(0)) AS FIRST_PRESENTMENT_CNT, 
          /* SATISFIED_PAYMENT_CNT */
            (SUM(0)) AS SATISFIED_PAYMENT_CNT, 
          /* DEL_RECV_AMT */
            (SUM(0)) AS DEL_RECV_AMT, 
          /* DEL_RECV_CNT */
            (SUM(0)) AS DEL_RECV_CNT
      FROM EADV_NEW_ORIGINATIONS T1
      GROUP BY T1.PRODUCT,
               T1.PRODUCT_DESC,
               T1.POS,
               T1.INSTANCE,
               T1.BRANDCD,
               T1.BANKMODEL,
               T1.COUNTRYCD,
               T1.STATE,
               T1.CITY,
               T1.ZIP,
               T1.BUSINESS_UNIT,
               T1.ZONENBR,
               T1.ZONENAME,
               T1.REGIONNBR,
               T1.REGIONRDO,
               T1.DIVISIONNBR,
               T1.DIVISIONDDO,
               T1.LOCNBR,
               T1.LOCATION_NAME,
               T1.LOC_OPEN_DT,
               T1.LOC_CLOSE_DT,
               T1.BUSINESSDT;
%RUNQUIT(&job,&sub1);

%INCLUDE "\\CSSSASAPP\CADA\SAS SOURCE CODE\PRODUCTION\SERVICE ACCOUNTS\SVC_SASUSER.SAS";
%INCLUDE "E:\SHARED\CADA\SAS SOURCE CODE\PRODUCTION\STDM\STDM_LIBRARY_SCRIPT.SAS";
LIBNAME SKYNET "E:\SHARED\CADA\SAS DATA\DATAMART\STDM";
LIBNAME NORECV "E:\SHARED\CADA\SAS DATA\DATAMART\SCOCHRAN";

%LET ENDINGDT = INTNX('DAY',TODAY(),-1,'BEGINNING');

DATA _NULL_;
	CALL SYMPUTX('END_DT',PUT(&ENDINGDT,YYMMDDN8.),G);
%RUNQUIT(&job,&sub1);

DATA WORK.A&END_DT;
	X = &ENDINGDT;
	FORMAT X MMDDYY10.;
%RUNQUIT(&job,&sub1);

LIBNAME BIOR ORACLE
	USER=&USER
	PW=&PASSWORD
	PATH=BIOR
	SCHEMA=BIOR;


DATA THURSDAYDATES_TMP1;
	DO I = "1JAN2000"D TO TODAY();
		BUSINESSDT = I;
		DAYNAME = COMPRESS(PUT(BUSINESSDT,DOWNAME.));
		OUTPUT;
	END;
	FORMAT BUSINESSDT MMDDYY10.;
%RUNQUIT(&job,&sub1);

PROC SQL;
	CREATE TABLE THURSDAYDATES_TMP2 AS
		SELECT T1.*, T2.HOLIDAYNAME
		  FROM THURSDAYDATES_TMP1 T1
			LEFT JOIN BIOR.I_HOLIDAYS T2 ON (T1.BUSINESSDT = DATEPART(T2.HOLIDAY_DT))
		 ORDER BY T1.BUSINESSDT DESC;
%RUNQUIT(&job,&sub1);

DATA THURSDAYDATES_TMP3;
	SET THURSDAYDATES_TMP2;
	PRIORDAYHOLIDAY = LAG1(HOLIDAYNAME);
	PRIORDATE = LAG1(BUSINESSDT);
	IF DAYNAME = 'THURSDAY'
		AND BUSINESSDT ~= INTNX('MONTH',BUSINESSDT,0,'END')
		AND HOLIDAYNAME = ''
		THEN THURSDAYWEEK = 'Y';
	ELSE
		IF DAYNAME = 'WEDNESDAY'
			AND (PRIORDAYHOLIDAY ~= ''
			 OR PRIORDATE = INTNX('MONTH',BUSINESSDT,0,'END'))
			THEN THURSDAYWEEK = 'Y';
	ELSE
		THURSDAYWEEK = 'N';
	FORMAT PRIORDATE MMDDYY10.;
%RUNQUIT(&job,&sub1);

DATA DAILY_SUMMARY_ALL_TMP2;
	SET RU1_LENDINGPRODUCTS_ROLLUP;
		LAST_REPORT_DT = INTNX('DAY',TODAY(),-1);
		LASTTHURSDAYOFMONTH = INTNX('WEEK.5',INTNX('MONTH',BUSINESSDT,0,'END'),0);
		IF LASTTHURSDAYOFMONTH = INTNX('MONTH',BUSINESSDT,0,'END') 
		   	OR LASTTHURSDAYOFMONTH = HOLIDAY('VETERANSUSG',YEAR(BUSINESSDT))
			OR LASTTHURSDAYOFMONTH = HOLIDAY('VETERANS',YEAR(BUSINESSDT))
			OR LASTTHURSDAYOFMONTH = HOLIDAY('THANKSGIVING',YEAR(BUSINESSDT))
			OR LASTTHURSDAYOFMONTH = HOLIDAY('CHRISTMAS',YEAR(BUSINESSDT)) 
				THEN LASTTHURSDAYOFMONTH = INTNX('DAY',LASTTHURSDAYOFMONTH,-1);
		FORMAT LASTTHURSDAYOFMONTH MMDDYY10.;
	IF BUSINESSDT = LASTTHURSDAYOFMONTH THEN LASTTHURSDAY = 'Y';
			ELSE LASTTHURSDAY = 'N';
	DROP LASTTHURSDAYOFMONTH;
	FORMAT LAST_REPORT_DT MMDDYY10.;
%RUNQUIT(&job,&sub1);

PROC SQL;
	CREATE TABLE WORK.DAILY_SUMMARY_ALL_TMP3 AS
		SELECT T1.*, T2.THURSDAYWEEK
          FROM WORK.DAILY_SUMMARY_ALL_TMP2 T1, WORK.THURSDAYDATES_TMP3 T2
		 WHERE T1.BUSINESSDT = T2.BUSINESSDT;
%RUNQUIT(&job,&sub1);

PROC SORT DATA=DAILY_SUMMARY_ALL_TMP3;
	BY LOCNBR BUSINESSDT;
%RUNQUIT(&job,&sub1);

DATA LAST_REPORT_DATE;
	SET DAILY_SUMMARY_ALL_TMP3;
	BY LOCNBR BUSINESSDT;
	LOC_LAST_REPORTED_DT = BUSINESSDT;
	IF LAST.LOCNBR THEN OUTPUT;
	KEEP LOCNBR LOC_LAST_REPORTED_DT;
	FORMAT LOC_LAST_REPORTED_DT MMDDYY10.;
%RUNQUIT(&job,&sub1);


PROC SQL;
   CREATE TABLE WORK.HOLIDAYS(LABEL="HOLIDAYS") AS 
   SELECT /* HOLIDAYDT */
            (DATEPART(T1.HOLIDAY_DT)) FORMAT=MMDDYY10. LABEL="HOLIDAYDT" AS HOLIDAYDT, 
          T1.HOLIDAYNAME
      FROM BIOR.I_HOLIDAYS T1;
%RUNQUIT(&job,&sub1);


PROC SQL;
   CREATE TABLE WORK.DAILY_SUMMARY_ALL_TMP4 AS 
   SELECT T1.PRODUCT, 
          T1.PRODUCT_DESC, 
          T1.POS, 
          T1.INSTANCE, 
          T1.BRANDCD, 
          T1.BANKMODEL, 
          T1.COUNTRYCD, 
          T1.STATE, 
          T1.ZIP, 
          T1.CITY, 
          T1.BUSINESS_UNIT, 
          T1.ZONENBR, 
          T1.ZONENAME, 
          T1.REGIONNBR, 
          T1.REGIONRDO, 
          T1.DIVISIONNBR, 
          T1.DIVISIONDDO, 
          T1.LOCNBR, 
          T1.LOCATION_NAME, 
          T1.LOC_OPEN_DT, 
          T1.LOC_CLOSE_DT, 
          T1.BUSINESSDT, 
          T1.LASTTHURSDAY, 
          T2.HOLIDAYNAME, 
          T1.THURSDAYWEEK, 
          T1.LAST_REPORT_DT, 
          T1.NEW_ORIGINATIONS, 
          T1.NEW_ADV_AMT, 
          T1.NEW_ADVFEE_AMT, 
          T1.TOTADVRECV, 
          T1.TOTADVFEERECV, 
          T1.COMPLIANT_LOANS_OUTSTANDING, 
          T1.DEFAULT_LOANS_OUTSTANDING, 
          T1.TOTDEFAULTRECV, 
          T1.TOTDEFAULTFEERECV, 
          T1.NSF_AMOUNT, 
          T1.NSF_PAYMENT_AMOUNT, 
          T1.NSF_PREPAYMENT_AMOUNT, 
          T1.WOAMTSUM, 
          T1.WOCNT, 
          T1.WOBAMTSUM, 
          T1.WOBCNT, 
          T1.WORAMTSUM, 
          T1.WORCNT, 
          T1.CASHAGAIN_COUNT, 
          T1.BUYBACK_COUNT, 
          T1.DEPOSIT_COUNT, 
          T1.GROSS_REVENUE, 
          T1.GROSS_WRITE_OFF, 
          T1.NET_WRITE_OFF, 
          T1.NET_REVENUE, 
          T1.BEGIN_PWO_AMT, 
          T1.CURRENT_PWO_AMT, 
          T1.NEXT_MONTH_PWO_AMT, 
          T1.NEXT_2_MONTH_PWO_AMT, 
          T1.RCC_IN_PROCESS, 
          T1.RCC_INELIGIBLE, 
          T1.DEL_RECV_AMT, 
          T1.DEL_RECV_CNT, 
          T1.DEFAULT_PMT, 
          T1.DEFAULT_CNT, 
          T1.DEFAULT_AMT, 
          T1.ACTUAL_DURATION_COUNT, 
          T1.ACTUAL_DURATION_DAYS, 
          T1.ACTUAL_DURATION_ADVAMT, 
          T1.ACTUAL_DURATION_FEES, 
          T1.BLACK_BOOK_VALUE, 
          T1.PASTDUECNT_1, 
          T1.PASTDUEAMT_1, 
          T1.PASTDUEAMT_2, 
          T1.PASTDUECNT_2, 
          T1.PASTDUEAMT_3, 
          T1.PASTDUECNT_3, 
          T1.PASTDUEAMT_4, 
          T1.PASTDUECNT_4, 
          T1.PASTDUEAMT_5, 
          T1.PASTDUECNT_5, 
          T1.PASTDUEAMT_6, 
          T1.PASTDUECNT_6, 
          T1.REFINANCE_CNT, 
          T1.OVERSHORTAMT, 
          T1.HOLDOVERAMT, 
          T1.FIRST_PRESENTMENT_CNT, 
          T1.SATISFIED_PAYMENT_CNT, 
          T1.POSSESSION_AMT, 
          T1.POSSESSION_CNT, 
          T1.SOLD_AMOUNT, 
          T1.SOLD_COUNT, 
          T1.REPMTPLANCNT AS REPMTPLANCNT1, 
          T1.ADVCNT, 
          T1.AVGADVAMT, 
          T1.AVGDURATION, 
          T1.AVGFEEAMT, 
          T1.ADVAMTSUM, 
          T1.AVGDURATIONDAYS, 
          T1.AVGDURATIONCNT, 
          T1.HELDCNT, 
          T1.REPMTPLANCNT, 
          T1.AGNCNT
      FROM WORK.DAILY_SUMMARY_ALL_TMP3 T1
           LEFT JOIN WORK.HOLIDAYS T2 ON (T1.BUSINESSDT = T2.HOLIDAYDT);
%RUNQUIT(&job,&sub1);


PROC SQL;
   CREATE TABLE WORK.DAILY_SUMMARY_ALL_PRELOAD1_PRE AS 
   SELECT DISTINCT T1.PRODUCT, 
          (CASE WHEN T1.PRODUCT_DESC = 'TX CSO CASH ADVANCE' THEN 'TX CSO Cash Advance' ELSE T1.PRODUCT_DESC END) AS PRODUCT_DESC, 
          T1.POS, 
          T1.INSTANCE, 
          T1.BRANDCD, 
          T1.BANKMODEL, 
          T1.COUNTRYCD, 
          T1.STATE, 
          T1.CITY, 
          T1.ZIP, 
          T1.BUSINESS_UNIT, 
          T1.ZONENBR, 
          T1.ZONENAME, 
          T1.REGIONNBR, 
          T1.REGIONRDO, 
          T1.DIVISIONNBR, 
          T1.DIVISIONDDO, 
          T1.LOCNBR, 
          T1.LOCATION_NAME, 
          T1.LOC_OPEN_DT, 
          T1.LOC_CLOSE_DT, 
          T1.BUSINESSDT, 
          /* LAST_REPORT_DT */
            (CASE WHEN WEEKDAY(TODAY()) = 2 THEN TODAY()-2 ELSE TODAY()-1 END) FORMAT=MMDDYY10. AS LAST_REPORT_DT, 
          T2.LOC_LAST_REPORTED_DT, 
          T3.LATITUDE, 
          T3.LONGITUDE, 
          T1.HOLIDAYNAME, 
          T1.LASTTHURSDAY, 
          T1.THURSDAYWEEK, 
          /* NEW_ADV_AMT */
            (CASE 
               WHEN . = T1.NEW_ADV_AMT THEN 0
               ELSE T1.NEW_ADV_AMT
            END) AS NEW_ADV_AMT, 
          /* NEW_ORIGINATIONS */
            (CASE 
               WHEN . = T1.NEW_ORIGINATIONS THEN 0
               ELSE T1.NEW_ORIGINATIONS
            END) AS NEW_ORIGINATIONS, 
          /* NEW_ADVFEE_AMT */
            (CASE 
               WHEN . = T1.NEW_ADVFEE_AMT THEN 0
               ELSE T1.NEW_ADVFEE_AMT
            END) AS NEW_ADVFEE_AMT, 
          /* TOTADVRECV */
            (CASE 
               WHEN . = T1.TOTADVRECV THEN 0
               ELSE T1.TOTADVRECV
            END) FORMAT=22.2 AS TOTADVRECV, 
          /* TOTADVFEERECV */
            (CASE 
               WHEN . = T1.TOTADVFEERECV THEN 0
               ELSE T1.TOTADVFEERECV
            END) FORMAT=10.2 AS TOTADVFEERECV, 
          /* DEFAULT_LOANS_OUTSTANDING */
            (CASE 
               WHEN . = T1.DEFAULT_LOANS_OUTSTANDING THEN 0
               ELSE T1.DEFAULT_LOANS_OUTSTANDING
            END) AS DEFAULT_LOANS_OUTSTANDING, 
          /* COMPLIANT_LOANS_OUTSTANDING */
            (CASE 
               WHEN . = T1.COMPLIANT_LOANS_OUTSTANDING THEN 0
               ELSE T1.COMPLIANT_LOANS_OUTSTANDING
            END) AS COMPLIANT_LOANS_OUTSTANDING, 
          /* TOTDEFAULTRECV */
            (CASE 
               WHEN . = T1.TOTDEFAULTRECV THEN 0
               ELSE T1.TOTDEFAULTRECV
            END) FORMAT=22.2 AS TOTDEFAULTRECV, 
          /* TOTDEFAULTFEERECV */
            (CASE 
               WHEN . = T1.TOTDEFAULTFEERECV THEN 0
               ELSE T1.TOTDEFAULTFEERECV
            END) FORMAT=10.2 AS TOTDEFAULTFEERECV, 
          /* NSF_AMOUNT */
            (CASE 
               WHEN . = T1.NSF_AMOUNT THEN 0
               ELSE T1.NSF_AMOUNT
            END) FORMAT=10.2 AS NSF_AMOUNT, 
          /* NSF_PAYMENT_AMOUNT */
            (CASE 
               WHEN . = T1.NSF_PAYMENT_AMOUNT THEN 0
               ELSE T1.NSF_PAYMENT_AMOUNT
            END) FORMAT=10.2 AS NSF_PAYMENT_AMOUNT, 
          /* NSF_PREPAYMENT_AMOUNT */
            (CASE 
               WHEN . = T1.NSF_PREPAYMENT_AMOUNT THEN 0
               ELSE T1.NSF_PREPAYMENT_AMOUNT
            END) FORMAT=10.2 AS NSF_PREPAYMENT_AMOUNT, 
          /* WOAMTSUM */
            (CASE 
               WHEN . = T1.WOAMTSUM THEN 0
               ELSE T1.WOAMTSUM
            END) FORMAT=22.2 AS WOAMTSUM, 
          /* WOCNT */
            (CASE 
               WHEN . = T1.WOCNT THEN 0
               ELSE T1.WOCNT
            END) AS WOCNT, 
          /* WOBAMTSUM */
            (CASE 
               WHEN . = T1.WOBAMTSUM THEN 0
               ELSE T1.WOBAMTSUM
            END) FORMAT=10.2 AS WOBAMTSUM, 
          /* WOBCNT */
            (CASE 
               WHEN . = T1.WOBCNT THEN 0
               ELSE T1.WOBCNT
            END) AS WOBCNT, 
          /* WORAMTSUM */
            (CASE 
               WHEN . = T1.WORAMTSUM THEN 0
               ELSE T1.WORAMTSUM
            END) FORMAT=22.2 AS WORAMTSUM, 
          /* WORCNT */
            (CASE 
               WHEN . = T1.WORCNT THEN 0
               ELSE T1.WORCNT
            END) AS WORCNT, 
          /* CASHAGAIN_COUNT */
            (CASE 
               WHEN . = T1.CASHAGAIN_COUNT THEN 0
               ELSE T1.CASHAGAIN_COUNT
            END) AS CASHAGAIN_COUNT, 
          /* BUYBACK_COUNT */
            (CASE 
               WHEN . = T1.BUYBACK_COUNT THEN 0
               ELSE T1.BUYBACK_COUNT
            END) AS BUYBACK_COUNT, 
          /* DEPOSIT_COUNT */
            (CASE 
               WHEN . = T1.DEPOSIT_COUNT THEN 0
               ELSE T1.DEPOSIT_COUNT
            END) AS DEPOSIT_COUNT, 
          /* GROSS_REVENUE */
            (CASE 
               WHEN . = T1.GROSS_REVENUE THEN 0
               ELSE T1.GROSS_REVENUE
            END) FORMAT=22.2 AS GROSS_REVENUE, 
          /* GROSS_WRITE_OFF */
            (CASE 
               WHEN . = T1.GROSS_WRITE_OFF THEN 0
               ELSE T1.GROSS_WRITE_OFF
            END) FORMAT=22.2 AS GROSS_WRITE_OFF, 
          /* NET_WRITE_OFF */
            (CASE 
               WHEN . = T1.NET_WRITE_OFF THEN 0
               ELSE T1.NET_WRITE_OFF
            END) FORMAT=22.2 AS NET_WRITE_OFF, 
          /* NET_REVENUE */
            (CASE 
               WHEN . = T1.NET_REVENUE THEN 0
               ELSE T1.NET_REVENUE
            END) FORMAT=22.2 AS NET_REVENUE, 
          /* BEGIN_PWO_AMT */
            (CASE 
               WHEN . = T1.BEGIN_PWO_AMT THEN 0
               ELSE T1.BEGIN_PWO_AMT
            END) AS BEGIN_PWO_AMT, 
          /* CURRENT_PWO_AMT */
            (CASE 
               WHEN . = T1.CURRENT_PWO_AMT THEN 0
               ELSE T1.CURRENT_PWO_AMT
            END) AS CURRENT_PWO_AMT, 
          /* NEXT_MONTH_PWO_AMT */
            (CASE 
               WHEN . = T1.NEXT_MONTH_PWO_AMT THEN 0
               ELSE T1.NEXT_MONTH_PWO_AMT
            END) AS NEXT_MONTH_PWO_AMT, 
          /* NEXT_2_MONTH_PWO_AMT */
            (CASE 
               WHEN . = T1.NEXT_2_MONTH_PWO_AMT THEN 0
               ELSE T1.NEXT_2_MONTH_PWO_AMT
            END) AS NEXT_2_MONTH_PWO_AMT, 
          /* RCC_IN_PROCESS */
            (CASE 
               WHEN . = T1.RCC_IN_PROCESS THEN 0
               ELSE T1.RCC_IN_PROCESS
            END) AS RCC_IN_PROCESS, 
          /* RCC_INELIGIBLE */
            (CASE 
               WHEN . = T1.RCC_INELIGIBLE THEN 0
               ELSE T1.RCC_INELIGIBLE
            END) FORMAT=11. AS RCC_INELIGIBLE, 
          /* DEL_RECV_AMT */
            (CASE 
               WHEN . = T1.DEL_RECV_AMT THEN 0
               ELSE T1.DEL_RECV_AMT
            END) AS DEL_RECV_AMT, 
          /* DEL_RECV_CNT */
            (CASE 
               WHEN . = T1.DEL_RECV_CNT THEN 0
               ELSE T1.DEL_RECV_CNT
            END) AS DEL_RECV_CNT, 
          /* DEFAULT_PMT */
            (CASE 
               WHEN . = T1.DEFAULT_PMT THEN 0
               ELSE T1.DEFAULT_PMT
            END) FORMAT=10.2 AS DEFAULT_PMT, 
          /* DEFAULT_CNT */
            (CASE 
               WHEN . = T1.DEFAULT_CNT THEN 0
               ELSE T1.DEFAULT_CNT
            END) AS DEFAULT_CNT, 
          /* DEFAULT_AMT */
            (CASE 
               WHEN . = T1.DEFAULT_AMT THEN 0
               ELSE T1.DEFAULT_AMT
            END) FORMAT=10.2 AS DEFAULT_AMT, 
          /* ACTUAL_DURATION_COUNT */
            (CASE 
               WHEN . = T1.ACTUAL_DURATION_COUNT THEN 0
               ELSE T1.ACTUAL_DURATION_COUNT
            END) AS ACTUAL_DURATION_COUNT, 
          /* ACTUAL_DURATION_DAYS */
            (CASE 
               WHEN . = T1.ACTUAL_DURATION_DAYS THEN 0
               ELSE T1.ACTUAL_DURATION_DAYS
            END) AS ACTUAL_DURATION_DAYS, 
          /* ACTUAL_DURATION_ADVAMT */
            (CASE 
               WHEN . = T1.ACTUAL_DURATION_ADVAMT THEN 0
               ELSE T1.ACTUAL_DURATION_ADVAMT
            END) AS ACTUAL_DURATION_ADVAMT, 
          /* ACTUAL_DURATION_FEES */
            (CASE 
               WHEN . = T1.ACTUAL_DURATION_FEES THEN 0
               ELSE T1.ACTUAL_DURATION_FEES
            END) AS ACTUAL_DURATION_FEES, 
          /* AVGDURATIONDAYS */
            (CASE 
               WHEN . = T1.AVGDURATIONDAYS THEN 0
               ELSE T1.AVGDURATIONDAYS
            END) AS AVGDURATIONDAYS, 
          /* AVGDURATIONCNT */
            (CASE 
               WHEN . = T1.AVGDURATIONCNT THEN 0
               ELSE T1.AVGDURATIONCNT
            END) AS AVGDURATIONCNT, 
          /* BLACK_BOOK_VALUE */
            (CASE 
               WHEN . = T1.BLACK_BOOK_VALUE THEN 0
               ELSE T1.BLACK_BOOK_VALUE
            END) AS BLACK_BOOK_VALUE, 
          /* PASTDUECNT_1 */
            (CASE 
               WHEN . = T1.PASTDUECNT_1 THEN 0
               ELSE T1.PASTDUECNT_1
            END) AS PASTDUECNT_1, 
          /* PASTDUEAMT_1 */
            (CASE 
               WHEN . = T1.PASTDUEAMT_1 THEN 0
               ELSE T1.PASTDUEAMT_1
            END) FORMAT=12.2 AS PASTDUEAMT_1, 
          /* PASTDUEAMT_2 */
            (CASE 
               WHEN . = T1.PASTDUEAMT_2 THEN 0
               ELSE T1.PASTDUEAMT_2
            END) FORMAT=12.2 AS PASTDUEAMT_2, 
          /* PASTDUECNT_2 */
            (CASE 
               WHEN . = T1.PASTDUECNT_2 THEN 0
               ELSE T1.PASTDUECNT_2
            END) FORMAT=11. AS PASTDUECNT_2, 
          /* PASTDUEAMT_3 */
            (CASE 
               WHEN . = T1.PASTDUEAMT_3 THEN 0
               ELSE T1.PASTDUEAMT_3
            END) FORMAT=21.4 AS PASTDUEAMT_3, 
          /* PASTDUECNT_3 */
            (CASE 
               WHEN . = T1.PASTDUECNT_3 THEN 0
               ELSE T1.PASTDUECNT_3
            END) AS PASTDUECNT_3, 
          /* PASTDUEAMT_4 */
            (CASE 
               WHEN . = T1.PASTDUEAMT_4 THEN 0
               ELSE T1.PASTDUEAMT_4
            END) FORMAT=21.4 AS PASTDUEAMT_4, 
          /* PASTDUECNT_4 */
            (CASE 
               WHEN . = T1.PASTDUECNT_4 THEN 0
               ELSE T1.PASTDUECNT_4
            END) AS PASTDUECNT_4, 
          /* PASTDUEAMT_5 */
            (CASE 
               WHEN . = T1.PASTDUEAMT_5 THEN 0
               ELSE T1.PASTDUEAMT_5
            END) FORMAT=21.4 AS PASTDUEAMT_5, 
          /* PASTDUECNT_5 */
            (CASE 
               WHEN . = T1.PASTDUECNT_5 THEN 0
               ELSE T1.PASTDUECNT_5
            END) AS PASTDUECNT_5, 
          /* PASTDUEAMT_6 */
            (CASE 
               WHEN . = T1.PASTDUEAMT_6 THEN 0
               ELSE T1.PASTDUEAMT_6
            END) FORMAT=21.4 AS PASTDUEAMT_6, 
          /* PASTDUECNT_6 */
            (CASE 
               WHEN . = T1.PASTDUECNT_6 THEN 0
               ELSE T1.PASTDUECNT_6
            END) AS PASTDUECNT_6, 
          /* REFINANCE_CNT */
            (CASE 
               WHEN . = T1.REFINANCE_CNT THEN 0
               ELSE T1.REFINANCE_CNT
            END) AS REFINANCE_CNT, 
          /* OVERSHORTAMT */
            (CASE 
               WHEN . = T1.OVERSHORTAMT THEN 0
               ELSE T1.OVERSHORTAMT
            END) AS OVERSHORTAMT, 
          /* HOLDOVERAMT */
            (CASE 
               WHEN . = T1.HOLDOVERAMT THEN 0
               ELSE T1.HOLDOVERAMT
            END) AS HOLDOVERAMT, 
          /* FIRST_PRESENTMENT_CNT */
            (CASE 
               WHEN . = T1.FIRST_PRESENTMENT_CNT THEN 0
               ELSE T1.FIRST_PRESENTMENT_CNT
            END) AS FIRST_PRESENTMENT_CNT, 
          /* SATISFIED_PAYMENT_CNT */
            (CASE 
               WHEN . = T1.SATISFIED_PAYMENT_CNT THEN 0
               ELSE T1.SATISFIED_PAYMENT_CNT
            END) AS SATISFIED_PAYMENT_CNT, 
          /* POSSESSION_AMT */
            (CASE 
               WHEN . = T1.POSSESSION_AMT THEN 0
               ELSE T1.POSSESSION_AMT
            END) FORMAT=21.4 AS POSSESSION_AMT, 
          /* POSSESSION_CNT */
            (CASE 
               WHEN . = T1.POSSESSION_CNT THEN 0
               ELSE T1.POSSESSION_CNT
            END) AS POSSESSION_CNT, 
          /* SOLD_AMOUNT */
            (CASE 
               WHEN . = T1.SOLD_AMOUNT THEN 0
               ELSE T1.SOLD_AMOUNT
            END) FORMAT=21.4 AS SOLD_AMOUNT, 
          /* SOLD_COUNT */
            (CASE 
               WHEN . = T1.SOLD_COUNT THEN 0
               ELSE T1.SOLD_COUNT
            END) FORMAT=12.2 AS SOLD_COUNT, 
          /* ADVCNT */
            (CASE 
               WHEN . = T1.ADVCNT THEN 0
               ELSE T1.ADVCNT
            END) AS ADVCNT, 
          /* AVGADVAMT */
            (CASE 
               WHEN . = T1.AVGADVAMT THEN 0
               ELSE T1.AVGADVAMT
            END) FORMAT=10.2 AS AVGADVAMT, 
          /* AVGDURATION */
            (CASE 
               WHEN . = T1.AVGDURATION THEN 0
               ELSE T1.AVGDURATION
            END) FORMAT=10.2 AS AVGDURATION, 
          /* AVGFEEAMT */
            (CASE 
               WHEN . = T1.AVGFEEAMT THEN 0
               ELSE T1.AVGFEEAMT
            END) FORMAT=10.2 AS AVGFEEAMT, 
          /* ADVAMTSUM */
            (CASE 
               WHEN . = T1.ADVAMTSUM THEN 0
               ELSE T1.ADVAMTSUM
            END) FORMAT=14.2 AS ADVAMTSUM, 
          /* HELDCNT */
            (CASE 
               WHEN . = T1.HELDCNT THEN 0
               ELSE T1.HELDCNT
            END) AS HELDCNT, 
          /* REPMTPLANCNT */
            (CASE 
               WHEN . = T1.REPMTPLANCNT THEN 0
               ELSE T1.REPMTPLANCNT
            END) AS REPMTPLANCNT, 
          /* AGNCNT */
            (CASE 
               WHEN . = T1.AGNCNT THEN 0
               ELSE T1.AGNCNT
            END) AS AGNCNT
      FROM WORK.DAILY_SUMMARY_ALL_TMP4 T1
           INNER JOIN WORK.LAST_REPORT_DATE T2 ON (T1.LOCNBR = T2.LOCNBR)
           LEFT JOIN SKYNET.LOCATION_LATLONG T3 ON (T1.LOCNBR = T3.LOCNBR)
           LEFT JOIN SKYNET.PS2_LENDING_REVEXP T5 ON (T1.PRODUCT = T5.PRODUCT) AND (T1.POS = T5.POS) AND (T1.INSTANCE = 
          T5.INSTANCE) AND (T1.LOCNBR = T5.LOCNBR) AND (T1.BUSINESSDT = T5.BUSINESSDT)
      WHERE T1.BUSINESSDT BETWEEN INTNX('MONTH',TODAY(),-24,'B') AND TODAY()-1
      ORDER BY T1.LOCNBR,
               T1.BUSINESSDT,
               T1.PRODUCT,
               T1.INSTANCE,
               T1.PRODUCT_DESC;
%RUNQUIT(&job,&sub1);

DATA DAILY_SUMMARY_ALL_EADV;
	SET WORK.DAILY_SUMMARY_ALL_PRELOAD1_PRE;
		IF PRODUCT_DESC ^= "AL ETL" AND SUM(NEW_ADV_AMT,
		   NEW_ORIGINATIONS,
		   NEW_ADVFEE_AMT,
		   TOTADVRECV,
		   TOTADVFEERECV,
		   COMPLIANT_LOANS_OUTSTANDING,
		   DEFAULT_LOANS_OUTSTANDING,
		   TOTDEFAULTRECV,
		   TOTDEFAULTFEERECV,
		   NSF_AMOUNT,
		   NSF_PAYMENT_AMOUNT,
		   NSF_PREPAYMENT_AMOUNT,
		   WOAMTSUM,
		   WOBAMTSUM,
		   WORAMTSUM,
		   CASHAGAIN_COUNT,
		   BUYBACK_COUNT,
		   DEPOSIT_COUNT,
		   GROSS_REVENUE,
		   GROSS_WRITE_OFF,
		   NET_WRITE_OFF,
		   NET_REVENUE,
		   BEGIN_PWO_AMT,
		   CURRENT_PWO_AMT,
		   NEXT_MONTH_PWO_AMT,
		   NEXT_2_MONTH_PWO_AMT,
		   RCC_IN_PROCESS,
		   RCC_INELIGIBLE,
		   DEFAULT_PMT,
		   DEFAULT_CNT,
		   DEFAULT_AMT,
		   ACTUAL_DURATION_COUNT,
		   ACTUAL_DURATION_DAYS,
		   ACTUAL_DURATION_ADVAMT,
		   ACTUAL_DURATION_FEES,
		   BLACK_BOOK_VALUE,
		   PASTDUECNT_1,
	   	   PASTDUEAMT_1,
		   PASTDUEAMT_2,
		   PASTDUECNT_2,
		   PASTDUEAMT_3,
		   PASTDUECNT_3,
		   PASTDUEAMT_4,
		   PASTDUECNT_4,
		   PASTDUEAMT_5,
		   PASTDUECNT_5,
		   PASTDUEAMT_6,
		   PASTDUECNT_6,
		   SOLD_AMOUNT,
		   SOLD_COUNT,		
		   ADVCNT,
		   AVGADVAMT,
		   AVGDURATION,
		   AVGFEEAMT,
		   ADVAMTSUM,
		   ADVAMTSUM,
		   HELDCNT,
		   AGNCNT
		   ) = 0 THEN DELETE;
%RUNQUIT(&job,&sub1);


PROC SQL;
CONNECT TO ORACLE (USER=&USER. PW=&PASSWORD. PATH='BIOR');
	EXECUTE(UPDATE BIOR.DATAMART_STATUS
			SET EADV_STATUS = 'WAITING_CL'
			WHERE SOURCE = 'BIOR.O_DAILY_SUMMARY_ALL'
			)
	 BY ORACLE;
	 DISCONNECT FROM ORACLE;
%RUNQUIT(&job,&sub1);

/*WAITFOR CUST LIFECYCLE TO BE READY FOR THE DAY*/
%MACRO WAITFORCUSTLIFE();


	%DO %UNTIL (%EVAL(&COUNT_R. >= 1));	
		PROC SQL;
			CREATE TABLE CUST_LIFE_CHECK_TODAY AS
			SELECT INSTANCE
				  ,MAX(BUSINESS_DATE)	AS BUSINESSDT
			FROM BIOR.CUST_CATEGORY_DAILY_COUNT
			WHERE INSTANCE = 'EAPROD1'
			GROUP BY INSTANCE
		;
		QUIT;

		DATA _NULL_;
			FORMAT WEEKDAY $20.;
			DAYOFWEEK = WEEKDAY(DATE());
			IF DAYOFWEEK = 1 THEN WEEKDAY = 'SUNDAY';
			ELSE IF DAYOFWEEK = 2 THEN WEEKDAY = 'MONDAY';
			ELSE IF DAYOFWEEK = 3 THEN WEEKDAY = 'TUESDAY';
			ELSE IF DAYOFWEEK = 4 THEN WEEKDAY = 'WEDNESDAY';
			ELSE IF DAYOFWEEK = 5 THEN WEEKDAY = 'THURSDAY';
			ELSE IF DAYOFWEEK = 6 THEN WEEKDAY = 'FRIDAY';
			ELSE IF DAYOFWEEK = 7 THEN WEEKDAY = 'SATURDAY';
			CALL SYMPUTX("DAYOFWEEK",WEEKDAY,'G');
		RUN;

		%IF &DAYOFWEEK. = SUNDAY
			OR &DAYOFWEEK. = TUESDAY
			OR &DAYOFWEEK. = WEDNESDAY
			OR &DAYOFWEEK. = THURSDAY
			OR &DAYOFWEEK. = FRIDAY
			OR &DAYOFWEEK. = SATURDAY %THEN 
				%DO;

					/*EADV*/
					PROC SQL;
						SELECT COUNT(*) INTO: COUNT_R
						FROM CUST_LIFE_CHECK_TODAY
						WHERE INSTANCE = 'EAPROD1' AND BUSINESSDT >= DHMS(TODAY()-1,00,00,00)
					;
					QUIT;

				%END;
		%ELSE %IF &DAYOFWEEK. = MONDAY %THEN
				%DO;

					/*EADV*/
					PROC SQL;
						SELECT COUNT(*) INTO: COUNT_R
						FROM CUST_LIFE_CHECK_TODAY
						WHERE INSTANCE = 'EAPROD1' AND BUSINESSDT >= DHMS(TODAY()-2,00,00,00)
					;
					QUIT;
				%END;
					
		%PUT THE COUNT IS EQUAL TO : &COUNT_R;

		%IF %EVAL(&COUNT_R. < 1) %THEN 
			%DO;
				/*SLEEPS FOR 300 SECONDS (5 MINUTES) UNTIL IT FINDS 16 FINISHED TABLES, IT WILL LOOP FOREVER UNTIL THE 16 FINISHED TABLES*/
				DATA SLEEP;
					CALL SLEEP(300,1);
				RUN;
			%END;
	%END;

%MEND;

%WAITFORCUSTLIFE

PROC SQL;
CONNECT TO ORACLE (USER=&USER. PW=&PASSWORD. PATH='BIOR');
	EXECUTE(UPDATE BIOR.DATAMART_STATUS
			SET EADV_STATUS = 'RUNNING'
			WHERE SOURCE = 'BIOR.O_DAILY_SUMMARY_ALL'
			)
	 BY ORACLE;
	 DISCONNECT FROM ORACLE;
%RUNQUIT(&job,&sub1);


PROC SQL;
   CREATE TABLE WORK.PROD_DESC_CHANGE AS 
   SELECT /* BUSINESS_DATE */
            (DATEPART(t1.BUSINESS_DATE)) FORMAT=MMDDYY10. AS BUSINESS_DATE, 
          t1.LOCATION_NBR, 
          t1.INSTANCE, 
          t1.PRODUCT, 
          /* PRODUCT_DESC */
            (CASE WHEN (INSTANCE = 'EAPROD1' AND T1.BUSINESS_DATE >= T2.DEALDATE  AND T2.DEALDATE ^= .) 
												    THEN "TX CSO Cash Advance" 
				  WHEN PRODUCTDESC = 'TX CSO' 		THEN 'EADV PAYDAY'
                  WHEN PRODUCTDESC = 'TEXAS TITLE' THEN 'TX TITLE' ELSE PRODUCTDESC END) AS PRODUCT_DESC, 
          /* NEW_CUST_CNT */
            (SUM(t1.NEW_CUST_CNT)) AS NEW_CUST_CNT, 
          /* REDEEM_CUST_CNT */
            (SUM(t1.REDEEM_CUST_CNT)) AS REDEEM_CUST_CNT, 
          /* NEW_REPEAT_CUST_CNT */
            (SUM(t1.NEW_REPEAT_CUST_CNT)) AS NEW_REPEAT_CUST_CNT, 
          /* REACTIVE_CUST_CNT */
            (SUM(t1.REACTIVE_CUST_CNT)) AS REACTIVE_CUST_CNT, 
          /* ACTIVE_CUST_CNT */
            (SUM(t1.ACTIVE_CUST_CNT)) AS ACTIVE_CUST_CNT, 
          /* INACTIVE_CUST_CNT */
            (SUM(t1.INACTIVE_CUST_CNT)) AS INACTIVE_CUST_CNT
      FROM BIOR.CUST_CATEGORY_DAILY_COUNT T1
	  LEFT JOIN SKYNET.TX_UC_DATEBYLOC AS T2
			ON (T1.LOCATION_NBR = T2.LOCNBR)
	  WHERE T1.INSTANCE = 'EAPROD1' AND T1.BUSINESS_DATE >= DHMS(TODAY()-5,00,00,00)
      GROUP BY (CALCULATED BUSINESS_DATE),
               t1.LOCATION_NBR,
               t1.INSTANCE,
               t1.PRODUCT,
               (CALCULATED PRODUCT_DESC)
;
%RUNQUIT(&job,&sub1);

PROC SQL;
   CREATE TABLE DAILY_SUMMARY_ALL_EADV_1 AS 
   SELECT t1.Product, 
          t1.PRODUCT_DESC, 
          t1.pos, 
          t1.INSTANCE, 
          t1.brandcd, 
          t1.bankmodel, 
          t1.COUNTRYCD, 
          t1.STATE, 
          t1.CITY, 
          t1.ZIP, 
          t1.BUSINESS_UNIT, 
          t1.ZONENBR, 
          t1.ZONENAME, 
          t1.REGIONNBR, 
          t1.REGIONRDO, 
          t1.DIVISIONNBR, 
          t1.DIVISIONDDO, 
          t1.LOCNBR, 
          t1.Location_Name, 
          t1.LOC_OPEN_DT, 
          t1.LOC_CLOSE_DT, 
          /* BUSINESSDT */
            (DHMS(t1.BusinessDt,00,00,00)) FORMAT=DATETIME20. AS BUSINESSDT, 
          /* LAST_REPORT_DT */
            (DHMS(DATE()-1,00,00,00)) FORMAT=DATETIME20. AS LAST_REPORT_DT, 
          /* LOC_LAST_REPORTED_DT */
            (DHMS(t1.loc_last_reported_dt,00,00,00)) FORMAT=DATETIME20. AS LOC_LAST_REPORTED_DT, 
          t1.Latitude, 
          t1.Longitude, 
          t1.HOLIDAYNAME, 
          t1.lastthursday, 
          t1.ThursdayWeek, 
          t1.NEW_ADV_AMT, 
          t1.NEW_ORIGINATIONS, 
          t1.NEW_ADVFEE_AMT, 
          t1.TOTADVRECV, 
          t1.TOTADVFEERECV, 
          t1.DEFAULT_LOANS_OUTSTANDING, 
          t1.COMPLIANT_LOANS_OUTSTANDING, 
          t1.TOTDEFAULTRECV, 
          t1.TOTDEFAULTFEERECV, 
          t1.NSF_AMOUNT, 
          t1.NSF_PAYMENT_AMOUNT, 
          t1.NSF_PREPAYMENT_AMOUNT, 
          t1.WOAMTSUM, 
          t1.WOCNT, 
          t1.WOBAMTSUM, 
          t1.WOBCNT, 
          t1.WORAMTSUM, 
          t1.WORCNT, 
          t1.CASHAGAIN_COUNT, 
          t1.BUYBACK_COUNT, 
          t1.DEPOSIT_COUNT, 
          t1.GROSS_REVENUE, 
          t1.GROSS_WRITE_OFF, 
          t1.NET_WRITE_OFF, 
          t1.NET_REVENUE, 
          t1.BEGIN_PWO_AMT, 
          t1.CURRENT_PWO_AMT, 
          t1.NEXT_MONTH_PWO_AMT, 
          t1.NEXT_2_MONTH_PWO_AMT, 
          t1.RCC_IN_PROCESS, 
          t1.RCC_INELIGIBLE, 
          t1.DEL_RECV_AMT, 
          t1.DEL_RECV_CNT, 
          t1.DEFAULT_PMT, 
          t1.DEFAULT_CNT, 
          t1.DEFAULT_AMT, 
          /* NEWCUSTCNTCOMPANY */
            (CASE WHEN SUM(t2.NEW_CUST_CNT,t2.NEW_REPEAT_CUST_CNT) = . THEN 0 ELSE 
            SUM(t2.NEW_CUST_CNT,t2.NEW_REPEAT_CUST_CNT) END) AS NEWCUSTCNTCOMPANY, 
          /* REDEEM_CUSTOMER_CNT */
            (CASE 
               WHEN . = t2.REDEEM_CUST_CNT THEN 0
               ELSE t2.REDEEM_CUST_CNT
            END) AS REDEEM_CUSTOMER_CNT, 
          /* REACTIVE_CUSTOMER_CNT */
            (CASE 
               WHEN . = t2.REACTIVE_CUST_CNT THEN 0
               ELSE t2.REACTIVE_CUST_CNT
            END) AS REACTIVE_CUSTOMER_CNT, 
          /* ACTIVE_CUST_CNT */
            (CASE 
               WHEN . = t2.ACTIVE_CUST_CNT THEN 0
               ELSE t2.ACTIVE_CUST_CNT
            END) AS ACTIVE_CUST_CNT, 
          /* INACTIVE_CUST_CNT */
            (CASE 
               WHEN . = t2.INACTIVE_CUST_CNT THEN 0
               ELSE t2.INACTIVE_CUST_CNT
            END) AS INACTIVE_CUST_CNT, 
          t1.ACTUAL_DURATION_COUNT, 
          t1.ACTUAL_DURATION_DAYS, 
          t1.ACTUAL_DURATION_ADVAMT, 
          t1.ACTUAL_DURATION_FEES, 
          t1.AVGDURATIONDAYS, 
          t1.AVGDURATIONCNT, 
          t1.BLACK_BOOK_VALUE, 
          t1.PASTDUECNT_1, 
          t1.PASTDUEAMT_1, 
          t1.PASTDUEAMT_2, 
          t1.PASTDUECNT_2, 
          t1.PASTDUEAMT_3, 
          t1.PASTDUECNT_3, 
          t1.PASTDUEAMT_4, 
          t1.PASTDUECNT_4, 
          t1.PASTDUEAMT_5, 
          t1.PASTDUECNT_5, 
          t1.PASTDUEAMT_6, 
          t1.PASTDUECNT_6, 
          t1.REFINANCE_CNT, 
          t1.OVERSHORTAMT, 
          t1.HOLDOVERAMT, 
          t1.FIRST_PRESENTMENT_CNT, 
          t1.SATISFIED_PAYMENT_CNT, 
          t1.POSSESSION_AMT, 
          t1.POSSESSION_CNT, 
          t1.SOLD_AMOUNT, 
          t1.SOLD_COUNT, 
          t1.ADVCNT, 
          t1.REPMTPLANCNT, 
          t1.AVGADVAMT, 
          t1.AVGDURATION, 
          t1.AVGFEEAMT, 
          t1.ADVAMTSUM, 
          t1.HELDCNT, 
          t1.AGNCNT,
		  "STOREFRONT"				AS CHANNELCD
      FROM DAILY_SUMMARY_ALL_EADV t1
           LEFT JOIN WORK.PROD_DESC_CHANGE t2 ON (t1.INSTANCE = t2.INSTANCE) AND (t1.PRODUCT_DESC = t2.PRODUCT_DESC) 
          AND (T1.PRODUCT = t2.PRODUCT) AND (T1.BUSINESSDT = T2.BUSINESS_DATE) AND (t1.LOCNBR = t2.LOCATION_NBR);
%RUNQUIT(&job,&sub1);

PROC FORMAT;
    PICTURE CHECKTHEDAY OTHER=%0Y.%0M.%0D (DATATYPE=DATE);
    PICTURE CHECKTHETIME OTHER=%0H.%0M.%0S (DATATYPE=TIME);
%RUNQUIT(&job,&sub1);

%LET DATE=%SYSFUNC(INTNX(DAY,%SYSFUNC(TODAY()),0,END),DATE7.);
%PUT &DATE;


/* CREATE MACROS FOR BULKLOAD PATH AND TIMESTAMP */
DATA _NULL_;
	CALL SYMPUTX('TIMESTAMP',TRANWRD(PUT(DATETIME(),DATETIME20.),':','.'),'G');
    CALL SYMPUTX('PATH',"E:\SHARED\CADA\SAS DATA\DATAMART\SKYNET REDESIGN BULKLOAD LOGS\DAILY\EADV",'G');
    CALL SYMPUTX('PATHTWO',"E:\SHARED\CADA\SAS DATA\DATAMART\SKYNET REDESIGN BULKLOAD LOGS\DAILY\EADV\DIR2\",'G');
%RUNQUIT(&job,&sub1);

PROC SQL;
    INSERT INTO SKY.DAILYSUM_DATAMART_EADV (BULKLOAD=YES BL_LOG="&PATH.\BL_&DATE..LOG" BL_DELETE_DATAFILE=YES 
                                                   BL_DEFAULT_DIR="&PATHTWO.")
    SELECT 
        *
    FROM DAILY_SUMMARY_ALL_EADV_1
	WHERE BUSINESSDT >= DHMS(TODAY()-5,00,00,00)
	AND STATE NOT IN ('TN');
%RUNQUIT(&job,&sub1);


/* CREATE TIMESTAMP */
PROC FORMAT;
	PICTURE WHATDAYISIT OTHER=%0Y.%0M.%0D (DATATYPE=DATE);
	PICTURE WHATTIMEISIT OTHER=%0H.%0M.%0S (DATATYPE=TIME);
%RUNQUIT(&job,&sub1);

DATA _NULL_;
	CALL SYMPUTX('TIMESTAMP',TRANWRD(PUT(DATETIME(),DATETIME20.),':','.'),'G');
RUN;

%PUT &TIMESTAMP;

/*KICK OFF EADV TRANSPOSE*/
SYSTASK COMMAND "'C:\PROGRAM FILES\SASHOME\SASFOUNDATION\9.4\SAS.EXE'
				 '&DAILY_FILE_PATH.\TRANSPOSE EADV.SAS'
				 -LOG '&DAILY_LOGPATH.\TRANSPOSE_EADV_&TIMESTAMP..LOG'
				 -CONFIG 'C:\PROGRAM FILES\SASHOME\SASFOUNDATION\9.4\SASV9.CFG'"
TASKNAME=TRANSPOSE_EADV
STATUS=TRANSPOSE_EADV;

/*UPLOAD EADV*/
%INCLUDE "&DAILY_FILE_PATH.\DAILYSUM_UPLOAD_EADV.SAS";


PROC SQL;
	CONNECT TO ORACLE(USER=&USER. PASSWORD=&PASSWORD. PATH='BIOR');
	EXECUTE(UPDATE BIOR.O_DAILY_SUMMARY_ALL
		    SET LAST_REPORT_DT = TO_DATE(TO_CHAR(CURRENT_DATE-1, 'MM/DD/YYYY'), 'MM/DD/YYYY')
			WHERE INSTANCE = 'EAPROD1'
			)
	BY ORACLE;
	DISCONNECT FROM ORACLE;
QUIT;

WAITFOR _ALL_ TRANSPOSE_EADV;

/*ABORT PROGRAM*/
%MACRO STOPPROGRAM();

	%IF %EVAL(1=1) %THEN %DO;
		%abort cancel;
	%END;

%MEND;

%STOPPROGRAM


