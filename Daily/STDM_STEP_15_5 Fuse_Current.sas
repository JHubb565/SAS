%INCLUDE "\\CSSSASAPP\CADA\SAS SOURCE CODE\PRODUCTION\SERVICE ACCOUNTS\SVC_SASUSER.SAS";
%INCLUDE "E:\SHARED\CADA\SAS SOURCE CODE\PRODUCTION\STDM\STDM_LIBRARY_SCRIPT.SAS";
%INCLUDE "E:\SHARED\CADA\SAS SOURCE CODE\DEVELOPMENT\JHUBBARD\TOP SECRET PROGRAM.SAS";
%INCLUDE "E:\SHARED\CADA\SAS SOURCE CODE\DEVELOPMENT\JHUBBARD\SKYNET REDESIGN\DATAMART REDESIGN\DAILY\DAILY_ERROR_INPUTS.SAS";

LIBNAME OMNIREP2 POSTGRES SERVER=cltedbprod1 PORT=5444 USER=&EDBUSER. PASSWORD=&EDBPASSWORD. DB='coredb' SCHEMA='sc_warehouse_data' DEFER=YES;
LIBNAME EDW ORACLE USER=&USER. PASSWORD=&PASSWORD. PATH=EDWPRD SCHEMA=EDW DEFER=YES;
LIBNAME TMP_TBLS ORACLE USER = &user. PASSWORD = &password. PATH = BIOR SCHEMA = TEMPTABLES DEFER=YES;
LIBNAME BIOR ORACLE USER = &user. PW = &password. PATH = BIOR SCHEMA = BIOR DEFER=YES;
LIBNAME OMNISILO postgres server=cltedbprod1 port=5444 user=&EDBUSER. password=&EDBPASSWORD. db='coredb' schema='sc_silo_qfund_x' DEFER=YES;
LIBNAME OMNIDB postgres server=cltedbprod1 port=5444 user=&EDBUSER. password=&EDBPASSWORD. db='coredb' schema='sc_core' DEFER=YES;

DATA _NULL_;
	CALL SYMPUTX('DAILY_LOGPATH',"E:\SHARED\CADA\LOGS\SKYNET V2",'G');
	CALL SYMPUTX('DAILY_FILE_PATH',"E:\SHARED\CADA\SAS SOURCE CODE\PRODUCTION\SKYNET V2\SKYNET REDESIGN\DATAMART REDESIGN\DAILY",'G');
	CALL SYMPUTX('WEEKDAY_TODAY',WEEKDAY(DATE()),'G');
%RUNQUIT(&job,&sub15);

PROC SQL;
	CREATE TABLE WORK.DM_DAILY_SUMMARY_TMPX1 AS 
		SELECT 
				T1.BUSINESS_DATE AS BUSINESSDT, 
				T1.LOC_NBR AS LOCNBR,
				T1.DESCRIPTION, 
				(TRANWRD(TRANWRD(COMPRESS(TRANWRD(TRANWRD(TRIM(TRANWRD(T1.DESCRIPTION,'Delinquent Loan-Potential Revenue','Delinquent Loan-Pot Revenue')), ' ', '_'),'(+/-)','CHANGE'),'/'),'__','_'),'-','_')) LABEL='METRIC' AS METRIC,
				SUM(T1.TODAY_COUNT) AS TODAY_COUNT, 
				SUM(T1.TODAY_AMOUNT) AS TODAY_AMOUNT, 
				CASE
						WHEN T1.PRODUCT_CODE = 'PDL' THEN 'PAYDAY'
						WHEN T1.PRODUCT_CODE = 'TLP' THEN 'TITLE'
						WHEN T1.PRODUCT_CODE = 'ILP' THEN 'INSTALLMENT'
						WHEN T1.PRODUCT_CODE = 'LOC' THEN 'LINEOFCREDIT'
						ELSE T1.PRODUCT_CODE
				END AS PRODUCT, 
				' ' AS PRODUCT_DESC, 
				'QFUND' AS POS, 
				'FUSE' AS INSTANCE
		FROM OMNIREP2.DAILY_CENTER_SUMMARY T1
		WHERE T1.SOURCE_SYSTEM_CD = 'QFUND_X' AND T1.BUSINESS_DATE >= DHMS(TODAY()-7,0,0,0)
				GROUP BY
						 T1.BUSINESS_DATE,
						 T1.LOC_NBR,
						 T1.DESCRIPTION,
						 (CALCULATED METRIC),
						 T1.PRODUCT_CODE,
						 (CALCULATED PRODUCT_DESC),
						 (CALCULATED POS),
						 (CALCULATED INSTANCE);
%RUNQUIT(&job,&sub15);

PROC SORT DATA=WORK.DM_DAILY_SUMMARY_TMPX1 OUT=WORK.DM_DAILY_SUMMARY_TMPX2_PRE;
		BY LOCNBR BUSINESSDT PRODUCT PRODUCT_DESC POS INSTANCE;
%RUNQUIT(&job,&sub15);

PROC TRANSPOSE DATA=WORK.DM_DAILY_SUMMARY_TMPX2_PRE OUT=TRANSPOSED;
		BY LOCNBR BUSINESSDT PRODUCT PRODUCT_DESC POS INSTANCE;
		ID METRIC;
		IDLABEL	METRIC;
%RUNQUIT(&job,&sub15);

data DAILYCNTS (KEEP=COMPCNT COMPCHANGECNT FIRSTTIMELOANSCNT NEWLOANSCNT TOTDRAWSCNT REFINANCECNT EXTENSIONSCNT DELCNT DELCHANGECNT DEFCNT DEFCHANGECNT WOCOCNT 
					 NEWDEFCNT WOCOPAYCNT WOCOCHANGECNT REPAYMENTPLANSCNT TOTLINECNT CURRENTCNT DELPAYCNT PENDINGCLOSEDCNT DEFPAYCNT WAIVEDFEESCNT COUPONSCNT REBATESCNT 
					 SATISFIEDPAYMENTSCNT AVGDURATIONCNT FIRSTPRESENTMENTCNT SECONDPRESENTMENTCNT THIRDPRESENTMENTCNT VOLSURRABANDONSCNT REPOSSESSIONCNT LOCNBR BUSINESSDT PRODUCT PRODUCT_DESC POS INSTANCE)

	 DAILYAMTS (KEEP=COMPAMT COMPCHANGEAMT COMPLOANRECVAMT COMPLOANPOTREVENUEAMT FIRSTTIMELOANSAMT NEWLOANSAMT TOTDRAWSAMT EXTENSIONSAMT AVERAGELOANAMT AVERAGEDRAWAMT DELAMT
					 DELCHANGEAMT DELLOANRECVAMT DELLOANPOTREVENUEAMT DEFAMT DEFCHANGEAMT DEFLOANRECVAMT DEFLOANPOTREVENUEAMT NEWDEFAMT WOCOAMT WOCOCHANGEAMT WOCOLOANRECVAMT
					 WOCOLOANPOTREVENUEAMT TOTAVAILABLECREDITAMT CURRENTAMT DELPAYAMT PENDINGCLOSEDAMT DEFPAYAMT WOCOPAYAMT GROSSREVENUEAMT NETREVENUEAMT WAIVEDFEESAMT COUPONSAMT REBATESAMT 
					 FIRSTPRESENTMENTAMT SECONDPRESENTMENTAMT THIRDPRESENTMENTAMT VOLSURRABANDONSAMT REPOSSESSIONAMT WOCOEXPAMT LOCNBR BUSINESSDT PRODUCT PRODUCT_DESC POS INSTANCE)
;
	 SET TRANSPOSED;
	 LOCNBR = LOCNBR;
	 BUSINESSDT = DATEPART(BUSINESSDT);
	 FORMAT BUSINESSDT MMDDYY10.;

	 IF _NAME_ = 'TODAY_COUNT' THEN
		 DO;
			COMPCNT = coalesce(Compliant,0);
 			COMPCHANGECNT = coalesce(Compliant_CHANGE,0);
			FIRSTTIMELOANSCNT = coalesce(First_Time_Loans,0);
			NEWLOANSCNT = coalesce(New_Loans,0);
			TOTDRAWSCNT = coalesce(Total_Draws,0);
			REFINANCECNT = coalesce(Refinance,0);
			EXTENSIONSCNT = coalesce(Extensions,0);
			DELCNT = coalesce(Delinquent,0);
			DELCHANGECNT = coalesce(Delinquent_CHANGE,0);
			DEFCNT = coalesce(Default,0);
			DEFCHANGECNT = coalesce(Default_CHANGE,0);
			NEWDEFCNT = coalesce(New_Defaults,0);
			WOCOCNT = coalesce(WOCO,0);
			WOCOCHANGECNT = coalesce(WOCO_CHANGE,0);
			REPAYMENTPLANSCNT = coalesce(Repayment_Plans,0);
			TOTLINECNT = coalesce(TotalLineCnt,0);
			CURRENTCNT = coalesce(Payments_Current,0);
			DELPAYCNT = coalesce(Payments_Delinquent,0);
			PENDINGCLOSEDCNT = coalesce(Payments_Pending_Closed,0);
			DEFPAYCNT = coalesce(Payments_Default,0);
			WOCOPAYCNT = coalesce(Payments_WOCO,0);
			WAIVEDFEESCNT = coalesce(Payments_Waived_Fees,0);
			COUPONSCNT = coalesce(Payments_Coupons,0);
			REBATESCNT = coalesce(Payments_Rebates,0);
			SATISFIEDPAYMENTSCNT = coalesce(Satisfied_Payments,0);
			AVGDURATIONCNT = coalesce(Average_Duration);
			FIRSTPRESENTMENTCNT = coalesce(First_Presentment,0);
			SECONDPRESENTMENTCNT = coalesce(Second_Presentment,0);
			THIRDPRESENTMENTCNT = coalesce(Third_Presentment,0);
			VOLSURRABANDONSCNT = coalesce(Voluntary_Surrenders_Abandons,0);
			REPOSSESSIONCNT = coalesce(Repossession,0);
		 OUTPUT DAILYCNTS;
	 END;

	 IF _NAME_ = 'TODAY_AMOUNT' THEN
		 DO;
			COMPAMT = coalesce(Compliant,0);
			COMPCHANGEAMT = coalesce(Compliant_CHANGE,0);
			COMPLOANRECVAMT = coalesce(Compliant_Loan_Loan_Receivables,0);
			COMPLOANPOTREVENUEAMT = coalesce(Compliant_Loan_Potential_Revenue,0);
			FIRSTTIMELOANSAMT = coalesce(First_Time_Loans,0);
			NEWLOANSAMT = coalesce(New_Loans,0);
			TOTDRAWSAMT = coalesce(Total_Draws,0);
			EXTENSIONSAMT = coalesce(Extensions,0);
			AVERAGELOANAMT = coalesce(Average_Loan_Amount,0);
			AVERAGEDRAWAMT = coalesce(Average_Draw,0);
			DELAMT = coalesce(Delinquent,0);
			DELCHANGEAMT = coalesce(Delinquent_CHANGE,0);
			DELLOANRECVAMT = coalesce(Delinquent_Loan_Loan_Receivables,0);
			DELLOANPOTREVENUEAMT = coalesce(Delinquent_Loan_Pot_Revenue,0);
			DEFAMT = coalesce(Default,0);
			DEFCHANGEAMT = coalesce(Default_CHANGE,0);
			DEFLOANRECVAMT = coalesce(Default_Loan_Loan_Receivables,0);
			DEFLOANPOTREVENUEAMT = coalesce(Default_Loan_Potential_Revenue,0);
			NEWDEFAMT = coalesce(New_Defaults,0);
			WOCOAMT = coalesce(WOCO,0);
			WOCOCHANGEAMT = coalesce(WOCO_CHANGE,0);
			WOCOLOANRECVAMT = coalesce(WOCO_Loan_Loan_Receivables,0);
			WOCOLOANPOTREVENUEAMT = coalesce(WOCO_Loan_Potential_Revenue,0);
			TOTAVAILABLECREDITAMT = coalesce(Total_Available_Credit,0);
			CURRENTAMT = coalesce(Payments_Current,0);
			DELPAYAMT = coalesce(Payments_Delinquent,0);
			PENDINGCLOSEDAMT = coalesce(Payments_Pending_Closed,0);
			DEFPAYAMT = coalesce(Payments_Default,0);
			WOCOPAYAMT = coalesce(Payments_WOCO,0);
			GROSSREVENUEAMT = coalesce(Gross_Revenue,0);
			NETREVENUEAMT = coalesce(Net_Revenue,0);
			WAIVEDFEESAMT = coalesce(Payments_Waived_Fees,0);
			COUPONSAMT = coalesce(Payments_Coupons,0);
			REBATESAMT = coalesce(Payments_Rebates,0);
			FIRSTPRESENTMENTAMT = coalesce(First_Presentment,0);
			SECONDPRESENTMENTAMT = coalesce(Second_Presentment,0);
			THIRDPRESENTMENTAMT = coalesce(Third_Presentment,0);
			VOLSURRABANDONSAMT = coalesce(Voluntary_Surrenders_Abandons,0);
			REPOSSESSIONAMT = coalesce(Repossession,0);
			WOCOEXPAMT = coalesce(WOCO_Expense,0);
		 OUTPUT DAILYAMTS;
	 END;
%RUNQUIT(&job,&sub15);


PROC SORT DATA=DAILYCNTS;
		BY LOCNBR BUSINESSDT;
RUN;

PROC SORT DATA=DAILYAMTS;
		BY LOCNBR BUSINESSDT;
RUN;

DATA COMBINED_METRICS_PRE;
		MERGE DAILYCNTS (IN=A)
			  DAILYAMTS (IN=B);
		BY LOCNBR BUSINESSDT;
		IF A OR B;
RUN;

PROC SORT DATA=COMBINED_METRICS_PRE;
		BY LOCNBR BUSINESSDT PRODUCT PRODUCT_DESC POS INSTANCE;
RUN;

data thursdaydates_tmp1;
	do i = "1JAN2000"d to "1JAN2999"d;
		businessdt = i;
		dayname = compress(put(businessdt,downame.));
		output;
	end;
	format businessdt mmddyy10.;
RUN;

proc sql;
	create table thursdaydates_tmp2 as
		select t1.*, t2.holidayname
		  from thursdaydates_tmp1 t1
			LEFT JOIN bior.i_holidays t2 on (t1.businessdt = datepart(t2.holiday_dt))
		 order by t1.businessdt desc;
RUN;

data thursdaydates_tmp3;
	set thursdaydates_tmp2;
	priordayholiday = lag1(holidayname);
	priordate = lag1(businessdt);
	if dayname = 'Thursday'
		AND businessdt ~= intnx('month',businessdt,0,'end')
		AND holidayname = ''
		THEN ThursdayWeek = 'Y';
	ELSE
		if dayname = 'Wednesday'
			AND (priordayholiday ~= ''
			 OR priordate = intnx('month',businessdt,0,'end'))
			THEN ThursdayWeek = 'Y';
	ELSE
		ThursdayWeek = 'N';
	format priordate mmddyy10.;
RUN;

PROC SQL;
		CREATE TABLE WORK.COMBINED_METRICS_tmp1 AS 
			SELECT T1.PRODUCT, 
				   T1.PRODUCT_DESC, 
				   T1.POS, 
				   T1.INSTANCE, 
				   T1.LOCNBR, 
				   T1.BUSINESSDT,  
				   T1.COMPCNT, 
				   T1.COMPAMT, 
				   T1.COMPCHANGECNT, 
				   T1.COMPCHANGEAMT,
				   T1.COMPLOANRECVAMT,
				   T1.COMPLOANPOTREVENUEAMT,
				   T1.FIRSTTIMELOANSCNT, 
				   T1.FIRSTTIMELOANSAMT, 
				   T1.NEWLOANSCNT, 
				   T1.NEWLOANSAMT, 
				   T1.TOTDRAWSCNT, 
				   T1.TOTDRAWSAMT, 
				   T1.REFINANCECNT,  
				   T1.EXTENSIONSCNT, 
				   T1.EXTENSIONSAMT, 
				   T1.AVERAGELOANAMT,
				   T1.AVERAGEDRAWAMT,
				   T1.DELCNT, 
				   T1.DELAMT, 
				   T1.DELCHANGECNT, 
				   T1.DELCHANGEAMT,
				   T1.DELLOANRECVAMT,
				   T1.DELLOANPOTREVENUEAMT, 
				   T1.DEFCNT, 
				   T1.DEFAMT, 
				   T1.DEFCHANGECNT, 
				   T1.DEFCHANGEAMT, 
				   T1.DEFLOANRECVAMT, 
				   T1.DEFLOANPOTREVENUEAMT,
				   T1.NEWDEFCNT,
				   T1.NEWDEFAMT,
				   T1.WOCOCNT,
				   T1.WOCOAMT,
				   T1.WOCOCHANGECNT,
				   T1.WOCOCHANGEAMT,
				   T1.WOCOLOANRECVAMT,
				   T1.WOCOLOANPOTREVENUEAMT,
				   T1.REPAYMENTPLANSCNT,
				   T1.TOTLINECNT,
				   T1.TOTAVAILABLECREDITAMT,
				   T1.CURRENTCNT,
				   T1.CURRENTAMT,
				   T1.DELPAYCNT,
				   T1.DELPAYAMT,
				   T1.PENDINGCLOSEDCNT,
				   T1.PENDINGCLOSEDAMT,
				   T1.DEFPAYCNT,
				   T1.DEFPAYAMT,
				   T1.WOCOPAYAMT,
				   T1.WOCOPAYCNT,
				   T1.GROSSREVENUEAMT,
				   T1.NETREVENUEAMT,
				   T1.WAIVEDFEESCNT,
				   T1.WAIVEDFEESAMT,
				   T1.COUPONSCNT,
				   T1.COUPONSAMT,
				   T1.REBATESCNT,
				   T1.REBATESAMT,
				   T1.SATISFIEDPAYMENTSCNT,
				   T1.AVGDURATIONCNT,
				   T1.FIRSTPRESENTMENTCNT,
				   T1.FIRSTPRESENTMENTAMT,
				   T1.SECONDPRESENTMENTCNT,
				   T1.SECONDPRESENTMENTAMT,
				   T1.THIRDPRESENTMENTCNT,
				   T1.THIRDPRESENTMENTAMT,
				   T1.VOLSURRABANDONSCNT,
				   T1.VOLSURRABANDONSAMT,
				   T1.REPOSSESSIONCNT,
				   T1.REPOSSESSIONAMT,
				   T1.WOCOEXPAMT
			FROM WORK.COMBINED_METRICS_PRE T1;
%RUNQUIT(&job,&sub15);

data WORK.COMBINED_METRICS_tmp2;
	set WORK.COMBINED_METRICS_tmp1;
		last_report_dt = intnx('day',today(),-1);
		lastthursdayofmonth = intnx('week.5',intnx('month',datepart(businessdt),0,'end'),0);
		if lastthursdayofmonth = intnx('month',datepart(businessdt),0,'end') 
		   	or lastthursdayofmonth = holiday('veteransusg',year(datepart(businessdt)))
			or lastthursdayofmonth = holiday('veterans',year(datepart(businessdt)))
			or lastthursdayofmonth = holiday('thanksgiving',year(datepart(businessdt)))
			or lastthursdayofmonth = holiday('christmas',year(datepart(businessdt))) 
				then lastthursdayofmonth = intnx('day',lastthursdayofmonth,-1);
		format lastthursdayofmonth mmddyy10.;
	if datepart(businessdt) = lastthursdayofmonth then lastthursday = 'Y';
			else lastthursday = 'N';
/*	drop lastthursdayofmonth;*/
	format last_report_dt mmddyy10.;
RUN;

PROC SQL;
		CREATE TABLE WORK.COMBINED_METRICS_tmp3 AS
			SELECT T1.*, T2.ThursdayWeek FROM WORK.COMBINED_METRICS_tmp2 T1, WORK.THURSDAYDATES_TMP3 T2 where (T1.BUSINESSDT = T2.BUSINESSDT);
QUIT;

/*START PWO INFORMATION*/
PROC SQL;
CREATE TABLE WORK.PWO_BASE AS
SELECT
	T2.CENTER_NBR AS LOCNBR,
	COMPRESS(PUT(T1.CUSTOMERNBR,30.)) AS CUSTOMERNBR,
	COMPRESS(PUT(T1.LOANNBR,30.)) AS DEALNBR,
	CASE
		WHEN T1.PRODUCTTYPE = 'PDL' THEN 'PAYDAY'
		WHEN T1.PRODUCTTYPE = 'TLP' THEN 'TITLE'
		WHEN T1.PRODUCTTYPE = 'LOC' THEN 'LINEOFCREDIT'
		ELSE ' '
	END AS PRODUCT,
	DHMS(DATEPART(T1.BUSINESSDATE),0,0,0) AS BUSINESSDT FORMAT DATETIME20.,
	T1.PWOAMT,
	T1.PWODATE
FROM OMNISILO.PWOREPORT T1
	LEFT JOIN OMNIDB.PRODUCT_MASTER T2 ON (COMPRESS(PUT(T1.LOANNBR,30.)) = T2.SOURCE_PRODUCT_ID AND T2.SOURCE_SYSTEM_CD = 'QFUND_X');
%RUNQUIT(&job,&sub15);

PROC SQL;
CREATE TABLE WORK.PWO_PRE AS
SELECT
	LOCNBR,
	BUSINESSDT,
	PRODUCT,
	SUM(CASE 
			WHEN BUSINESSDT = DHMS(INTNX('MONTH',DATEPART(BUSINESSDT),0,'B'),00,00,00) 
				AND PWODATE BETWEEN DHMS(INTNX('MONTH',DATEPART(BUSINESSDT),0,'B'),00,00,00)
				AND DHMS(INTNX('MONTH',DATEPART(BUSINESSDT),0,'E'),00,00,00)
			THEN PWOAMT
		ELSE 0
		END) AS BEGIN_PWO_AMT_PRE,
	SUM(CASE WHEN PWODATE BETWEEN DHMS(INTNX('MONTH',DATEPART(BUSINESSDT),0,'B'),00,00,00) AND DHMS(INTNX('MONTH',DATEPART(BUSINESSDT),0,'E'),00,00,00)
						THEN PWOAMT
					  ELSE 0
				 END) AS CURRENT_PWO_AMT,
	SUM(CASE WHEN PWODATE BETWEEN DHMS(INTNX('MONTH',DATEPART(BUSINESSDT),1,'B'),00,00,00) AND DHMS(INTNX('MONTH',DATEPART(BUSINESSDT),1,'E'),00,00,00)
						THEN PWOAMT
					  ELSE 0
				 END) AS NEXT_MONTH_PWO_AMT,
	SUM(CASE WHEN PWODATE BETWEEN DHMS(INTNX('MONTH',DATEPART(BUSINESSDT),2,'B'),00,00,00) AND DHMS(INTNX('MONTH',DATEPART(BUSINESSDT),2,'E'),00,00,00)
						THEN PWOAMT
					  ELSE 0
				 END) AS NEXT_2_MONTH_PWO_AMT
	FROM  WORK.PWO_BASE
	GROUP BY LOCNBR, PRODUCT, BUSINESSDT
	ORDER BY LOCNBR, PRODUCT, BUSINESSDT;
QUIT;
		
DATA WORK.QFX_PWO;
	SET WORK.PWO_PRE;
	BY LOCNBR PRODUCT;
	BUSINESSDT = DATEPART(BUSINESSDT);
	IF FIRST.PRODUCT THEN IND = 'Y';
	ELSE IND = 'N';
	IF DAY(DATEPART(BUSINESSDT)) = 1 OR FIRST.LOCNBR OR IND = 'Y' THEN 
		DO;
			BEGIN_PWO_AMT = BEGIN_PWO_AMT_PRE;
			RETAIN BEGIN_PWO_AMT;
		END;
	FORMAT BUSINESSDT MMDDYY10.;
DROP BEGIN_PWO_AMT_PRE IND;
RUN;

PROC SQL;
		CREATE TABLE WORK.DAILYSUM_DATAMART_FUSE_TMP AS 
			SELECT T1.PRODUCT,
				   T1.PRODUCT_DESC,
				   T1.POS,
				   T1.INSTANCE,
				   (CASE WHEN T2.BRND_CD='' THEN 'AA' ELSE T2.BRND_CD END) AS BRANDCD,
				   ("STANDARD") AS BANKMODEL,
				   T2.CTRY_CD AS COUNTRYCD,
				   T2.ST_PVC_CD AS STATE,
				   T2.ADR_CITY_NM AS CITY,
				   T2.MAIL_CD AS ZIP,
				   T2.BUSN_UNIT_ID AS BUSINESS_UNIT,
				   T2.HIER_ZONE_NBR AS ZONENBR,
				   T2.HIER_ZONE_NM AS ZONENAME,
				   T2.HIER_RGN_NBR AS REGIONNBR,
				   T2.HIER_RDO_NM AS REGIONRDO,
				   T2.HIER_DIV_NBR AS DIVISIONNBR,
				   T2.HIER_DDO_NM AS DIVISIONDDO,
				   T1.LOCNBR,
				   T2.LOC_NM AS LOCATION_NAME,
				   T2.OPEN_DT AS LOC_OPEN_DT,
				   T2.CLS_DT AS LOC_CLOSE_DT,
				   DHMS(T1.BUSINESSDT,00,00,00) AS BUSINESSDT FORMAT DATETIME20.,
				   DHMS(DATE()-1,00,00,00) AS LAST_REPORT_DT FORMAT DATETIME20.,
				   . AS LATITUDE,
				   . AS LONGITUDE,
				   T6.HOLIDAYNAME,
				   T1.LASTTHURSDAY AS LASTTHURSDAY,
				   T1.THURSDAYWEEK AS THURSDAYWEEK,
				   T1.COMPCNT, 
				   T1.COMPAMT, 
				   T1.COMPCHANGECNT, 
				   T1.COMPCHANGEAMT,
				   T1.COMPLOANRECVAMT,
				   T1.COMPLOANPOTREVENUEAMT,
				   T1.FIRSTTIMELOANSCNT, 
				   T1.FIRSTTIMELOANSAMT, 
				   T1.NEWLOANSCNT, 
				   T1.NEWLOANSAMT, 
				   T1.TOTDRAWSCNT, 
				   T1.TOTDRAWSAMT, 
				   T1.REFINANCECNT,  
				   T1.EXTENSIONSCNT, 
				   T1.EXTENSIONSAMT, 
				   T1.AVERAGELOANAMT,
				   T1.AVERAGEDRAWAMT,
				   T1.DELCNT, 
				   T1.DELAMT, 
				   T1.DELCHANGECNT, 
				   T1.DELCHANGEAMT,
				   T1.DELLOANRECVAMT,
				   T1.DELLOANPOTREVENUEAMT, 
				   T1.DEFCNT, 
				   T1.DEFAMT, 
				   T1.DEFCHANGECNT, 
				   T1.DEFCHANGEAMT, 
				   T1.DEFLOANRECVAMT, 
				   T1.DEFLOANPOTREVENUEAMT,
				   T1.NEWDEFCNT,
				   T1.NEWDEFAMT,
				   T1.WOCOCNT,
				   T1.WOCOAMT,
				   T1.WOCOCHANGECNT,
				   T1.WOCOCHANGEAMT,
				   T1.WOCOLOANRECVAMT,
				   T1.WOCOLOANPOTREVENUEAMT,
				   T1.REPAYMENTPLANSCNT,
				   T1.TOTLINECNT,
				   T1.TOTAVAILABLECREDITAMT,
				   T1.CURRENTCNT,
				   T1.CURRENTAMT,
				   T1.DELPAYCNT,
				   T1.DELPAYAMT,
				   T1.PENDINGCLOSEDCNT,
				   T1.PENDINGCLOSEDAMT,
				   T1.DEFPAYCNT,
				   T1.DEFPAYAMT,
				   T1.WOCOPAYAMT,
				   T1.WOCOPAYCNT,
				   T1.GROSSREVENUEAMT,
				   T1.NETREVENUEAMT,
				   T1.WAIVEDFEESCNT,
				   T1.WAIVEDFEESAMT,
				   T1.COUPONSCNT,
				   T1.COUPONSAMT,
				   T1.REBATESCNT,
				   T1.REBATESAMT,
				   T1.SATISFIEDPAYMENTSCNT,
				   T1.AVGDURATIONCNT,
				   T1.FIRSTPRESENTMENTCNT,
				   T1.FIRSTPRESENTMENTAMT,
				   T1.SECONDPRESENTMENTCNT,
				   T1.SECONDPRESENTMENTAMT,
				   T1.THIRDPRESENTMENTCNT,
				   T1.THIRDPRESENTMENTAMT,
				   T1.VOLSURRABANDONSCNT,
				   T1.VOLSURRABANDONSAMT,
				   T1.REPOSSESSIONCNT,
				   T1.REPOSSESSIONAMT,
				   T1.WOCOEXPAMT,
          		   T3.CURRENT_PWO_AMT, 
          		   T3.NEXT_MONTH_PWO_AMT, 
          		   T3.NEXT_2_MONTH_PWO_AMT, 
          		   T3.BEGIN_PWO_AMT,
				   . AS NEWCUSTCNTCOMPANY,
				   . AS REDEEM_CUSTOMER_CNT,
				   . AS REACTIVE_CUSTOMER_CNT,
				   . AS ACTIVE_CUST_CNT,
				   . AS INACTIVE_CUST_CNT,
				   (CASE WHEN T1.LOCNBR IN (6874) THEN 'ONLINE' ELSE 'STOREFRONT' END) AS CHANNELCD
			FROM WORK.COMBINED_METRICS_tmp3 T1 
					LEFT JOIN EDW.D_LOCATION T2 ON (T1.LOCNBR = T2.LOC_NBR)
					LEFT JOIN BIOR.L_CALENDAR T6 ON (T1.BUSINESSDT = T6.DATE_TIME_START)
					LEFT JOIN WORK.QFX_PWO T3 ON (t1.locnbr = t3.LOCNBR) AND (t1.businessdt = t3.BUSINESSDT) AND (t1.product = t3.PRODUCT);
%RUNQUIT(&job,&sub15);

/*WAITFOR CUST LIFECYCLE TO BE READY FOR THE DAY*/

/*UPDATE STATUS TABLE*/
PROC SQL;
CONNECT TO ORACLE (USER=&USER. PW=&PASSWORD. PATH='BIOR');
	EXECUTE(UPDATE BIOR.DATAMART_STATUS
			SET FUSE_STATUS = 'WAITING_CL'
			WHERE SOURCE = 'BIOR.O_DAILY_SUMMARY_ALL'
			)
	 BY ORACLE;
	 DISCONNECT FROM ORACLE;
%RUNQUIT(&job,&sub13);

%MACRO WAITFORCUSTLIFE();


	%DO %UNTIL (%EVAL(&COUNT_R. >= 1));	
		PROC SQL;
			CREATE TABLE CUST_LIFE_CHECK_TODAY AS
			SELECT INSTANCE
				  ,MAX(BUSINESS_DATE)	AS BUSINESSDT
			FROM BIOR.CUST_CATEGORY_DAILY_COUNT
			WHERE INSTANCE = 'FUSE'
			GROUP BY INSTANCE
		;
		QUIT;

		DATA _NULL_;
			FORMAT WEEKDAY $20.;
			DAYOFWEEK = WEEKDAY(DATE());
			IF DAYOFWEEK = 1 THEN WEEKDAY = 'SUNDAY';
			ELSE IF DAYOFWEEK = 2 THEN WEEKDAY = 'MONDAY';
			ELSE IF DAYOFWEEK = 3 THEN WEEKDAY = 'TUESDAY';
			ELSE IF DAYOFWEEK = 4 THEN WEEKDAY = 'WEDNESDAY';
			ELSE IF DAYOFWEEK = 5 THEN WEEKDAY = 'THURSDAY';
			ELSE IF DAYOFWEEK = 6 THEN WEEKDAY = 'FRIDAY';
			ELSE IF DAYOFWEEK = 7 THEN WEEKDAY = 'SATURDAY';
			CALL SYMPUTX("DAYOFWEEK",WEEKDAY,'G');
		RUN;

		%IF &DAYOFWEEK. = SUNDAY
			OR &DAYOFWEEK. = TUESDAY
			OR &DAYOFWEEK. = WEDNESDAY
			OR &DAYOFWEEK. = THURSDAY
			OR &DAYOFWEEK. = FRIDAY
			OR &DAYOFWEEK. = SATURDAY %THEN 
				%DO;

					/*EADV*/
					PROC SQL;
						SELECT COUNT(*) INTO: COUNT_R
						FROM CUST_LIFE_CHECK_TODAY
						WHERE INSTANCE = 'FUSE' AND BUSINESSDT >= DHMS(TODAY()-1,00,00,00)
					;
					QUIT;

				%END;
		%ELSE %IF &DAYOFWEEK. = MONDAY %THEN
				%DO;

					/*EADV*/
					PROC SQL;
						SELECT COUNT(*) INTO: COUNT_R
						FROM CUST_LIFE_CHECK_TODAY
						WHERE INSTANCE = 'FUSE' AND BUSINESSDT >= DHMS(TODAY()-2,00,00,00)
					;
					QUIT;
				%END;
					
		%PUT THE COUNT IS EQUAL TO : &COUNT_R;

		%IF %EVAL(&COUNT_R. < 1) %THEN 
			%DO;
				/*SLEEPS FOR 300 SECONDS (5 MINUTES) UNTIL IT FINDS 16 FINISHED TABLES, IT WILL LOOP FOREVER UNTIL THE 16 FINISHED TABLES*/
				DATA SLEEP;
					CALL SLEEP(300,1);
				RUN;
			%END;
	%END;

%MEND;

%WAITFORCUSTLIFE

/*UPDATE STATUS TABLE*/
PROC SQL;
CONNECT TO ORACLE (USER=&USER. PW=&PASSWORD. PATH='BIOR');
	EXECUTE(UPDATE BIOR.DATAMART_STATUS
			SET FUSE_STATUS = 'RUNNING'
			WHERE SOURCE = 'BIOR.O_DAILY_SUMMARY_ALL'
			)
	 BY ORACLE;
	 DISCONNECT FROM ORACLE;
%RUNQUIT(&job,&sub13);

PROC SQL;
CREATE TABLE WORK.CUSTOMER_NUMBERS AS 
   SELECT 
        DATEPART(t1.BUSINESS_DATE) FORMAT=MMDDYY10. AS BUSINESS_DATE, 
        t1.LOCATION_NBR, 
        t1.INSTANCE, 
        t1.PRODUCT, 
		T1.PRODUCTDESC AS PRODUCT_DESC, 
        (SUM(t1.NEW_CUST_CNT)) AS NEW_CUST_CNT, 
        (SUM(t1.REDEEM_CUST_CNT)) AS REDEEM_CUST_CNT, 
        (SUM(t1.NEW_REPEAT_CUST_CNT)) AS NEW_REPEAT_CUST_CNT, 
        (SUM(t1.REACTIVE_CUST_CNT)) AS REACTIVE_CUST_CNT, 
        (SUM(t1.ACTIVE_CUST_CNT)) AS ACTIVE_CUST_CNT, 
        (SUM(t1.INACTIVE_CUST_CNT)) AS INACTIVE_CUST_CNT
    FROM BIOR.CUST_CATEGORY_DAILY_COUNT T1
	WHERE T1.INSTANCE = 'FUSE' AND T1.BUSINESS_DATE >= DHMS(TODAY()-5,00,00,00)
      GROUP BY (CALCULATED BUSINESS_DATE),
               t1.LOCATION_NBR,
               t1.INSTANCE,
               t1.PRODUCT,
               T1.PRODUCTDESC
;
%RUNQUIT(&job,&sub13);

PROC SQL;
CREATE TABLE WORK.FUSE_DAILY_FINAL AS
	SELECT
		T1.PRODUCT,
		T1.PRODUCT_DESC,
		T1.POS,
		T1.INSTANCE,
		T1.BRANDCD,
		T1.BANKMODEL,
		T1.COUNTRYCD,
		T1.STATE,
		T1.CITY,
		T1.ZIP,
		T1.BUSINESS_UNIT,
		T1.ZONENBR,
		T1.ZONENAME,
		T1.REGIONNBR,
		T1.REGIONRDO,
		T1.DIVISIONNBR,
		T1.DIVISIONDDO,
		T1.LOCNBR,
		T1.LOCATION_NAME,
		T1.LOC_OPEN_DT,
		T1.LOC_CLOSE_DT,
		T1.BUSINESSDT,
		T1.LAST_REPORT_DT,
		T1.LATITUDE,
		T1.LONGITUDE,
		T1.HOLIDAYNAME,
		T1.LASTTHURSDAY,
		T1.THURSDAYWEEK,
		T1.COMPCNT,
		T1.COMPAMT,
		T1.COMPCHANGECNT,
		T1.COMPCHANGEAMT,
		T1.COMPLOANRECVAMT,
		T1.COMPLOANPOTREVENUEAMT,
		T1.FIRSTTIMELOANSCNT,
		T1.FIRSTTIMELOANSAMT,
		T1.NEWLOANSCNT,
		T1.NEWLOANSAMT,
		T1.TOTDRAWSCNT,
		T1.TOTDRAWSAMT,
		T1.REFINANCECNT,
		T1.EXTENSIONSCNT,
		T1.EXTENSIONSAMT,
		T1.AVERAGELOANAMT,
		T1.AVERAGEDRAWAMT,
		T1.DELCNT,
		T1.DELAMT,
		T1.DELCHANGECNT,
		T1.DELCHANGEAMT,
		T1.DELLOANRECVAMT,
		T1.DELLOANPOTREVENUEAMT,
		T1.DEFCNT,
		T1.DEFAMT,
		T1.DEFCHANGECNT,
		T1.DEFCHANGEAMT,
		T1.DEFLOANRECVAMT,
		T1.DEFLOANPOTREVENUEAMT,
		T1.NEWDEFCNT,
		T1.NEWDEFAMT,
		T1.WOCOCNT,
		T1.WOCOAMT,
		T1.WOCOCHANGECNT,
		T1.WOCOCHANGEAMT,
		T1.WOCOLOANRECVAMT,
		T1.WOCOLOANPOTREVENUEAMT,
		T1.REPAYMENTPLANSCNT,
		T1.TOTLINECNT,
		T1.TOTAVAILABLECREDITAMT,
		T1.CURRENTCNT,
		T1.CURRENTAMT,
		T1.DELPAYCNT,
		T1.DELPAYAMT,
		T1.PENDINGCLOSEDCNT,
		T1.PENDINGCLOSEDAMT,
		T1.DEFPAYCNT,
		T1.DEFPAYAMT,
		T1.WOCOPAYAMT,
		T1.WOCOPAYCNT,
		T1.GROSSREVENUEAMT,
		T1.NETREVENUEAMT,
		T1.WAIVEDFEESCNT,
		T1.WAIVEDFEESAMT,
		T1.COUPONSCNT,
		T1.COUPONSAMT,
		T1.REBATESCNT,
		T1.REBATESAMT,
		T1.SATISFIEDPAYMENTSCNT,
		T1.AVGDURATIONCNT,
		T1.FIRSTPRESENTMENTCNT,
		T1.FIRSTPRESENTMENTAMT,
		T1.SECONDPRESENTMENTCNT,
		T1.SECONDPRESENTMENTAMT,
		T1.THIRDPRESENTMENTCNT,
		T1.THIRDPRESENTMENTAMT,
		T1.VOLSURRABANDONSCNT,
		T1.VOLSURRABANDONSAMT,
		T1.REPOSSESSIONCNT,
		T1.REPOSSESSIONAMT,
		T1.WOCOEXPAMT,
		T1.CURRENT_PWO_AMT,
		T1.NEXT_MONTH_PWO_AMT,
		T1.NEXT_2_MONTH_PWO_AMT,
		T1.BEGIN_PWO_AMT,
		T2.NEW_CUST_CNT AS NEWCUSTCNTCOMPANY,
		T2.REDEEM_CUST_CNT AS REDEEM_CUSTOMER_CNT,
		T2.REACTIVE_CUST_CNT AS REACTIVE_CUSTOMER_CNT,
		T2.ACTIVE_CUST_CNT,
		T2.INACTIVE_CUST_CNT,
		T1.CHANNELCD
	FROM WORK.DAILYSUM_DATAMART_FUSE_TMP T1
		LEFT JOIN WORK.CUSTOMER_NUMBERS t2 ON (t1.INSTANCE = t2.INSTANCE AND T1.PRODUCT = t2.PRODUCT AND T1.BUSINESSDT = T2.BUSINESS_DATE AND t1.LOCNBR = t2.LOCATION_NBR);
QUIT;

PROC FORMAT;
    PICTURE CHECKTHEDAY OTHER=%0Y.%0M.%0D (DATATYPE=DATE);
    PICTURE CHECKTHETIME OTHER=%0H.%0M.%0S (DATATYPE=TIME);
%RUNQUIT(&job,&sub15);

%LET DATE=%SYSFUNC(INTNX(DAY,%SYSFUNC(TODAY()),0,END),DATE7.);
%PUT &DATE;


/* CREATE MACROS FOR BULKLOAD PATH AND TIMESTAMP */
DATA _NULL_;
	CALL SYMPUTX('TIMESTAMP',TRANWRD(PUT(DATETIME(),DATETIME20.),':','.'),'G');
    CALL SYMPUTX('PATH',"E:\SHARED\CADA\SAS DATA\DATAMART\SKYNET REDESIGN BULKLOAD LOGS\DAILY\FUSE",'G');
    CALL SYMPUTX('PATHTWO',"E:\SHARED\CADA\SAS DATA\DATAMART\SKYNET REDESIGN BULKLOAD LOGS\DAILY\FUSE\DIR2\",'G');
%RUNQUIT(&job,&sub15);

PROC SQL;
    INSERT INTO SKY.DAILYSUM_DATAMART_FUSE (BULKLOAD=YES BL_LOG="&PATH.\BL_&DATE..LOG" BL_DELETE_DATAFILE=YES 
                                                   BL_DEFAULT_DIR="&PATHTWO.")
    SELECT 
        *
    FROM WORK.FUSE_DAILY_FINAL
	WHERE BUSINESSDT >= DHMS(TODAY()-5,00,00,00);
%RUNQUIT(&job,&sub15);

/* CREATE TIMESTAMP */
PROC FORMAT;
	PICTURE WHATDAYISIT OTHER=%0Y.%0M.%0D (DATATYPE=DATE);
	PICTURE WHATTIMEISIT OTHER=%0H.%0M.%0S (DATATYPE=TIME);
%RUNQUIT(&job,&sub15);

DATA _NULL_;
	CALL SYMPUTX('TIMESTAMP',TRANWRD(PUT(DATETIME(),DATETIME20.),':','.'),'G');
RUN;

%PUT &TIMESTAMP;

/*KICK OFF FUSE_TRANSPOSE UPLOAD*/
SYSTASK COMMAND "'C:\PROGRAM FILES\SASHOME\SASFOUNDATION\9.4\SAS.EXE'
				 '&DAILY_FILE_PATH.\FUSE TRANSPOSE.SAS'
				 -LOG '&DAILY_LOGPATH.\FUSE_TRANSPOSE_&TIMESTAMP..LOG'
				 -CONFIG 'C:\PROGRAM FILES\SASHOME\SASFOUNDATION\9.4\SASV9.CFG'"
TASKNAME=FUSE_TRANSPOSE
STATUS=FUSE_TRANSPOSE;

%INCLUDE "&DAILY_FILE_PATH.\DAILYSUM_UPLOAD_FUSE.SAS";


PROC SQL;
	CONNECT TO ORACLE(USER=&USER. PASSWORD=&PASSWORD. PATH='BIOR');
	EXECUTE(UPDATE BIOR.FUSE_DAILYSUMMARY
		    SET LAST_REPORT_DT = TO_DATE(TO_CHAR(CURRENT_DATE-1, 'MM/DD/YYYY'), 'MM/DD/YYYY'))
	BY ORACLE;
	DISCONNECT FROM ORACLE;
QUIT;

WAITFOR _ALL_ FUSE_TRANSPOSE;


/*ABORT PROGRAM*/
%MACRO STOPPROGRAM();

	%IF %EVAL(1=1) %THEN %DO;
		%ABORT CANCEL;
	%END;

%MEND;

%STOPPROGRAM