%INCLUDE "E:\SHARED\CADA\SAS SOURCE CODE\DEVELOPMENT\JHUBBARD\TOP SECRET PROGRAM.SAS";
%INCLUDE "\\CSSSASAPP\CADA\SAS SOURCE CODE\PRODUCTION\SERVICE ACCOUNTS\SVC_SASUSER.SAS";
%INCLUDE "E:\SHARED\CADA\SAS SOURCE CODE\PRODUCTION\STDM\STDM_LIBRARY_SCRIPT.SAS";
%INCLUDE "E:\SHARED\CADA\SAS SOURCE CODE\DEVELOPMENT\JHUBBARD\SKYNET REDESIGN\DATAMART REDESIGN\DAILY\DAILY_ERROR_INPUTS.SAS";

LIBNAME SKYNET "E:\SHARED\CADA\SAS DATA\DATAMART\STDM";

LIBNAME EDW_ST ORACLE  
	USER=&USER 
	PW=&PASSWORD
	PATH=EDWPRD 
	SCHEMA=EDW_ST
	DBSLICEPARM=(ALL,4) DEFER=YES;


%LET ENDINGDT = INTNX('DAY',TODAY(),-1,'BEGINNING');
DATA _NULL_;
	CALL SYMPUTX('DAILY_LOGPATH',"E:\SHARED\CADA\LOGS\SKYNET V2",'G');
	CALL SYMPUTX('DAILY_FILE_PATH',"E:\SHARED\CADA\SAS SOURCE CODE\PRODUCTION\SKYNET V2\SKYNET REDESIGN\DATAMART REDESIGN\DAILY",'G');
%RUNQUIT(&job,&sub2);

DATA _NULL_;
	CALL SYMPUTX('END_DT',PUT(&ENDINGDT,YYMMDDN8.),G);
%RUNQUIT(&job,&sub2);

PROC SQL;
	CONNECT TO ORACLE(USER=&USER. PASSWORD=&PASSWORD. PATH='EDWPRD');
	CREATE TABLE WORK.QFUND12_DAILYSUMMARY_TMP0 AS
	SELECT *
	FROM CONNECTION TO ORACLE
	(
		SELECT *
		FROM EDW_ST.DAILYRECAP
		WHERE RECAP_DT >= TRUNC(CURRENT_DATE)-10 AND ST_CD ^= 'CO'
	)
	;
	DISCONNECT FROM ORACLE;
%RUNQUIT(&job,&sub2);

PROC SQL;
   CREATE TABLE WORK.QFUND12_DAILYSUMMARY_TMP1 AS 
   SELECT /* PRODUCT */
            ("INSTALLMENT") FORMAT=$18. LABEL="PRODUCT" AS PRODUCT, 
          /* POS */
            ("QFUND") LABEL="POS" AS POS, 
          /* INSTANCE */
            (CASE
              WHEN ST_CD = 'CO' THEN 'QFUND2'
              ELSE 'QFUND1'
            END) LABEL="INSTANCE" AS INSTANCE, 
          /* BANKMODEL */
            ("STANDARD") LABEL="BANKMODEL" AS BANKMODEL, 
          T2.BRND_CD AS BRANDCD, 
          T2.CTRY_CD AS COUNTRYCD, 
          T2.ST_PVC_CD AS STATE, 
          T2.ADR_CITY_NM AS CITY, 
          T2.MAIL_CD AS ZIP, 
          T2.BUSN_UNIT_ID AS BUSINESS_UNIT, 
          T2.HIER_ZONE_NBR AS ZONENBR, 
          T2.HIER_ZONE_NM AS ZONENAME, 
          T2.HIER_RGN_NBR AS REGIONNBR, 
          T2.HIER_RDO_NM AS REGIONRDO, 
          T2.HIER_DIV_NBR AS DIVISIONNBR, 
          T2.HIER_DDO_NM AS DIVISIONDDO, 
          T1.LOC_NBR LABEL="LOCNBR" AS LOCNBR, 
          T2.LOC_NM AS LOCATION_NAME, 
          T2.OPEN_DT AS LOC_OPEN_DT, 
          T2.CLS_DT AS LOC_CLOSE_DT, 
          /* BUSINESSDT */
            (DATEPART(T1.RECAP_DT)) FORMAT=MMDDYY10. LABEL="BUSINESSDT" AS BUSINESSDT, 
          /* BEGINDT */
            (INTNX('MONTH',TODAY(),-24,'BEGINNING')) FORMAT=MMDDYY10. LABEL="BEGINDT" AS BEGINDT, 
          /* ADVCNT */
            (SUM(CASE WHEN COMPRESS(T1.FNCL_STAT_TXT) = "VOIDED/RESCINDEDORIGINATIONS" THEN -T1.ORIG_LOAN_CNT ELSE 
            T1.ORIG_LOAN_CNT END)) AS ADVCNT, 
          /* ADVAMT1 */
            (SUM(T1.ORIG_LOAN_PRNC_BLNC_AMT)) FORMAT=14.2 LABEL="ADVAMTSUM" AS ADVAMT1, 
          /* ADVAMTSUM */
            (SUM(CASE WHEN T1.FNCL_STAT_TXT = "VOIDED/RESCINDED ORIGINATIONS" THEN T1.ORIG_LOAN_PRNC_BLNC_AMT ELSE 
            T1.ORIG_LOAN_PRNC_BLNC_AMT END)) AS ADVAMTSUM, 
          /* EARNEDFEES */
            (SUM(SUM(T1.INT_PAID_AMT, T1.SDB_FEE_PAID_AMT, T1.MTH_HNDL_FEE_PAID_AMT, 
            T1.ACQSN_FEE_PAID_AMT,T1.NSF_FEE_PAID_AMT,-T1.INT_RBT_AMT)  * -1)) FORMAT=14.2 LABEL="EARNEDFEES" AS 
            EARNEDFEES, 
          /* NEWCUSTDEALCNT */
            (SUM(T1.ORIG_NEW_CUST_CNT)) FORMAT=7. LABEL="NEWCUSTDEALCNT" AS NEWCUSTDEALCNT, 
          /* TOTADVRECV */
            (SUM(CASE
              WHEN T1.FNCL_STAT_TXT IN ("CURRENT", "CURRENT IN FLIGHT", "NSF") THEN OUT_PRNC_BLNC_AMT
              ELSE 0
            END)) FORMAT=14.2 LABEL="TOTADVRECV" AS TOTADVRECV, 
          /* TOTADVFEERECV */
            (SUM(CASE
              WHEN T1.FNCL_STAT_TXT IN ("CURRENT", "CURRENT IN FLIGHT", "NSF") THEN T1.OUT_LOAN_BLNC_AMT - 
            OUT_PRNC_BLNC_AMT
              ELSE 0
            END)) FORMAT=14.2 LABEL="TOTADVFEERECV" AS TOTADVFEERECV, 
          /* TOTDEFAULTRECV */
            (SUM(CASE
              WHEN T1.FNCL_STAT_TXT IN ("DEFAULT", "DEFAULT W/NSF") THEN OUT_LOAN_BLNC_AMT
              ELSE 0
            END)) FORMAT=14.2 LABEL="TOTDEFAULTRECV" AS TOTDEFAULTRECV, 
          /* HELDCNT */
            (SUM(CASE
              WHEN T1.FNCL_STAT_TXT IN ("CURRENT", "CURRENT IN FLIGHT", "NSF") THEN OUT_LOAN_CNT
              ELSE 0
            END)) FORMAT=14. LABEL="HELDCNT" AS HELDCNT, 
          /* DEFAULTAMT */
            (SUM(CASE
              WHEN T1.FNCL_STAT_TXT IN ("DEFAULT", "DEFAULT W/NSF") THEN OUT_LOAN_BLNC_AMT
              ELSE 0
            END)) LABEL="DEFAULTAMT" AS DEFAULTAMT, 
          /* DEFAULTCNT */
            (SUM(CASE
              WHEN T1.FNCL_STAT_TXT IN ("DEFAULT", "DEFAULT W/NSF") THEN OUT_LOAN_CNT
              ELSE 0
            END)) FORMAT=14. LABEL="DEFAULTCNT" AS DEFAULTCNT, 
          /* WOAMTSUM */
            (SUM(T1.WO_AGE_AMT)) FORMAT=14.2 LABEL="WOAMTSUM" AS WOAMTSUM, 
          /* WOCNT */
            (SUM(T1.WO_AGE_CNT)) FORMAT=11. AS WOCNT, 
          /* WOBAMTSUM */
            (SUM(SUM(T1.WO_BNKRPT_AMT,T1.WO_DCSD_AMT))) LABEL="WOBAMTSUM" AS WOBAMTSUM, 
          /* WOBCNT */
            (SUM(T1.WO_BNKRPT_CNT)) FORMAT=7. AS WOBCNT, 
          /* WODCNT */
            (SUM(T1.WO_DCSD_CNT)) FORMAT=7. AS WODCNT, 
          /* WORAMTSUM */
            (SUM((CASE
              WHEN T1.FNCL_STAT_TXT IN ("WRITE OFF (AGE)", "WRITE OFF (BANKRUPT)", "WRITE OFF (DECEASED)")
                  THEN 
            SUM(T1.CASH_CC_MO_PRTL_PYMNT_AMT,T1.CASH_CC_MO_FULL_PYMNT_AMT,T1.ACH_PYMNT_PRTL_AMT,T1.ACH_PYMNT_FULL_AMT,T1.DPST_PRTL_PYMNT_AMT,T1.DPST_FULL_PYMNT_AMT)
            END) * -1)) FORMAT=14.2 LABEL="WORAMTSUM" AS WORAMTSUM, 
          /* AGNADVSUM */
            (SUM(0)) LABEL="AGNADVSUM" AS AGNADVSUM, 
          /* AGNCNT */
            (SUM(0)) LABEL="AGNCNT" AS AGNCNT, 
          /* ENDDT */
            (INTNX('DAY',TODAY(),-1,'BEGINNING')) FORMAT=MMDDYY10. LABEL="ENDDT" AS ENDDT, 
          /* SUBSTITUTEROW */
            ('N') AS SUBSTITUTEROW
      FROM WORK.QFUND12_DAILYSUMMARY_TMP0 T1
      INNER JOIN EDW.D_LOCATION T2 ON (T1.LOC_NBR = T2.LOC_NBR)
      WHERE (CALCULATED BUSINESSDT) BETWEEN (CALCULATED BEGINDT) AND (CALCULATED ENDDT) AND T2.ST_PVC_CD NOT IS MISSING 
           AND T1.ST_CD NOT = 'CO'
      GROUP BY (CALCULATED PRODUCT),
               (CALCULATED POS),
               (CALCULATED INSTANCE),
               (CALCULATED BANKMODEL),
               T2.BRND_CD,
               T2.CTRY_CD,
               T2.ST_PVC_CD,
               T2.ADR_CITY_NM,
               T2.MAIL_CD,
               T2.BUSN_UNIT_ID,
               T2.HIER_ZONE_NBR,
               T2.HIER_ZONE_NM,
               T2.HIER_RGN_NBR,
               T2.HIER_RDO_NM,
               T2.HIER_DIV_NBR,
               T2.HIER_DDO_NM,
               T1.LOC_NBR,
               T2.LOC_NM,
               T2.OPEN_DT,
               T2.CLS_DT,
               (CALCULATED BUSINESSDT),
               (CALCULATED BEGINDT),
               (CALCULATED ENDDT),
               (CALCULATED SUBSTITUTEROW)
%RUNQUIT(&job,&sub2);


PROC SQL;
	CREATE TABLE PWO_QFUND1_PRE AS
		SELECT 
			 STORE_NUMBER 						 AS LOCNBR
			,STATE_CODE
			,DHMS(DATEPART(AS_OF_DATE),00,00,00) AS BUSINESSDT FORMAT DATETIME20.
			,SUM(CASE WHEN AS_OF_DATE = DHMS(INTNX('MONTH',DATEPART(AS_OF_DATE),0,'B'),00,00,00)
					  AND PWO_DATE BETWEEN DHMS(INTNX('MONTH',DATEPART(AS_OF_DATE),0,'B'),00,00,00) AND DHMS(INTNX('MONTH',DATEPART(AS_OF_DATE),0,'E'),00,00,00)
					  	THEN PWO_AMT
					  ELSE 0 
				 END) 							  AS BEGIN_PWO_AMT_PRE
			,SUM(CASE WHEN PWO_DATE BETWEEN DHMS(INTNX('MONTH',DATEPART(AS_OF_DATE),0,'B'),00,00,00) AND DHMS(INTNX('MONTH',DATEPART(AS_OF_DATE),0,'E'),00,00,00)
					  	THEN PWO_AMT
					  ELSE 0
				 END) 							  AS CURRENT_PWO_AMT
			,SUM(CASE WHEN PWO_DATE BETWEEN DHMS(INTNX('MONTH',DATEPART(AS_OF_DATE),1,'B'),00,00,00) AND DHMS(INTNX('MONTH',DATEPART(AS_OF_DATE),1,'E'),00,00,00)
			     	  	THEN PWO_AMT
					  ELSE 0
				 END) 							  AS NEXT_MONTH_PWO_AMT
			,SUM(CASE WHEN PWO_DATE BETWEEN DHMS(INTNX('MONTH',DATEPART(AS_OF_DATE),2,'B'),00,00,00) AND DHMS(INTNX('MONTH',DATEPART(AS_OF_DATE),2,'E'),00,00,00)
					  	THEN PWO_AMT
					  ELSE 0
				 END) 							  AS NEXT_2_MONTH_PWO_AMT
			,'QFUND1'                             AS INSTANCE
			,CASE WHEN STATE_CODE IN ('IL', 'WI', 'DE', 'CO')
				  	THEN 'IPDL'
				  WHEN PRODUCT_TYPE = 'ILP'
				  	THEN 'MULTISTATE INSTALLMENT'
				  WHEN PRODUCT_TYPE = 'TLP'
				  	THEN 'MULTISTATE TITLE'
			 END 								   AS PRODUCT_DESC
		FROM QFUND1.PWO
	WHERE CALCULATED BUSINESSDT >= DHMS(INTNX('MONTH',TODAY(),-36,'B'),00,00,00)
		  AND PRODUCT_TYPE ^= 'TLP'
	GROUP BY 
		 STORE_NUMBER
		,CALCULATED BUSINESSDT
		,PRODUCT_TYPE
		,STATE_CODE
	ORDER BY 
		 STORE_NUMBER
		,STATE_CODE
		,CALCULATED PRODUCT_DESC
		,CALCULATED BUSINESSDT
;
%RUNQUIT(&job,&sub2);

DATA PWO_QFUND1;
	SET PWO_QFUND1_PRE;
	BY LOCNBR PRODUCT_DESC;
	IF FIRST.PRODUCT_DESC THEN IND = 'Y';
	ELSE IND = 'N';
	IF DAY(DATEPART(BUSINESSDT)) = 1 
		OR IND = 'Y' 
		THEN 
		DO;
/*			%LET BEGIN_AMT = BEGIN_PWO_AMT_PRE;*/
			BEGIN_PWO_AMT = CURRENT_PWO_AMT;
			RETAIN BEGIN_PWO_AMT;
		END;

	BUSINESSDT = DATEPART(BUSINESSDT);
	FORMAT BUSINESSDT MMDDYY10.;
DROP BEGIN_PWO_AMT_PRE 
IND
;
%RUNQUIT(&job,&sub2);

DATA BEGIN_PWO_AMT;
	SET WORK.PWO_QFUND1;
	MONTH = MONTH(BUSINESSDT);
	YEAR = YEAR(BUSINESSDT);
	WHERE DAY(BUSINESSDT) = 1;
	KEEP LOCNBR BUSINESSDT BEGIN_PWO_AMT MONTH YEAR;
%RUNQUIT(&job,&sub2);

PROC SQL;
	CONNECT TO ORACLE(USER=&USER. PASSWORD=&PASSWORD. PATH='EDWPRD');
	CREATE TABLE QFUND12_ORIGINATIONS2YEARS2 AS
	SELECT *
	FROM CONNECTION TO ORACLE
	(
	SELECT *
	FROM EDW_ST.LOANDAILYSNAPSHOT
	WHERE PROD_CD = 'IPDL' AND LOAN_SNAP_DT >= TRUNC(CURRENT_DATE)-15
	)
	;
	DISCONNECT FROM ORACLE;
QUIT;

PROC SQL;
   CREATE TABLE WORK.QFUND12_ORIGINATIONS2YEARS AS 
   SELECT T1.LOAN_SNAP_DT AS BUSINESSDT, 
          T1.ST_CD AS STATECD, 
          T1.LOC_NBR AS LOCNBR, 
          T1.LOAN_NBR AS DEALNBR, 
          T1.PROD_CD AS PRODUCTCD, 
          T1.FNCL_STAT_TXT AS FINANCIALSTATUS, 
          /* ORIGDT */
            (DATEPART(T1.ORIG_DT)) FORMAT=MMDDYY10. LABEL="ORIGDT" AS ORIGDT, 
          /* DEFAULTDT */
            (DATEPART(T1.DFLT_DT)) FORMAT=MMDDYY10. LABEL="DEFAULTDT" AS DEFAULTDT, 
          /* WODT */
            (DATEPART(T1.WO_AGE_DT)) FORMAT=MMDDYY10. LABEL="WODT" AS WODT, 
          /* WOBDT */
            (DATEPART(T1.WO_BNKRPT_DT)) FORMAT=MMDDYY10. LABEL="WOBDT" AS WOBDT, 
          /* WODDT */
            (DATEPART(T1.WO_DCSD_DT)) FORMAT=MMDDYY10. LABEL="WODDT" AS WODDT, 
          /* REPAIDDT */
            (DATEPART(T1.REPAID_DT)) FORMAT=MMDDYY10. LABEL="REPAIDDT" AS REPAIDDT, 
          T1.ORIG_PRNC_AMT, 
          T1.INT_CHRG_AMT, 
          T1.SDB_FEE_CHRG_AMT, 
          T1.NSF_FEE_CHRG_AMT, 
          T1.MTH_HNDL_FEE_CHRG_AMT, 
          T1.ACQSN_FEE_CHRG_AMT
      FROM WORK.QFUND12_ORIGINATIONS2YEARS2 T1
      WHERE (CALCULATED ORIGDT) BETWEEN (INTNX('MONTH',TODAY(),-48,'BEGINNING')) AND (INTNX('DAY',TODAY(),-1,'BEGINNING'
           )) AND ( T1.DFLT_DT NOT IS MISSING OR T1.WO_AGE_DT NOT IS MISSING OR T1.WO_BNKRPT_DT NOT IS MISSING OR 
           T1.WO_DCSD_DT NOT IS MISSING OR T1.REPAID_DT NOT IS MISSING )
      ORDER BY T1.LOAN_NBR,
               T1.LOAN_SNAP_DT;
%RUNQUIT(&job,&sub2);

PROC SORT DATA=WORK.QFUND12_ORIGINATIONS2YEARS
	OUT=WORK.QFUND12_UNIQUEORIGS(LABEL="SORTED WORK.QFUND12_ORIGINATIONS2YEARS")
	NODUPKEY
	;
	BY STATECD DEALNBR;

%RUNQUIT(&job,&sub2);

PROC SQL;
   CREATE TABLE WORK.QFUND12_UNIQUEORIGS_TMP1 AS 
   SELECT T1.BUSINESSDT, 
          T1.STATECD, 
          T1.LOCNBR, 
          T1.DEALNBR, 
          T1.PRODUCTCD, 
          T1.FINANCIALSTATUS, 
          T1.ORIGDT, 
          T1.DEFAULTDT, 
          T1.WODT, 
          T1.WOBDT, 
          T1.WODDT, 
          T1.REPAIDDT, 
          /* DURATION_EVENT_DATE */
            (MIN(T1.DEFAULTDT,T1.WODT,T1.WOBDT,T1.WODDT,T1.REPAIDDT)) FORMAT=MMDDYY10. LABEL="DURATION_EVENT_DATE" AS 
            DURATION_EVENT_DATE, 
          T1.ORIG_PRNC_AMT, 
          T1.INT_CHRG_AMT, 
          T1.SDB_FEE_CHRG_AMT, 
          T1.NSF_FEE_CHRG_AMT, 
          T1.MTH_HNDL_FEE_CHRG_AMT, 
          T1.ACQSN_FEE_CHRG_AMT
      FROM WORK.QFUND12_UNIQUEORIGS T1
      WHERE T1.FINANCIALSTATUS NOT = 'VOID/RESCIND';
%RUNQUIT(&job,&sub2);


PROC SQL;
   CREATE TABLE WORK.QFUND12_UNIQUEORIGS_TMP2 AS 
   SELECT T1.BUSINESSDT, 
          T1.STATECD, 
          T1.LOCNBR, 
          T1.DEALNBR, 
          T1.PRODUCTCD, 
          T1.FINANCIALSTATUS, 
          T1.ORIGDT, 
          T1.DEFAULTDT, 
          T1.WODT, 
          T1.WOBDT, 
          T1.WODDT, 
          T1.REPAIDDT, 
          T1.DURATION_EVENT_DATE, 
          /* DEFAULT_DURATION_COUNT */
            (CASE
              WHEN T1.DURATION_EVENT_DATE ~= . AND T1.DURATION_EVENT_DATE = T1.DEFAULTDT AND T1.WOBDT ~= T1.DEFAULTDT 
            AND T1.WODDT ~= T1.DEFAULTDT THEN 1
              ELSE 0
            END) LABEL="DEFAULT_DURATION_COUNT" AS DEFAULT_DURATION_COUNT, 
          /* DEFAULT_DURATION_DAYS */
            (CASE
              WHEN T1.DURATION_EVENT_DATE ~= . AND T1.DURATION_EVENT_DATE = T1.DEFAULTDT AND T1.WOBDT ~= T1.DEFAULTDT 
            AND T1.WODDT ~= T1.DEFAULTDT THEN T1.DURATION_EVENT_DATE - T1.ORIGDT
              ELSE 0
            END) LABEL="DEFAULT_DURATION_DAYS" AS DEFAULT_DURATION_DAYS, 
          /* WO_DURATION_COUNT */
            (CASE
              WHEN T1.DURATION_EVENT_DATE ~= . AND T1.DURATION_EVENT_DATE = T1.WODT THEN 1
              ELSE 0
            END) LABEL="WO_DURATION_COUNT" AS WO_DURATION_COUNT, 
          /* WO_DURATION_DAYS */
            (CASE
              WHEN T1.DURATION_EVENT_DATE ~= . AND T1.DURATION_EVENT_DATE = T1.WODT THEN T1.DURATION_EVENT_DATE - 
            T1.ORIGDT
              ELSE 0
            END) LABEL="WO_DURATION_DAYS" AS WO_DURATION_DAYS, 
          /* WOB_DURATION_COUNT */
            (CASE
              WHEN T1.DURATION_EVENT_DATE ~= . AND T1.DURATION_EVENT_DATE = T1.WOBDT THEN 1
              ELSE 0
            END) LABEL="WOB_DURATION_COUNT" AS WOB_DURATION_COUNT, 
          /* WOB_DURATION_DAYS */
            (CASE
              WHEN T1.DURATION_EVENT_DATE ~= . AND T1.DURATION_EVENT_DATE = T1.WOBDT THEN T1.DURATION_EVENT_DATE - 
            T1.ORIGDT
              ELSE 0
            END) LABEL="WOB_DURATION_DAYS" AS WOB_DURATION_DAYS, 
          /* WOD_DURATION_COUNT */
            (CASE
              WHEN T1.DURATION_EVENT_DATE ~= . AND T1.DURATION_EVENT_DATE = T1.WODDT THEN 1
              ELSE 0
            END) LABEL="WOD_DURATION_COUNT" AS WOD_DURATION_COUNT, 
          /* WOD_DURATION_DAYS */
            (CASE
              WHEN T1.DURATION_EVENT_DATE ~= . AND T1.DURATION_EVENT_DATE = T1.WODDT THEN T1.DURATION_EVENT_DATE - 
            T1.ORIGDT
              ELSE 0
            END) LABEL="WOD_DURATION_DAYS" AS WOD_DURATION_DAYS, 
          /* REPAID_DURATION_COUNT */
            (CASE
              WHEN T1.DURATION_EVENT_DATE ~= . AND T1.DURATION_EVENT_DATE = T1.REPAIDDT THEN 1
              ELSE 0
            END) LABEL="REPAID_DURATION_COUNT" AS REPAID_DURATION_COUNT, 
          /* REPAID_DURATION_DAYS */
            (CASE
              WHEN T1.DURATION_EVENT_DATE ~= . AND T1.DURATION_EVENT_DATE = T1.REPAIDDT THEN T1.DURATION_EVENT_DATE - 
            T1.ORIGDT
              ELSE 0
            END) LABEL="REPAID_DURATION_DAYS" AS REPAID_DURATION_DAYS, 
          T1.ORIG_PRNC_AMT, 
          T1.INT_CHRG_AMT, 
          T1.SDB_FEE_CHRG_AMT, 
          T1.NSF_FEE_CHRG_AMT, 
          T1.MTH_HNDL_FEE_CHRG_AMT, 
          T1.ACQSN_FEE_CHRG_AMT
      FROM WORK.QFUND12_UNIQUEORIGS_TMP1 T1;
%RUNQUIT(&job,&sub2);

PROC SQL;
   CREATE TABLE WORK.QFUND12_AGGREGATE_DURATION AS 
   SELECT DISTINCT T1.STATECD, 
          T1.DURATION_EVENT_DATE AS BUSINESSDT, 
          T1.LOCNBR, 
          /* DEFAULT_DURATION_COUNT */
            (SUM(T1.DEFAULT_DURATION_COUNT)) AS DEFAULT_DURATION_COUNT, 
          /* DEFAULT_DURATION_DAYS */
            (SUM(T1.DEFAULT_DURATION_DAYS)) AS DEFAULT_DURATION_DAYS, 
          /* WO_DURATION_COUNT */
            (SUM(T1.WO_DURATION_COUNT)) AS WO_DURATION_COUNT, 
          /* WO_DURATION_DAYS */
            (SUM(T1.WO_DURATION_DAYS)) AS WO_DURATION_DAYS, 
          /* WOB_DURATION_COUNT */
            (SUM(T1.WOB_DURATION_COUNT)) AS WOB_DURATION_COUNT, 
          /* WOB_DURATION_DAYS */
            (SUM(T1.WOB_DURATION_DAYS)) AS WOB_DURATION_DAYS, 
          /* WOD_DURATION_COUNT */
            (SUM(T1.WOD_DURATION_COUNT)) AS WOD_DURATION_COUNT, 
          /* WOD_DURATION_DAYS */
            (SUM(T1.WOD_DURATION_DAYS)) AS WOD_DURATION_DAYS, 
          /* REPAID_DURATION_COUNT */
            (SUM(T1.REPAID_DURATION_COUNT)) AS REPAID_DURATION_COUNT, 
          /* REPAID_DURATION_DAYS */
            (SUM(T1.REPAID_DURATION_DAYS)) AS REPAID_DURATION_DAYS, 
          /* ACTUAL_DURATION_ADVAMT */
            (SUM(T1.ORIG_PRNC_AMT)) LABEL="ACTUAL_DURATION_ADVAMT" AS ACTUAL_DURATION_ADVAMT, 
          /* ACTUAL_DURATION_FEES */
            
            (SUM(SUM(T1.INT_CHRG_AMT,T1.SDB_FEE_CHRG_AMT,T1.NSF_FEE_CHRG_AMT,T1.MTH_HNDL_FEE_CHRG_AMT,T1.ACQSN_FEE_CHRG_AMT))) 
            AS ACTUAL_DURATION_FEES
      FROM WORK.QFUND12_UNIQUEORIGS_TMP2 T1
      WHERE T1.DURATION_EVENT_DATE NOT IS MISSING
      GROUP BY T1.STATECD,
               T1.DURATION_EVENT_DATE,
               T1.LOCNBR
      ORDER BY T1.LOCNBR,
               T1.DURATION_EVENT_DATE;
%RUNQUIT(&job,&sub2);

PROC SQL;
   CREATE TABLE WORK.ORIGINATIONS AS 
   SELECT T1.LOAN_SNAP_DT, 
          T1.ST_CD, 
          T1.LOC_NBR, 
          T1.LOAN_NBR, 
          T1.CUST_NBR, 
          T1.PROD_CD, 
          T1.FNCL_STAT_TXT, 
          T1.DAYS_DLNQT_QTY, 
          T1.INSTL_LOAN_CNT, 
          T1.INSTL_PYMNT_FREQ_CD, 
          T1.ORIG_DT, 
          T1.DFLT_DT, 
          T1.WO_AGE_DT, 
          T1.WO_BNKRPT_DT, 
          T1.WO_DCSD_DT, 
          T1.FRST_PRSNTMT_DT, 
          T1.RCNT_PRSNTMT_DT, 
          T1.FRST_RTN_DT, 
          T1.RCNT_RTN_DT, 
          T1.FRST_REPRSNTMT_DT, 
          T1.RCNT_REPRSNTMT_DT, 
          T1.REPAID_DT, 
          T1.TTL_PAID_AMT, 
          T1.CRRNT_BLNC_AMT, 
          T1.ORIG_PRNC_AMT, 
          T1.PRNC_PAID_AMT, 
          T1.PRNC_BLNC_AMT, 
          T1.INT_CHRG_AMT, 
          T1.INT_PAID_AMT, 
          T1.SDB_FEE_CHRG_AMT, 
          T1.SDB_FEE_PAID_AMT, 
          T1.SDB_FEE_BLNC_AMT, 
          T1.NSF_FEE_CHRG_AMT, 
          T1.NSF_FEE_PAID_AMT, 
          T1.NSF_FEE_WVD_AMT, 
          T1.NSF_FEE_BLNC_AMT, 
          T1.INT_BLNC_AMT, 
          T1.INT_RBT_AMT, 
          T1.MTH_HNDL_FEE_CHRG_AMT, 
          T1.MTH_HNDL_FEE_PAID_AMT, 
          T1.MTH_HNDL_FEE_RBT_AMT, 
          T1.MTH_HNDL_FEE_BLNC_AMT, 
          T1.ACQSN_FEE_CHRG_AMT, 
          T1.ACQSN_FEE_PAID_AMT, 
          T1.ACQSN_FEE_RBT_AMT, 
          T1.ACQSN_FEE_BLNC_AMT
      FROM WORK.QFUND12_ORIGINATIONS2YEARS2 T1
      WHERE T1.LOAN_SNAP_DT = T1.ORIG_DT;
%RUNQUIT(&job,&sub2);

PROC SQL;
   CREATE TABLE WORK.VOIDED_LOANS AS 
   SELECT DISTINCT T1.ST_CD, 
          T1.LOAN_NBR
      FROM WORK.QFUND12_ORIGINATIONS2YEARS2 T1
      WHERE T1.FNCL_STAT_TXT = 'VOID/RESCIND';
%RUNQUIT(&job,&sub2);


PROC SQL;
   CREATE TABLE WORK.NONVOIDED_LOANS AS 
   SELECT T1.LOAN_SNAP_DT, 
          T1.ST_CD, 
          T1.LOC_NBR, 
          T1.LOAN_NBR, 
          T1.CUST_NBR, 
          T1.PROD_CD, 
          T1.FNCL_STAT_TXT, 
          T1.DAYS_DLNQT_QTY, 
          T1.INSTL_LOAN_CNT, 
          T1.INSTL_PYMNT_FREQ_CD, 
          T1.ORIG_DT, 
          T1.DFLT_DT, 
          T1.WO_AGE_DT, 
          T1.WO_BNKRPT_DT, 
          T1.WO_DCSD_DT, 
          T1.FRST_PRSNTMT_DT, 
          T1.RCNT_PRSNTMT_DT, 
          T1.FRST_RTN_DT, 
          T1.RCNT_RTN_DT, 
          T1.FRST_REPRSNTMT_DT, 
          T1.RCNT_REPRSNTMT_DT, 
          T1.REPAID_DT, 
          T1.TTL_PAID_AMT, 
          T1.CRRNT_BLNC_AMT, 
          T1.ORIG_PRNC_AMT, 
          T1.PRNC_PAID_AMT, 
          T1.PRNC_BLNC_AMT, 
          T1.INT_CHRG_AMT, 
          T1.INT_PAID_AMT, 
          T1.SDB_FEE_CHRG_AMT, 
          T1.SDB_FEE_PAID_AMT, 
          T1.SDB_FEE_BLNC_AMT, 
          T1.NSF_FEE_CHRG_AMT, 
          T1.NSF_FEE_PAID_AMT, 
          T1.NSF_FEE_WVD_AMT, 
          T1.NSF_FEE_BLNC_AMT, 
          T1.INT_BLNC_AMT, 
          T1.INT_RBT_AMT, 
          T1.MTH_HNDL_FEE_CHRG_AMT, 
          T1.MTH_HNDL_FEE_PAID_AMT, 
          T1.MTH_HNDL_FEE_RBT_AMT, 
          T1.MTH_HNDL_FEE_BLNC_AMT, 
          T1.ACQSN_FEE_CHRG_AMT, 
          T1.ACQSN_FEE_PAID_AMT, 
          T1.ACQSN_FEE_RBT_AMT, 
          T1.ACQSN_FEE_BLNC_AMT
      FROM WORK.ORIGINATIONS T1
           LEFT JOIN WORK.VOIDED_LOANS T2 ON (T1.LOAN_NBR = T2.LOAN_NBR) AND (T1.ST_CD = T2.ST_CD)
      WHERE T2.LOAN_NBR IS MISSING AND T2.ST_CD IS MISSING;
%RUNQUIT(&job,&sub2);


PROC SQL;
   CREATE TABLE WORK.ADVFEEAMT AS 
   SELECT /* BUSINESSDT */
            (DATEPART(T1.LOAN_SNAP_DT)) FORMAT=MMDDYY10. AS BUSINESSDT, 
          T1.LOC_NBR, 
          /* ADVFEEAMT */
            (SUM(SUM(T1.INT_CHRG_AMT,T1.SDB_FEE_CHRG_AMT,T1.MTH_HNDL_FEE_CHRG_AMT,T1.ACQSN_FEE_CHRG_AMT))) AS ADVFEEAMT
      FROM WORK.NONVOIDED_LOANS T1
      GROUP BY (CALCULATED BUSINESSDT),
               T1.LOC_NBR;
%RUNQUIT(&job,&sub2);


PROC SQL;
   CREATE TABLE WORK.QF1_PD_COMB AS 
   SELECT /* PRODUCT */
            ("INSTALLMENT") LABEL="PRODUCT" AS PRODUCT, 
          T1.ST_CODE AS LOCNBR, 
          /* BUSINESSDT */
            (DATEPART(T1.BUSINESS_DATE)) FORMAT=MMDDYY10. LABEL="BUSINESSDT" AS BUSINESSDT, 
          /* BEGIN_DT */
            (INTNX('MONTH',TODAY(),-24,'B')) FORMAT=MMDDYY10. LABEL="BEGIN_DT" AS BEGIN_DT, 
          /* PASTDUECNT_1 */
            (SUM(T1.PASTDUE_LOAN_CNT_01_09)) FORMAT=11. AS PASTDUECNT_1, 
          /* PASTDUEAMT_1 */
            (SUM(T1.PASTDUE_LOAN_AMT_01_09)) FORMAT=12.2 AS PASTDUEAMT_1, 
          /* PASTDUECNT_2 */
            (SUM(T1.PASTDUE_LOAN_CNT_GRT10)) FORMAT=11. AS PASTDUECNT_2, 
          /* PASTDUEAMT_2 */
            (SUM(T1.PASTDUE_LOAN_AMT_GRT10)) FORMAT=12.2 AS PASTDUEAMT_2, 
          /* END_DT */
            (INTNX('DAY',TODAY(),-1,'B')) FORMAT=MMDDYY10. LABEL="END_DT" AS END_DT
      FROM QFUND1.PAST_DUE_ILP T1
      WHERE (CALCULATED BUSINESSDT) BETWEEN (CALCULATED BEGIN_DT) AND (CALCULATED END_DT)
      GROUP BY (CALCULATED PRODUCT),
               T1.ST_CODE,
               (CALCULATED BUSINESSDT),
               (CALCULATED BEGIN_DT),
               (CALCULATED END_DT)
      ORDER BY T1.ST_CODE,
               BUSINESSDT;
%RUNQUIT(&job,&sub2);


PROC SQL;
   CREATE TABLE WORK.QF1_PD_COMB_RECODE AS 
   SELECT DISTINCT T1.PRODUCT, 
          T1.LOCNBR, 
          T1.BUSINESSDT, 
          /* PASTDUEAMT_1 */
            (CASE 
               WHEN . = T1.PASTDUEAMT_1 THEN 0
               ELSE T1.PASTDUEAMT_1
            END) FORMAT=12.2 LABEL="PASTDUEAMT_1" AS PASTDUEAMT_1, 
          /* PASTDUECNT_1 */
            (CASE 
               WHEN . = T1.PASTDUECNT_1 THEN 0
               ELSE T1.PASTDUECNT_1
            END) FORMAT=11. LABEL="PASTDUECNT_1" AS PASTDUECNT_1, 
          /* PASTDUEAMT_2 */
            (CASE 
               WHEN . = T1.PASTDUEAMT_2 THEN 0
               ELSE T1.PASTDUEAMT_2
            END) FORMAT=12.2 LABEL="PASTDUEAMT_2" AS PASTDUEAMT_2, 
          /* PASTDUECNT_2 */
            (CASE 
               WHEN . = T1.PASTDUECNT_2 THEN 0
               ELSE T1.PASTDUECNT_2
            END) FORMAT=11. LABEL="PASTDUECNT_2" AS PASTDUECNT_2
      FROM WORK.QF1_PD_COMB T1
      ORDER BY T1.LOCNBR,
               T1.PRODUCT,
               T1.BUSINESSDT;
%RUNQUIT(&job,&sub2);


PROC SQL;
   CREATE TABLE WORK.REFI_CNT AS 
   SELECT T1.STORE_NUMBER, 
          /* BUSINESSDT */
            (DATEPART(T1.TRAN_DATE)) FORMAT=MMDDYY10. AS BUSINESSDT, 
          /* REFINANCE_CNT */
            (SUM(T1.TODAY_COUNT)) AS REFINANCE_CNT
      FROM QFUND1.DAILY_CENTER_SUMMARY T1
      WHERE T1.PRODUCT_TYPE = 'ILP' AND T1.DESCRIPTION = 'Cash Agains' AND T1.TRAN_DATE >= INTNX('MONTH',TODAY(),-24,'B')
      GROUP BY T1.STORE_NUMBER,
               (CALCULATED BUSINESSDT);
%RUNQUIT(&job,&sub2);


PROC SQL;
   CREATE TABLE WORK.QF1_ILP_PNL AS 
   SELECT T1.STORE_NUMBER, 
          T1.SOURCE_SYSTEM, 
          T1.PRODUCT_TYPE, 
          /* BUSINESSDT */
            (DATEPART(T1.BUSINESS_DATE)) FORMAT=MMDDYY10. AS BUSINESSDT, 
          T1.BAD_DEBT AS GROSS_WRITE_OFF, 
          T1.BADDEBT_PMT AS WOR, 
          T1.PNL_AMT AS GROSS_REVENUE
      FROM EDW.QF_BADDEBT_PNLAMT T1
      WHERE T1.SOURCE_SYSTEM = 'QFUND1' AND T1.PRODUCT_TYPE = 'ILP';
%RUNQUIT(&job,&sub2);


PROC SQL;
   CREATE TABLE WORK.DEFAULT_PMTS_PRE AS 
   SELECT T1.LOC_ID, 
          /* TRANDT */
            (DATEPART(T1.TRAN_DTM)) FORMAT=MMDDYY10. AS TRANDT, 
          /* DEFAULT_PMT */
            (SUM(-T1.DFLT_AMT)) AS DEFAULT_PMT
      FROM EDW.LOANTRANSACTION T1
      WHERE T1.TRAN_TYPE_CD = 'DEFP'
      GROUP BY T1.LOC_ID,
               (CALCULATED TRANDT);
%RUNQUIT(&job,&sub2);


PROC SQL;
   CREATE TABLE WORK.DEFAULT_PMTS AS 
   SELECT T2.LOC_NBR AS LOC_ID, 
          T1.TRANDT, 
          T1.DEFAULT_PMT
      FROM WORK.DEFAULT_PMTS_PRE T1
           LEFT JOIN EDW.LOCATION T2 ON (T1.LOC_ID = T2.LOC_ID);
%RUNQUIT(&job,&sub2);


PROC SQL;
   CREATE TABLE WORK.DEFAULT_AMT_CNT_PRE AS 
   SELECT T1.LOC_ID, 
          /* TRANDT */
            (DATEPART(T1.TRAN_DTM)) FORMAT=MMDDYY10. AS TRANDT, 
          /* DEFAULT_AMT */
            (SUM(T1.DFLT_AMT)) FORMAT=8.2 AS DEFAULT_AMT, 
          /* DEFAULT_CNT */
            (COUNT(T1.LOAN_ID)) AS DEFAULT_CNT
      FROM EDW.LOANTRANSACTION T1
      WHERE T1.TRAN_TYPE_CD = 'DEF'
      GROUP BY T1.LOC_ID,
               (CALCULATED TRANDT);
%RUNQUIT(&job,&sub2);


PROC SQL;
   CREATE TABLE WORK.DEFAULT_AMT_CNT AS 
   SELECT T2.LOC_NBR AS LOCNBR, 
          T1.TRANDT, 
          T1.DEFAULT_AMT, 
          T1.DEFAULT_CNT
      FROM WORK.DEFAULT_AMT_CNT_PRE T1
           LEFT JOIN EDW.LOCATION T2 ON (T1.LOC_ID = T2.LOC_ID);
%RUNQUIT(&job,&sub2);


PROC SQL;
   CREATE TABLE WORK.QFUND1_DAILYSUMMARY AS 
   SELECT T2.PRODUCT, 
          T2.POS, 
          T2.INSTANCE, 
          T2.BANKMODEL, 
          T2.BRANDCD, 
          T2.COUNTRYCD, 
          T2.STATE, 
          T2.CITY, 
          T2.ZIP, 
          T2.BUSINESS_UNIT, 
          T2.ZONENBR, 
          T2.ZONENAME, 
          T2.REGIONNBR, 
          T2.REGIONRDO, 
          T2.DIVISIONNBR, 
          T2.DIVISIONDDO, 
          T2.LOCNBR, 
          T2.LOCATION_NAME, 
          T2.LOC_OPEN_DT, 
          T2.LOC_CLOSE_DT, 
          T2.BUSINESSDT, 
          T2.BEGINDT, 
          T2.ADVCNT, 
          T2.ADVAMTSUM, 
          T3.ADVFEEAMT, 
          T2.EARNEDFEES, 
          T2.NEWCUSTDEALCNT, 
          T2.TOTADVRECV, 
          T2.TOTADVFEERECV, 
          T2.DEFAULTCNT, 
          T2.TOTDEFAULTRECV, 
          T2.HELDCNT, 
          T2.DEFAULTAMT, 
          T8.REFINANCE_CNT, 
          T2.WOAMTSUM, 
          T2.WOCNT, 
          T2.WOBAMTSUM, 
          T2.WOBCNT, 
          T2.WODCNT, 
          T2.WORAMTSUM, 
          T2.AGNADVSUM, 
          T2.AGNCNT, 
          /* DEFAULT_DURATION_COUNT */
            (CASE 
               WHEN . = T1.DEFAULT_DURATION_COUNT THEN 0
               ELSE T1.DEFAULT_DURATION_COUNT
            END) AS DEFAULT_DURATION_COUNT, 
          /* DEFAULT_DURATION_DAYS */
            (CASE 
               WHEN . = T1.DEFAULT_DURATION_DAYS THEN 0
               ELSE T1.DEFAULT_DURATION_DAYS
            END) AS DEFAULT_DURATION_DAYS, 
          /* WO_DURATION_COUNT */
            (CASE 
               WHEN . = T1.WO_DURATION_COUNT THEN 0
               ELSE T1.WO_DURATION_COUNT
            END) AS WO_DURATION_COUNT, 
          /* WO_DURATION_DAYS */
            (CASE 
               WHEN . = T1.WO_DURATION_DAYS THEN 0
               ELSE T1.WO_DURATION_DAYS
            END) AS WO_DURATION_DAYS, 
          /* WOB_DURATION_COUNT */
            (CASE 
               WHEN . = T1.WOB_DURATION_COUNT THEN 0
               ELSE T1.WOB_DURATION_COUNT
            END) AS WOB_DURATION_COUNT, 
          /* WOB_DURATION_DAYS */
            (CASE 
               WHEN . = T1.WOB_DURATION_DAYS THEN 0
               ELSE T1.WOB_DURATION_DAYS
            END) AS WOB_DURATION_DAYS, 
          /* WOD_DURATION_COUNT */
            (CASE 
               WHEN . = T1.WOD_DURATION_COUNT THEN 0
               ELSE T1.WOD_DURATION_COUNT
            END) AS WOD_DURATION_COUNT, 
          /* WOD_DURATION_DAYS */
            (CASE 
               WHEN . = T1.WOD_DURATION_DAYS THEN 0
               ELSE T1.WOD_DURATION_DAYS
            END) AS WOD_DURATION_DAYS, 
          /* REPAID_DURATION_COUNT */
            (CASE 
               WHEN . = T1.REPAID_DURATION_COUNT THEN 0
               ELSE T1.REPAID_DURATION_COUNT
            END) AS REPAID_DURATION_COUNT, 
          /* REPAID_DURATION_DAYS */
            (CASE 
               WHEN . = T1.REPAID_DURATION_DAYS THEN 0
               ELSE T1.REPAID_DURATION_DAYS
            END) AS REPAID_DURATION_DAYS, 
          T2.SUBSTITUTEROW, 
          /* ACTUAL_DURATION_ADVAMT */
            (CASE 
               WHEN . = T1.ACTUAL_DURATION_ADVAMT THEN 0
               ELSE T1.ACTUAL_DURATION_ADVAMT
            END) AS ACTUAL_DURATION_ADVAMT, 
          /* ACTUAL_DURATION_FEES */
            (CASE 
               WHEN . = T1.ACTUAL_DURATION_FEES THEN 0
               ELSE T1.ACTUAL_DURATION_FEES
            END) AS ACTUAL_DURATION_FEES, 
          /* PASTDUEAMT_1 */
            (CASE 
               WHEN . = T4.PASTDUEAMT_1 THEN 0
               ELSE T4.PASTDUEAMT_1
            END) FORMAT=12.2 LABEL="PASTDUEAMT_1" AS PASTDUEAMT_1, 
          /* PASTDUECNT_1 */
            (CASE 
               WHEN . = T4.PASTDUECNT_1 THEN 0
               ELSE T4.PASTDUECNT_1
            END) FORMAT=11. LABEL="PASTDUECNT_1" AS PASTDUECNT_1, 
          /* PASTDUEAMT_2 */
            (CASE 
               WHEN . = T4.PASTDUEAMT_2 THEN 0
               ELSE T4.PASTDUEAMT_2
            END) FORMAT=12.2 LABEL="PASTDUEAMT_2" AS PASTDUEAMT_2, 
          /* PASTDUECNT_2 */
            (CASE 
               WHEN . = T4.PASTDUECNT_2 THEN 0
               ELSE T4.PASTDUECNT_2
            END) FORMAT=11. LABEL="PASTDUECNT_2" AS PASTDUECNT_2, 
          T5.CURRENT_PWO_AMT, 
          T5.NEXT_MONTH_PWO_AMT, 
          T5.NEXT_2_MONTH_PWO_AMT, 
          T6.DEFAULT_PMT, 
          T7.DEFAULT_AMT, 
          T7.DEFAULT_CNT, 
          T9.GROSS_WRITE_OFF, 
          T9.WOR, 
          T9.GROSS_REVENUE, 
          /* MONTH */
            (MONTH(T2.BUSINESSDT)) AS MONTH, 
          /* YEAR */
            (YEAR(T2.BUSINESSDT)) AS YEAR
      FROM WORK.REFI_CNT T8
           RIGHT JOIN (WORK.DEFAULT_AMT_CNT T7
           RIGHT JOIN (WORK.DEFAULT_PMTS T6
           RIGHT JOIN (WORK.QF1_PD_COMB_RECODE T4
           RIGHT JOIN (WORK.ADVFEEAMT T3
           RIGHT JOIN (WORK.QFUND12_AGGREGATE_DURATION T1
           RIGHT JOIN WORK.QFUND12_DAILYSUMMARY_TMP1 T2 ON (T1.LOCNBR = T2.LOCNBR) AND (T1.BUSINESSDT = T2.BUSINESSDT)) 
          ON (T3.BUSINESSDT = T2.BUSINESSDT) AND (T3.LOC_NBR = T2.LOCNBR)) ON (T4.LOCNBR = T2.LOCNBR) AND 
          (T4.BUSINESSDT = T2.BUSINESSDT) AND (T4.PRODUCT = T2.PRODUCT)
           LEFT JOIN WORK.PWO_QFUND1 T5 ON (T2.LOCNBR = T5.LOCNBR) AND (T2.BUSINESSDT = T5.BUSINESSDT)) ON (T6.LOC_ID = 
          T2.LOCNBR) AND (T6.TRANDT = T2.BUSINESSDT)) ON (T7.LOCNBR = T2.LOCNBR) AND (T7.TRANDT = T2.BUSINESSDT)) ON 
          (T8.BUSINESSDT = T2.BUSINESSDT) AND (T8.STORE_NUMBER = T2.LOCNBR)
           LEFT JOIN WORK.QF1_ILP_PNL T9 ON (T2.LOCNBR = T9.STORE_NUMBER) AND (T2.BUSINESSDT = T9.BUSINESSDT);
%RUNQUIT(&job,&sub2);

PROC SQL;
	CREATE TABLE QFUND1_DAILYSUMMARY AS
		SELECT T1.*
			  ,CASE WHEN T2.BEGIN_PWO_AMT = . THEN 0 ELSE T2.BEGIN_PWO_AMT END AS BEGIN_PWO_AMT
		FROM WORK.QFUND1_DAILYSUMMARY T1
		LEFT JOIN 
		WORK.BEGIN_PWO_AMT T2
		ON (T1.LOCNBR = T2.LOCNBR AND
			T1.MONTH = T2.MONTH AND 
			T1.YEAR = T2.YEAR)
		WHERE T1.BUSINESSDT >= TODAY() - 10

;
%RUNQUIT(&job,&sub2);

PROC SQL;
   CREATE TABLE WORK.QFUND1_NEW_ORIGINATIONS AS 
   SELECT T1.PRODUCT, 
          T1.POS, 
          T1.INSTANCE, 
          T1.BRANDCD, 
          T1.BANKMODEL, 
          T1.COUNTRYCD, 
          T1.STATE, 
          T1.CITY, 
          T1.ZIP, 
          T1.BUSINESS_UNIT, 
          T1.ZONENBR, 
          T1.ZONENAME, 
          T1.REGIONNBR, 
          T1.REGIONRDO, 
          T1.DIVISIONNBR, 
          T1.DIVISIONDDO, 
          T1.LOCNBR, 
          T1.LOCATION_NAME, 
          T1.LOC_OPEN_DT, 
          T1.LOC_CLOSE_DT, 
          T1.BUSINESSDT, 
          /* NEW_ORIGINATIONS */
            (SUM(T1.ADVCNT,T1.AGNCNT)) AS NEW_ORIGINATIONS, 
          /* NEW_ADV_AMT */
            (SUM(T1.ADVAMTSUM,T1.AGNADVSUM)) AS NEW_ADV_AMT, 
          T1.ADVFEEAMT AS NEW_ADVFEE_AMT, 
          T1.TOTADVRECV, 
          T1.TOTADVFEERECV, 
          /* COMPLIANT_LOANS_OUTSTANDING */
            (T1.HELDCNT) AS COMPLIANT_LOANS_OUTSTANDING, 
          T1.DEFAULTCNT AS DEFAULT_LOANS_OUTSTANDING, 
          T1.TOTDEFAULTRECV, 
          T1.WOAMTSUM, 
          T1.WOCNT, 
          T1.WOBAMTSUM, 
          /* WOBCNT */
            (SUM(T1.WOBCNT,T1.WODCNT)) AS WOBCNT, 
          /* WORAMTSUM */
            (CASE WHEN T1.BUSINESSDT < '01APR2017'D THEN T1.WORAMTSUM ELSE 0 END) AS WORAMTSUM, 
          T1.PASTDUEAMT_1, 
          T1.PASTDUECNT_1, 
          T1.PASTDUEAMT_2, 
          T1.PASTDUECNT_2, 
          T1.REFINANCE_CNT, 
          /* GROSS_REVENUE */
            (CASE WHEN T1.BUSINESSDT < '01APR2017'D THEN (T1.EARNEDFEES) ELSE 0 END) AS GROSS_REVENUE, 
          /* GROSS_WRITE_OFF */
            (CASE WHEN T1.BUSINESSDT < '01APR2017'D THEN (SUM(T1.WOAMTSUM,T1.WOBAMTSUM)) ELSE 0 END) AS GROSS_WRITE_OFF, 
          /* NET_WRITE_OFF */
            (CASE WHEN T1.BUSINESSDT < '01APR2017'D THEN ((SUM(T1.WOAMTSUM,T1.WOBAMTSUM)) - T1.WORAMTSUM) ELSE 0 END) 
            AS NET_WRITE_OFF, 
          /* NET_REVENUE */
            (CASE WHEN T1.BUSINESSDT < '01APR2017'D THEN ((T1.EARNEDFEES) - ((SUM(T1.WOAMTSUM,T1.WOBAMTSUM)) - 
            T1.WORAMTSUM)) ELSE 0 END) AS NET_REVENUE, 
          T1.BEGIN_PWO_AMT, 
          T1.CURRENT_PWO_AMT, 
          T1.NEXT_MONTH_PWO_AMT, 
          T1.NEXT_2_MONTH_PWO_AMT, 
          T1.DEFAULT_PMT, 
          T1.DEFAULT_AMT, 
          T1.DEFAULT_CNT, 
          /* ACTUAL_DURATION_COUNT */
            (SUM(T1.DEFAULT_DURATION_COUNT,T1.WO_DURATION_COUNT,T1.WOB_DURATION_COUNT,T1.WOD_DURATION_COUNT,T1.REPAID_DURATION_COUNT)) 
            AS ACTUAL_DURATION_COUNT, 
          T1.ACTUAL_DURATION_ADVAMT, 
          /* ACTUAL_DURATION_DAYS */
            (SUM(T1.DEFAULT_DURATION_DAYS,T1.WO_DURATION_DAYS,T1.WOB_DURATION_DAYS,T1.WOD_DURATION_DAYS,T1.REPAID_DURATION_DAYS)) 
            AS ACTUAL_DURATION_DAYS, 
          T1.ACTUAL_DURATION_FEES, 
          T1.ADVCNT, 
          T1.AGNCNT, 
          T1.ADVAMTSUM, 
          T1.AGNADVSUM, 
          T1.HELDCNT, 
          /* PRODUCT_DESC */
            (CASE
              WHEN STATE IN ('IL', 'WI', 'DE', 'CO') THEN "IPDL"
              ELSE "MULTISTATE INSTALLMENT"
            END) AS PRODUCT_DESC
      FROM QFUND1_DAILYSUMMARY T1;
%RUNQUIT(&job,&sub2);

LIBNAME EDW ORACLE
	USER=&USER
	PW=&PASSWORD
	PATH=EDWPRD
	SCHEMA=EDW;

DATA PNL_INTIAL_PULL;
	SET EDW.QF_BADDEBT_PNLAMT;
	BUSINESSDT = DATEPART(BUSINESS_DATE);
	WHERE BUSINESS_DATE >= '01APR2017:00:00:00'DT;
	FORMAT BUSINESSDT MMDDYY10.;
%RUNQUIT(&job,&sub2);

PROC SQL;
	CREATE TABLE WORK.QFUND_PNL AS 
		SELECT 
			STORE_NUMBER AS LOCNBR
		   ,CASE WHEN SOURCE_SYSTEM = 'QFUND5' THEN 'QFUND5-6' ELSE SOURCE_SYSTEM END AS INSTANCE
		   ,PRODUCT_TYPE
		   ,BUSINESSDT
		   ,BAD_DEBT AS GROSS_WRITE_OFF
		   ,-BADDEBT_PMT AS WORAMTSUM
		   ,-PNL_AMT AS GROSS_REVENUE
		   ,SUM(BAD_DEBT,BADDEBT_PMT) AS NET_WRITE_OFF
		   ,SUM(-PNL_AMT,(-SUM(BAD_DEBT,BADDEBT_PMT))) AS NET_REVENUE
		FROM WORK.PNL_INTIAL_PULL
	WHERE COMPRESS(PRODUCT_TYPE) ^= 'MISC'
;
%RUNQUIT(&job,&sub2);

/*-------------*/
/* QFUND 1 ILP */
/*-------------*/
PROC SQL;
	CREATE TABLE QFUND1_ILP AS
		SELECT
		    CASE WHEN COMPRESS(PRODUCT_TYPE) = 'ILP' THEN 'INSTALLMENT' 
			     ELSE PRODUCT_TYPE 
            END AS PRODUCT
		   ,CASE WHEN LOC.ST_PVC_CD IN('IL','WI','DE','CO') THEN 'IPDL'
		         ELSE 'MULTISTATE INSTALLMENT'
		    END AS PRODUCT_DESC
		   ,'QFUND' AS POS
		   ,INSTANCE
		   ,'STANDARD' AS BANKMODEL
		   ,LOC.BRND_CD AS BRANDCD
		   ,LOC.CTRY_CD AS COUNTRYCD
		   ,LOC.ST_PVC_CD AS STATE
		   ,LOC.ADR_CITY_NM AS CITY
		   ,LOC.MAIL_CD AS ZIP
		   ,LOC.BUSN_UNIT_ID AS BUSINESS_UNIT
		   ,LOC.HIER_ZONE_NBR AS ZONENBR
		   ,LOC.HIER_ZONE_NM AS ZONENAME
		   ,LOC.HIER_RGN_NBR AS REGIONNBR
		   ,LOC.HIER_RDO_NM AS REGIONRDO
		   ,LOC.HIER_DIV_NBR AS DIVISIONNBR
		   ,LOC.HIER_DDO_NM AS DIVISIONDDO
		   ,LOCNBR
		   ,LOC.LOC_NM AS LOCATION_NAME
		   ,LOC.OPEN_DT AS LOC_OPEN_DT
		   ,LOC.CLS_DT AS LOC_CLOSE_DT
		   ,BUSINESSDT
		   ,GROSS_WRITE_OFF
		   ,NET_WRITE_OFF
		   ,WORAMTSUM
		   ,NET_REVENUE
		   ,GROSS_REVENUE
		FROM WORK.QFUND_PNL PNL
		LEFT JOIN 
		EDW.D_LOCATION LOC
		ON(PNL.LOCNBR=LOC.LOC_NBR)
	WHERE COMPRESS(PRODUCT_TYPE) = 'ILP' AND INSTANCE = 'QFUND1'
;
%RUNQUIT(&job,&sub2);

PROC SQL;
CREATE TABLE WORK.RU1_LENDINGPRODUCTS_ROLLUP_PRE AS 
	SELECT * FROM WORK.QFUND1_NEW_ORIGINATIONS
		OUTER UNION CORR 
	SELECT * FROM QFUND1_ILP
;
%RUNQUIT(&job,&sub2);


PROC SQL;
   CREATE TABLE RU1_LENDINGPRODUCTS_ROLLUP AS 
   SELECT t1.Product, 
          t1.PRODUCT_DESC, 
          t1.pos, 
          t1.INSTANCE, 
          t1.brandcd, 
          t1.bankmodel, 
          t1.COUNTRYCD, 
          t1.STATE, 
          t1.CITY, 
          t1.ZIP, 
          t1.BUSINESS_UNIT, 
          t1.ZONENBR, 
          t1.ZONENAME, 
          t1.REGIONNBR, 
          t1.REGIONRDO, 
          t1.DIVISIONNBR, 
          t1.DIVISIONDDO, 
          t1.LOCNBR, 
          t1.Location_Name, 
          t1.LOC_OPEN_DT, 
          t1.LOC_CLOSE_DT, 
          t1.BusinessDt, 
          /* NEW_ORIGINATIONS */
            (SUM(t1.NEW_ORIGINATIONS)) AS NEW_ORIGINATIONS, 
          /* NEW_ADV_AMT */
            (SUM(t1.NEW_ADV_AMT)) AS NEW_ADV_AMT, 
          /* NEW_ADVFEE_AMT */
            (SUM(t1.NEW_ADVFEE_AMT)) AS NEW_ADVFEE_AMT, 
          /* TOTADVRECV */
            (SUM(t1.TOTADVRECV)) FORMAT=12.2 AS TOTADVRECV, 
          /* TOTADVFEERECV */
            (SUM(t1.TOTADVFEERECV)) FORMAT=10.2 AS TOTADVFEERECV, 
          /* COMPLIANT_LOANS_OUTSTANDING */
            (SUM(t1.COMPLIANT_LOANS_OUTSTANDING)) AS COMPLIANT_LOANS_OUTSTANDING, 
          /* DEFAULT_LOANS_OUTSTANDING */
            (SUM(t1.DEFAULT_LOANS_OUTSTANDING)) AS DEFAULT_LOANS_OUTSTANDING, 
          /* TOTDEFAULTRECV */
            (SUM(t1.TOTDEFAULTRECV)) FORMAT=12.2 AS TOTDEFAULTRECV, 
          /* TOTDEFAULTFEERECV */
            (SUM(0)) FORMAT=10.2 AS TOTDEFAULTFEERECV, 
          /* NSF_AMOUNT */
            (SUM(0)) FORMAT=10.2 AS NSF_AMOUNT, 
          /* NSF_PAYMENT_AMOUNT */
            (SUM(0)) FORMAT=10.2 AS NSF_PAYMENT_AMOUNT, 
          /* NSF_PREPAYMENT_AMOUNT */
            (SUM(0)) FORMAT=10.2 AS NSF_PREPAYMENT_AMOUNT, 
          /* WOCNT */
            (SUM(t1.WOCNT)) AS WOCNT, 
          /* WOAMTSUM */
            (SUM(t1.WOAMTSUM)) FORMAT=14.2 AS WOAMTSUM, 
          /* WOBAMTSUM */
            (SUM(t1.WOBAMTSUM)) FORMAT=10.2 AS WOBAMTSUM, 
          /* WOBCNT */
            (SUM(t1.WOBCNT)) AS WOBCNT, 
          /* WORCNT */
            (SUM(0)) AS WORCNT, 
          /* WORAMTSUM */
            (SUM(t1.WORAMTSUM)) FORMAT=10.2 AS WORAMTSUM, 
          /* CASHAGAIN_COUNT */
            (SUM(0)) AS CASHAGAIN_COUNT, 
          /* BUYBACK_COUNT */
            (SUM(0)) AS BUYBACK_COUNT, 
          /* DEPOSIT_COUNT */
            (SUM(0)) AS DEPOSIT_COUNT, 
          /* BEGIN_PWO_AMT */
            (SUM(t1.BEGIN_PWO_AMT)) AS BEGIN_PWO_AMT, 
          /* CURRENT_PWO_AMT */
            (SUM(t1.CURRENT_PWO_AMT)) AS CURRENT_PWO_AMT, 
          /* NEXT_MONTH_PWO_AMT */
            (SUM(t1.NEXT_MONTH_PWO_AMT)) AS NEXT_MONTH_PWO_AMT, 
          /* NEXT_2_MONTH_PWO_AMT */
            (SUM(t1.NEXT_2_MONTH_PWO_AMT)) AS NEXT_2_MONTH_PWO_AMT, 
          /* DEFAULT_PMT */
            (SUM(t1.DEFAULT_PMT)) FORMAT=10.2 AS DEFAULT_PMT, 
          /* DEFAULT_CNT */
            (SUM(t1.DEFAULT_CNT)) AS DEFAULT_CNT, 
          /* DEFAULT_AMT */
            (SUM(t1.DEFAULT_AMT)) FORMAT=10.2 AS DEFAULT_AMT, 
          /* GROSS_REVENUE */
            (SUM(t1.GROSS_REVENUE)) FORMAT=10.2 AS GROSS_REVENUE, 
          /* GROSS_WRITE_OFF */
            (SUM(t1.GROSS_WRITE_OFF)) FORMAT=10.2 AS GROSS_WRITE_OFF, 
          /* NET_WRITE_OFF */
            (SUM(t1.NET_WRITE_OFF)) FORMAT=10.2 AS NET_WRITE_OFF, 
          /* NET_REVENUE */
            (SUM(t1.NET_REVENUE)) FORMAT=10.2 AS NET_REVENUE, 
          /* ACTUAL_DURATION_COUNT */
            (SUM(t1.ACTUAL_DURATION_COUNT)) AS ACTUAL_DURATION_COUNT, 
          /* ACTUAL_DURATION_DAYS */
            (SUM(t1.ACTUAL_DURATION_DAYS)) AS ACTUAL_DURATION_DAYS, 
          /* ACTUAL_DURATION_ADVAMT */
            (SUM(t1.ACTUAL_DURATION_ADVAMT)) AS ACTUAL_DURATION_ADVAMT, 
          /* ACTUAL_DURATION_FEES */
            (SUM(t1.ACTUAL_DURATION_FEES)) AS ACTUAL_DURATION_FEES, 
          /* AVGDURATIONDAYS */
            (SUM(0)) AS AVGDURATIONDAYS, 
          /* AVGDURATIONCNT */
            (SUM(0)) AS AVGDURATIONCNT, 
          /* HELDCNT */
            (SUM(t1.HELDCNT)) AS HELDCNT, 
          /* PASTDUECNT_1 */
            (SUM(t1.PASTDUECNT_1)) AS PASTDUECNT_1, 
          /* PASTDUEAMT_1 */
            (SUM(t1.PASTDUEAMT_1)) FORMAT=12.2 AS PASTDUEAMT_1, 
          /* OVERSHORTAMT */
            (SUM(0)) AS OVERSHORTAMT, 
          /* HOLDOVERAMT */
            (SUM(0)) AS HOLDOVERAMT, 
          /* ADVAMTSUM */
            (SUM(t1.ADVAMTSUM)) FORMAT=14.2 AS ADVAMTSUM, 
          /* AGNADVSUM */
            (SUM(t1.AGNADVSUM)) FORMAT=14.2 AS AGNADVSUM, 
          /* REPMTPLANCNT */
            (SUM(0)) AS REPMTPLANCNT, 
          /* ADVCNT */
            (SUM(t1.ADVCNT)) AS ADVCNT, 
          /* AVGADVAMT */
            (SUM(0)) FORMAT=10.2 AS AVGADVAMT, 
          /* AVGDURATION */
            (SUM(0)) FORMAT=10.2 AS AVGDURATION, 
          /* AVGFEEAMT */
            (SUM(0)) FORMAT=10.2 AS AVGFEEAMT, 
          /* PASTDUEAMT_2 */
            (SUM(t1.PASTDUEAMT_2)) FORMAT=12.2 AS PASTDUEAMT_2, 
          /* PASTDUECNT_2 */
            (SUM(t1.PASTDUECNT_2)) FORMAT=11. AS PASTDUECNT_2, 
          /* REFINANCE_CNT */
            (SUM(t1.REFINANCE_CNT)) AS REFINANCE_CNT, 
          /* AGNCNT */
            (SUM(t1.AGNCNT)) AS AGNCNT, 
          /* POSSESSION_AMT */
            (SUM(0)) FORMAT=21.4 AS POSSESSION_AMT, 
          /* POSSESSION_CNT */
            (SUM(0)) AS POSSESSION_CNT, 
          /* PASTDUEAMT_3 */
            (SUM(0)) FORMAT=21.4 AS PASTDUEAMT_3, 
          /* PASTDUECNT_3 */
            (SUM(0)) AS PASTDUECNT_3, 
          /* PASTDUEAMT_4 */
            (SUM(0)) FORMAT=21.4 AS PASTDUEAMT_4, 
          /* PASTDUECNT_4 */
            (SUM(0)) AS PASTDUECNT_4, 
          /* PASTDUEAMT_5 */
            (SUM(0)) FORMAT=21.4 AS PASTDUEAMT_5, 
          /* PASTDUECNT_5 */
            (SUM(0)) AS PASTDUECNT_5, 
          /* PASTDUEAMT_6 */
            (SUM(0)) FORMAT=21.4 AS PASTDUEAMT_6, 
          /* PASTDUECNT_6 */
            (SUM(0)) AS PASTDUECNT_6, 
          /* BLACK_BOOK_VALUE */
            (SUM(0)) AS BLACK_BOOK_VALUE, 
          /* SOLD_AMOUNT */
            (SUM(0)) FORMAT=21.4 AS SOLD_AMOUNT, 
          /* agnamtsum */
            (SUM(0)) AS agnamtsum, 
          /* RCC_IN_PROCESS */
            (SUM(0)) AS RCC_IN_PROCESS, 
          /* RCC_INELIGIBLE */
            (SUM(0)) FORMAT=11. AS RCC_INELIGIBLE, 
          /* ADVAMT */
            (SUM(0)) FORMAT=12.2 AS ADVAMT, 
          /* CASHAGAIN_AMOUNT */
            (SUM(0)) FORMAT=12.2 AS CASHAGAIN_AMOUNT, 
          /* SOLD_COUNT */
            (SUM(0)) FORMAT=12.2 AS SOLD_COUNT, 
          /* NET_WRITE_OFF_NEW */
            (SUM(0)) AS NET_WRITE_OFF_NEW, 
          /* GROSS_REVENUE_NEW */
            (SUM(0)) AS GROSS_REVENUE_NEW, 
          /* GROSS_WRITE_OFF_NEW */
            (SUM(0)) FORMAT=12.2 AS GROSS_WRITE_OFF_NEW, 
          /* NET_REVENUE_NEW */
            (SUM(0)) AS NET_REVENUE_NEW, 
          /* WORAMTSUM_OLD */
            (SUM(0)) FORMAT=12.2 AS WORAMTSUM_OLD, 
          /* FIRST_PRESENTMENT_CNT */
            (SUM(0)) AS FIRST_PRESENTMENT_CNT, 
          /* SATISFIED_PAYMENT_CNT */
            (SUM(0)) AS SATISFIED_PAYMENT_CNT, 
          /* DEL_RECV_AMT */
            (SUM(0)) AS DEL_RECV_AMT, 
          /* DEL_RECV_CNT */
            (SUM(0)) AS DEL_RECV_CNT
      FROM WORK.RU1_LENDINGPRODUCTS_ROLLUP_PRE T1
      GROUP BY T1.PRODUCT,
               T1.PRODUCT_DESC,
               T1.POS,
               T1.INSTANCE,
               T1.BRANDCD,
               T1.BANKMODEL,
               T1.COUNTRYCD,
               T1.STATE,
               T1.CITY,
               T1.ZIP,
               T1.BUSINESS_UNIT,
               T1.ZONENBR,
               T1.ZONENAME,
               T1.REGIONNBR,
               T1.REGIONRDO,
               T1.DIVISIONNBR,
               T1.DIVISIONDDO,
               T1.LOCNBR,
               T1.LOCATION_NAME,
               T1.LOC_OPEN_DT,
               T1.LOC_CLOSE_DT,
               T1.BUSINESSDT;
%RUNQUIT(&job,&sub2);

%INCLUDE "\\CSSSASAPP\CADA\SAS SOURCE CODE\PRODUCTION\SERVICE ACCOUNTS\SVC_SASUSER.SAS";
%INCLUDE "E:\SHARED\CADA\SAS SOURCE CODE\PRODUCTION\STDM\STDM_LIBRARY_SCRIPT.SAS";
LIBNAME SKYNET "E:\SHARED\CADA\SAS DATA\DATAMART\STDM";
LIBNAME NORECV "E:\SHARED\CADA\SAS DATA\DATAMART\SCOCHRAN";

%LET ENDINGDT = INTNX('DAY',TODAY(),-1,'BEGINNING');

DATA _NULL_;
	CALL SYMPUTX('END_DT',PUT(&ENDINGDT,YYMMDDN8.),G);
%RUNQUIT(&job,&sub2);

DATA WORK.A&END_DT;
	X = &ENDINGDT;
	FORMAT X MMDDYY10.;
%RUNQUIT(&job,&sub2);

LIBNAME BIOR ORACLE
	USER=&USER
	PW=&PASSWORD
	PATH=BIOR
	SCHEMA=BIOR;

DATA THURSDAYDATES_TMP1;
	DO I = "1JAN2000"D TO TODAY();
		BUSINESSDT = I;
		DAYNAME = COMPRESS(PUT(BUSINESSDT,DOWNAME.));
		OUTPUT;
	END;
	FORMAT BUSINESSDT MMDDYY10.;
%RUNQUIT(&job,&sub2);

PROC SQL;
	CREATE TABLE THURSDAYDATES_TMP2 AS
		SELECT T1.*, T2.HOLIDAYNAME
		  FROM THURSDAYDATES_TMP1 T1
			LEFT JOIN BIOR.I_HOLIDAYS T2 ON (T1.BUSINESSDT = DATEPART(T2.HOLIDAY_DT))
		 ORDER BY T1.BUSINESSDT DESC;
%RUNQUIT(&job,&sub2);

DATA THURSDAYDATES_TMP3;
	SET THURSDAYDATES_TMP2;
	PRIORDAYHOLIDAY = LAG1(HOLIDAYNAME);
	PRIORDATE = LAG1(BUSINESSDT);
	IF UPCASE(DAYNAME) = 'THURSDAY'
		AND BUSINESSDT ~= INTNX('MONTH',BUSINESSDT,0,'END')
		AND HOLIDAYNAME = ''
		THEN THURSDAYWEEK = 'Y';
	ELSE
		IF UPCASE(DAYNAME) = 'WEDNESDAY'
			AND (PRIORDAYHOLIDAY ~= ''
			 OR PRIORDATE = INTNX('MONTH',BUSINESSDT,0,'END'))
			THEN THURSDAYWEEK = 'Y';
	ELSE
		THURSDAYWEEK = 'N';
	FORMAT PRIORDATE MMDDYY10.;
%RUNQUIT(&job,&sub2);

DATA DAILY_SUMMARY_ALL_QF1;
	SET RU1_LENDINGPRODUCTS_ROLLUP;
		LAST_REPORT_DT = INTNX('DAY',TODAY(),-1);
		LASTTHURSDAYOFMONTH = INTNX('WEEK.5',INTNX('MONTH',BUSINESSDT,0,'END'),0);
		IF LASTTHURSDAYOFMONTH = INTNX('MONTH',BUSINESSDT,0,'END') 
		   	OR LASTTHURSDAYOFMONTH = HOLIDAY('VETERANSUSG',YEAR(BUSINESSDT))
			OR LASTTHURSDAYOFMONTH = HOLIDAY('VETERANS',YEAR(BUSINESSDT))
			OR LASTTHURSDAYOFMONTH = HOLIDAY('THANKSGIVING',YEAR(BUSINESSDT))
			OR LASTTHURSDAYOFMONTH = HOLIDAY('CHRISTMAS',YEAR(BUSINESSDT)) 
				THEN LASTTHURSDAYOFMONTH = INTNX('DAY',LASTTHURSDAYOFMONTH,-1);
		FORMAT LASTTHURSDAYOFMONTH MMDDYY10.;
	IF BUSINESSDT = LASTTHURSDAYOFMONTH THEN LASTTHURSDAY = 'Y';
			ELSE LASTTHURSDAY = 'N';
	DROP LASTTHURSDAYOFMONTH;
	FORMAT LAST_REPORT_DT MMDDYY10.;
%RUNQUIT(&job,&sub2);

PROC SQL;
	CREATE TABLE WORK.DAILY_SUMMARY_ALL_TMP3 AS
		SELECT T1.*, T2.THURSDAYWEEK
          FROM DAILY_SUMMARY_ALL_QF1 T1, WORK.THURSDAYDATES_TMP3 T2
		 WHERE T1.BUSINESSDT = T2.BUSINESSDT;
%RUNQUIT(&job,&sub2);

PROC SORT DATA=DAILY_SUMMARY_ALL_TMP3;
	BY LOCNBR BUSINESSDT;
%RUNQUIT(&job,&sub2);

DATA LAST_REPORT_DATE;
	SET DAILY_SUMMARY_ALL_TMP3;
	BY LOCNBR BUSINESSDT;
	LOC_LAST_REPORTED_DT = BUSINESSDT;
	IF LAST.LOCNBR THEN OUTPUT;
	KEEP LOCNBR LOC_LAST_REPORTED_DT;
	FORMAT LOC_LAST_REPORTED_DT MMDDYY10.;
%RUNQUIT(&job,&sub2);


PROC SQL;
   CREATE TABLE WORK.HOLIDAYS(LABEL="HOLIDAYS") AS 
   SELECT /* HOLIDAYDT */
            (DATEPART(T1.HOLIDAY_DT)) FORMAT=MMDDYY10. LABEL="HOLIDAYDT" AS HOLIDAYDT, 
          T1.HOLIDAYNAME
      FROM BIOR.I_HOLIDAYS T1;
%RUNQUIT(&job,&sub2);


PROC SQL;
   CREATE TABLE WORK.DAILY_SUMMARY_ALL_TMP4 AS 
   SELECT T1.PRODUCT, 
          T1.PRODUCT_DESC, 
          T1.POS, 
          T1.INSTANCE, 
          T1.BRANDCD, 
          T1.BANKMODEL, 
          T1.COUNTRYCD, 
          T1.STATE, 
          T1.ZIP, 
          T1.CITY, 
          T1.BUSINESS_UNIT, 
          T1.ZONENBR, 
          T1.ZONENAME, 
          T1.REGIONNBR, 
          T1.REGIONRDO, 
          T1.DIVISIONNBR, 
          T1.DIVISIONDDO, 
          T1.LOCNBR, 
          T1.LOCATION_NAME, 
          T1.LOC_OPEN_DT, 
          T1.LOC_CLOSE_DT, 
          T1.BUSINESSDT, 
          T1.LASTTHURSDAY, 
          T2.HOLIDAYNAME, 
          T1.THURSDAYWEEK, 
          T1.LAST_REPORT_DT, 
          T1.NEW_ORIGINATIONS, 
          T1.NEW_ADV_AMT, 
          T1.NEW_ADVFEE_AMT, 
          T1.TOTADVRECV, 
          T1.TOTADVFEERECV, 
          T1.COMPLIANT_LOANS_OUTSTANDING, 
          T1.DEFAULT_LOANS_OUTSTANDING, 
          T1.TOTDEFAULTRECV, 
          T1.TOTDEFAULTFEERECV, 
          T1.NSF_AMOUNT, 
          T1.NSF_PAYMENT_AMOUNT, 
          T1.NSF_PREPAYMENT_AMOUNT, 
          T1.WOAMTSUM, 
          T1.WOCNT, 
          T1.WOBAMTSUM, 
          T1.WOBCNT, 
          T1.WORAMTSUM, 
          T1.WORCNT, 
          T1.CASHAGAIN_COUNT, 
          T1.BUYBACK_COUNT, 
          T1.DEPOSIT_COUNT, 
          T1.GROSS_REVENUE, 
          T1.GROSS_WRITE_OFF, 
          T1.NET_WRITE_OFF, 
          T1.NET_REVENUE, 
          T1.BEGIN_PWO_AMT, 
          T1.CURRENT_PWO_AMT, 
          T1.NEXT_MONTH_PWO_AMT, 
          T1.NEXT_2_MONTH_PWO_AMT, 
          T1.RCC_IN_PROCESS, 
          T1.RCC_INELIGIBLE, 
          T1.DEL_RECV_AMT, 
          T1.DEL_RECV_CNT, 
          T1.DEFAULT_PMT, 
          T1.DEFAULT_CNT, 
          T1.DEFAULT_AMT, 
          T1.ACTUAL_DURATION_COUNT, 
          T1.ACTUAL_DURATION_DAYS, 
          T1.ACTUAL_DURATION_ADVAMT, 
          T1.ACTUAL_DURATION_FEES, 
          T1.BLACK_BOOK_VALUE, 
          T1.PASTDUECNT_1, 
          T1.PASTDUEAMT_1, 
          T1.PASTDUEAMT_2, 
          T1.PASTDUECNT_2, 
          T1.PASTDUEAMT_3, 
          T1.PASTDUECNT_3, 
          T1.PASTDUEAMT_4, 
          T1.PASTDUECNT_4, 
          T1.PASTDUEAMT_5, 
          T1.PASTDUECNT_5, 
          T1.PASTDUEAMT_6, 
          T1.PASTDUECNT_6, 
          T1.REFINANCE_CNT, 
          T1.OVERSHORTAMT, 
          T1.HOLDOVERAMT, 
          T1.FIRST_PRESENTMENT_CNT, 
          T1.SATISFIED_PAYMENT_CNT, 
          T1.POSSESSION_AMT, 
          T1.POSSESSION_CNT, 
          T1.SOLD_AMOUNT, 
          T1.SOLD_COUNT, 
          T1.REPMTPLANCNT AS REPMTPLANCNT1, 
          T1.ADVCNT, 
          T1.AVGADVAMT, 
          T1.AVGDURATION, 
          T1.AVGFEEAMT, 
          T1.ADVAMTSUM, 
          T1.AVGDURATIONDAYS, 
          T1.AVGDURATIONCNT, 
          T1.HELDCNT, 
          T1.REPMTPLANCNT, 
          T1.AGNCNT
      FROM WORK.DAILY_SUMMARY_ALL_TMP3 T1
           LEFT JOIN WORK.HOLIDAYS T2 ON (T1.BUSINESSDT = T2.HOLIDAYDT);
%RUNQUIT(&job,&sub2);

PROC SQL;
   CREATE TABLE WORK.DAILY_SUMMARY_ALL_PRELOAD1_PRE AS 
   SELECT DISTINCT T1.PRODUCT, 
          T1.PRODUCT_DESC, 
          T1.POS, 
          T1.INSTANCE, 
          T1.BRANDCD, 
          T1.BANKMODEL, 
          T1.COUNTRYCD, 
          T1.STATE, 
          T1.CITY, 
          T1.ZIP, 
          T1.BUSINESS_UNIT, 
          T1.ZONENBR, 
          T1.ZONENAME, 
          T1.REGIONNBR, 
          T1.REGIONRDO, 
          T1.DIVISIONNBR, 
          T1.DIVISIONDDO, 
          T1.LOCNBR, 
          T1.LOCATION_NAME, 
          T1.LOC_OPEN_DT, 
          T1.LOC_CLOSE_DT, 
          T1.BUSINESSDT, 
          /* LAST_REPORT_DT */
            (CASE WHEN WEEKDAY(TODAY()) = 2 THEN TODAY()-2 ELSE TODAY()-1 END) FORMAT=MMDDYY10. AS LAST_REPORT_DT, 
          T2.LOC_LAST_REPORTED_DT, 
          T3.LATITUDE, 
          T3.LONGITUDE, 
          T1.HOLIDAYNAME, 
          T1.LASTTHURSDAY, 
          T1.THURSDAYWEEK, 
          /* NEW_ADV_AMT */
            (CASE 
               WHEN . = T1.NEW_ADV_AMT THEN 0
               ELSE T1.NEW_ADV_AMT
            END) AS NEW_ADV_AMT, 
          /* NEW_ORIGINATIONS */
            (CASE 
               WHEN . = T1.NEW_ORIGINATIONS THEN 0
               ELSE T1.NEW_ORIGINATIONS
            END) AS NEW_ORIGINATIONS, 
          /* NEW_ADVFEE_AMT */
            (CASE 
               WHEN . = T1.NEW_ADVFEE_AMT THEN 0
               ELSE T1.NEW_ADVFEE_AMT
            END) AS NEW_ADVFEE_AMT, 
          /* TOTADVRECV */
            (CASE 
               WHEN . = T1.TOTADVRECV THEN 0
               ELSE T1.TOTADVRECV
            END) FORMAT=22.2 AS TOTADVRECV, 
          /* TOTADVFEERECV */
            (CASE 
               WHEN . = T1.TOTADVFEERECV THEN 0
               ELSE T1.TOTADVFEERECV
            END) FORMAT=10.2 AS TOTADVFEERECV, 
          /* DEFAULT_LOANS_OUTSTANDING */
            (CASE 
               WHEN . = T1.DEFAULT_LOANS_OUTSTANDING THEN 0
               ELSE T1.DEFAULT_LOANS_OUTSTANDING
            END) AS DEFAULT_LOANS_OUTSTANDING, 
          /* COMPLIANT_LOANS_OUTSTANDING */
            (CASE 
               WHEN . = T1.COMPLIANT_LOANS_OUTSTANDING THEN 0
               ELSE T1.COMPLIANT_LOANS_OUTSTANDING
            END) AS COMPLIANT_LOANS_OUTSTANDING, 
          /* TOTDEFAULTRECV */
            (CASE 
               WHEN . = T1.TOTDEFAULTRECV THEN 0
               ELSE T1.TOTDEFAULTRECV
            END) FORMAT=22.2 AS TOTDEFAULTRECV, 
          /* TOTDEFAULTFEERECV */
            (CASE 
               WHEN . = T1.TOTDEFAULTFEERECV THEN 0
               ELSE T1.TOTDEFAULTFEERECV
            END) FORMAT=10.2 AS TOTDEFAULTFEERECV, 
          /* NSF_AMOUNT */
            (CASE 
               WHEN . = T1.NSF_AMOUNT THEN 0
               ELSE T1.NSF_AMOUNT
            END) FORMAT=10.2 AS NSF_AMOUNT, 
          /* NSF_PAYMENT_AMOUNT */
            (CASE 
               WHEN . = T1.NSF_PAYMENT_AMOUNT THEN 0
               ELSE T1.NSF_PAYMENT_AMOUNT
            END) FORMAT=10.2 AS NSF_PAYMENT_AMOUNT, 
          /* NSF_PREPAYMENT_AMOUNT */
            (CASE 
               WHEN . = T1.NSF_PREPAYMENT_AMOUNT THEN 0
               ELSE T1.NSF_PREPAYMENT_AMOUNT
            END) FORMAT=10.2 AS NSF_PREPAYMENT_AMOUNT, 
          /* WOAMTSUM */
            (CASE 
               WHEN . = T1.WOAMTSUM THEN 0
               ELSE T1.WOAMTSUM
            END) FORMAT=22.2 AS WOAMTSUM, 
          /* WOCNT */
            (CASE 
               WHEN . = T1.WOCNT THEN 0
               ELSE T1.WOCNT
            END) AS WOCNT, 
          /* WOBAMTSUM */
            (CASE 
               WHEN . = T1.WOBAMTSUM THEN 0
               ELSE T1.WOBAMTSUM
            END) FORMAT=10.2 AS WOBAMTSUM, 
          /* WOBCNT */
            (CASE 
               WHEN . = T1.WOBCNT THEN 0
               ELSE T1.WOBCNT
            END) AS WOBCNT, 
          /* WORAMTSUM */
            (CASE 
               WHEN . = T1.WORAMTSUM THEN 0
               ELSE T1.WORAMTSUM
            END) FORMAT=22.2 AS WORAMTSUM, 
          /* WORCNT */
            (CASE 
               WHEN . = T1.WORCNT THEN 0
               ELSE T1.WORCNT
            END) AS WORCNT, 
          /* CASHAGAIN_COUNT */
            (CASE 
               WHEN . = T1.CASHAGAIN_COUNT THEN 0
               ELSE T1.CASHAGAIN_COUNT
            END) AS CASHAGAIN_COUNT, 
          /* BUYBACK_COUNT */
            (CASE 
               WHEN . = T1.BUYBACK_COUNT THEN 0
               ELSE T1.BUYBACK_COUNT
            END) AS BUYBACK_COUNT, 
          /* DEPOSIT_COUNT */
            (CASE 
               WHEN . = T1.DEPOSIT_COUNT THEN 0
               ELSE T1.DEPOSIT_COUNT
            END) AS DEPOSIT_COUNT, 
          /* GROSS_REVENUE */
            (CASE 
               WHEN . = T1.GROSS_REVENUE THEN 0
               ELSE T1.GROSS_REVENUE
            END) FORMAT=22.2 AS GROSS_REVENUE, 
          /* GROSS_WRITE_OFF */
            (CASE 
               WHEN . = T1.GROSS_WRITE_OFF THEN 0
               ELSE T1.GROSS_WRITE_OFF
            END) FORMAT=22.2 AS GROSS_WRITE_OFF, 
          /* NET_WRITE_OFF */
            (CASE 
               WHEN . = T1.NET_WRITE_OFF THEN 0
               ELSE T1.NET_WRITE_OFF
            END) FORMAT=22.2 AS NET_WRITE_OFF, 
          /* NET_REVENUE */
            (CASE 
               WHEN . = T1.NET_REVENUE THEN 0
               ELSE T1.NET_REVENUE
            END) FORMAT=22.2 AS NET_REVENUE, 
          /* BEGIN_PWO_AMT */
            (CASE 
               WHEN . = T1.BEGIN_PWO_AMT THEN 0
               ELSE T1.BEGIN_PWO_AMT
            END) AS BEGIN_PWO_AMT, 
          /* CURRENT_PWO_AMT */
            (CASE 
               WHEN . = T1.CURRENT_PWO_AMT THEN 0
               ELSE T1.CURRENT_PWO_AMT
            END) AS CURRENT_PWO_AMT, 
          /* NEXT_MONTH_PWO_AMT */
            (CASE 
               WHEN . = T1.NEXT_MONTH_PWO_AMT THEN 0
               ELSE T1.NEXT_MONTH_PWO_AMT
            END) AS NEXT_MONTH_PWO_AMT, 
          /* NEXT_2_MONTH_PWO_AMT */
            (CASE 
               WHEN . = T1.NEXT_2_MONTH_PWO_AMT THEN 0
               ELSE T1.NEXT_2_MONTH_PWO_AMT
            END) AS NEXT_2_MONTH_PWO_AMT, 
          /* RCC_IN_PROCESS */
            (CASE 
               WHEN . = T1.RCC_IN_PROCESS THEN 0
               ELSE T1.RCC_IN_PROCESS
            END) AS RCC_IN_PROCESS, 
          /* RCC_INELIGIBLE */
            (CASE 
               WHEN . = T1.RCC_INELIGIBLE THEN 0
               ELSE T1.RCC_INELIGIBLE
            END) FORMAT=11. AS RCC_INELIGIBLE, 
          /* DEL_RECV_AMT */
            (CASE 
               WHEN . = T1.DEL_RECV_AMT THEN 0
               ELSE T1.DEL_RECV_AMT
            END) AS DEL_RECV_AMT, 
          /* DEL_RECV_CNT */
            (CASE 
               WHEN . = T1.DEL_RECV_CNT THEN 0
               ELSE T1.DEL_RECV_CNT
            END) AS DEL_RECV_CNT, 
          /* DEFAULT_PMT */
            (CASE 
               WHEN . = T1.DEFAULT_PMT THEN 0
               ELSE T1.DEFAULT_PMT
            END) FORMAT=10.2 AS DEFAULT_PMT, 
          /* DEFAULT_CNT */
            (CASE 
               WHEN . = T1.DEFAULT_CNT THEN 0
               ELSE T1.DEFAULT_CNT
            END) AS DEFAULT_CNT, 
          /* DEFAULT_AMT */
            (CASE 
               WHEN . = T1.DEFAULT_AMT THEN 0
               ELSE T1.DEFAULT_AMT
            END) FORMAT=10.2 AS DEFAULT_AMT, 
          /* ACTUAL_DURATION_COUNT */
            (CASE 
               WHEN . = T1.ACTUAL_DURATION_COUNT THEN 0
               ELSE T1.ACTUAL_DURATION_COUNT
            END) AS ACTUAL_DURATION_COUNT, 
          /* ACTUAL_DURATION_DAYS */
            (CASE 
               WHEN . = T1.ACTUAL_DURATION_DAYS THEN 0
               ELSE T1.ACTUAL_DURATION_DAYS
            END) AS ACTUAL_DURATION_DAYS, 
          /* ACTUAL_DURATION_ADVAMT */
            (CASE 
               WHEN . = T1.ACTUAL_DURATION_ADVAMT THEN 0
               ELSE T1.ACTUAL_DURATION_ADVAMT
            END) AS ACTUAL_DURATION_ADVAMT, 
          /* ACTUAL_DURATION_FEES */
            (CASE 
               WHEN . = T1.ACTUAL_DURATION_FEES THEN 0
               ELSE T1.ACTUAL_DURATION_FEES
            END) AS ACTUAL_DURATION_FEES, 
          /* AVGDURATIONDAYS */
            (CASE 
               WHEN . = T1.AVGDURATIONDAYS THEN 0
               ELSE T1.AVGDURATIONDAYS
            END) AS AVGDURATIONDAYS, 
          /* AVGDURATIONCNT */
            (CASE 
               WHEN . = T1.AVGDURATIONCNT THEN 0
               ELSE T1.AVGDURATIONCNT
            END) AS AVGDURATIONCNT, 
          /* BLACK_BOOK_VALUE */
            (CASE 
               WHEN . = T1.BLACK_BOOK_VALUE THEN 0
               ELSE T1.BLACK_BOOK_VALUE
            END) AS BLACK_BOOK_VALUE, 
          /* PASTDUECNT_1 */
            (CASE 
               WHEN . = T1.PASTDUECNT_1 THEN 0
               ELSE T1.PASTDUECNT_1
            END) AS PASTDUECNT_1, 
          /* PASTDUEAMT_1 */
            (CASE 
               WHEN . = T1.PASTDUEAMT_1 THEN 0
               ELSE T1.PASTDUEAMT_1
            END) FORMAT=12.2 AS PASTDUEAMT_1, 
          /* PASTDUEAMT_2 */
            (CASE 
               WHEN . = T1.PASTDUEAMT_2 THEN 0
               ELSE T1.PASTDUEAMT_2
            END) FORMAT=12.2 AS PASTDUEAMT_2, 
          /* PASTDUECNT_2 */
            (CASE 
               WHEN . = T1.PASTDUECNT_2 THEN 0
               ELSE T1.PASTDUECNT_2
            END) FORMAT=11. AS PASTDUECNT_2, 
          /* PASTDUEAMT_3 */
            (CASE 
               WHEN . = T1.PASTDUEAMT_3 THEN 0
               ELSE T1.PASTDUEAMT_3
            END) FORMAT=21.4 AS PASTDUEAMT_3, 
          /* PASTDUECNT_3 */
            (CASE 
               WHEN . = T1.PASTDUECNT_3 THEN 0
               ELSE T1.PASTDUECNT_3
            END) AS PASTDUECNT_3, 
          /* PASTDUEAMT_4 */
            (CASE 
               WHEN . = T1.PASTDUEAMT_4 THEN 0
               ELSE T1.PASTDUEAMT_4
            END) FORMAT=21.4 AS PASTDUEAMT_4, 
          /* PASTDUECNT_4 */
            (CASE 
               WHEN . = T1.PASTDUECNT_4 THEN 0
               ELSE T1.PASTDUECNT_4
            END) AS PASTDUECNT_4, 
          /* PASTDUEAMT_5 */
            (CASE 
               WHEN . = T1.PASTDUEAMT_5 THEN 0
               ELSE T1.PASTDUEAMT_5
            END) FORMAT=21.4 AS PASTDUEAMT_5, 
          /* PASTDUECNT_5 */
            (CASE 
               WHEN . = T1.PASTDUECNT_5 THEN 0
               ELSE T1.PASTDUECNT_5
            END) AS PASTDUECNT_5, 
          /* PASTDUEAMT_6 */
            (CASE 
               WHEN . = T1.PASTDUEAMT_6 THEN 0
               ELSE T1.PASTDUEAMT_6
            END) FORMAT=21.4 AS PASTDUEAMT_6, 
          /* PASTDUECNT_6 */
            (CASE 
               WHEN . = T1.PASTDUECNT_6 THEN 0
               ELSE T1.PASTDUECNT_6
            END) AS PASTDUECNT_6, 
          /* REFINANCE_CNT */
            (CASE 
               WHEN . = T1.REFINANCE_CNT THEN 0
               ELSE T1.REFINANCE_CNT
            END) AS REFINANCE_CNT, 
          /* OVERSHORTAMT */
            (CASE 
               WHEN . = T1.OVERSHORTAMT THEN 0
               ELSE T1.OVERSHORTAMT
            END) AS OVERSHORTAMT, 
          /* HOLDOVERAMT */
            (CASE 
               WHEN . = T1.HOLDOVERAMT THEN 0
               ELSE T1.HOLDOVERAMT
            END) AS HOLDOVERAMT, 
          /* FIRST_PRESENTMENT_CNT */
            (CASE 
               WHEN . = T1.FIRST_PRESENTMENT_CNT THEN 0
               ELSE T1.FIRST_PRESENTMENT_CNT
            END) AS FIRST_PRESENTMENT_CNT, 
          /* SATISFIED_PAYMENT_CNT */
            (CASE 
               WHEN . = T1.SATISFIED_PAYMENT_CNT THEN 0
               ELSE T1.SATISFIED_PAYMENT_CNT
            END) AS SATISFIED_PAYMENT_CNT, 
          /* POSSESSION_AMT */
            (CASE 
               WHEN . = T1.POSSESSION_AMT THEN 0
               ELSE T1.POSSESSION_AMT
            END) FORMAT=21.4 AS POSSESSION_AMT, 
          /* POSSESSION_CNT */
            (CASE 
               WHEN . = T1.POSSESSION_CNT THEN 0
               ELSE T1.POSSESSION_CNT
            END) AS POSSESSION_CNT, 
          /* SOLD_AMOUNT */
            (CASE 
               WHEN . = T1.SOLD_AMOUNT THEN 0
               ELSE T1.SOLD_AMOUNT
            END) FORMAT=21.4 AS SOLD_AMOUNT, 
          /* SOLD_COUNT */
            (CASE 
               WHEN . = T1.SOLD_COUNT THEN 0
               ELSE T1.SOLD_COUNT
            END) FORMAT=12.2 AS SOLD_COUNT, 
          /* ADVCNT */
            (CASE 
               WHEN . = T1.ADVCNT THEN 0
               ELSE T1.ADVCNT
            END) AS ADVCNT, 
          /* AVGADVAMT */
            (CASE 
               WHEN . = T1.AVGADVAMT THEN 0
               ELSE T1.AVGADVAMT
            END) FORMAT=10.2 AS AVGADVAMT, 
          /* AVGDURATION */
            (CASE 
               WHEN . = T1.AVGDURATION THEN 0
               ELSE T1.AVGDURATION
            END) FORMAT=10.2 AS AVGDURATION, 
          /* AVGFEEAMT */
            (CASE 
               WHEN . = T1.AVGFEEAMT THEN 0
               ELSE T1.AVGFEEAMT
            END) FORMAT=10.2 AS AVGFEEAMT, 
          /* ADVAMTSUM */
            (CASE 
               WHEN . = T1.ADVAMTSUM THEN 0
               ELSE T1.ADVAMTSUM
            END) FORMAT=14.2 AS ADVAMTSUM, 
          /* HELDCNT */
            (CASE 
               WHEN . = T1.HELDCNT THEN 0
               ELSE T1.HELDCNT
            END) AS HELDCNT, 
          /* REPMTPLANCNT */
            (CASE 
               WHEN . = T1.REPMTPLANCNT THEN 0
               ELSE T1.REPMTPLANCNT
            END) AS REPMTPLANCNT, 
          /* AGNCNT */
            (CASE 
               WHEN . = T1.AGNCNT THEN 0
               ELSE T1.AGNCNT
            END) AS AGNCNT
      FROM WORK.DAILY_SUMMARY_ALL_TMP4 T1
           INNER JOIN WORK.LAST_REPORT_DATE T2 ON (T1.LOCNBR = T2.LOCNBR)
           LEFT JOIN SKYNET.LOCATION_LATLONG T3 ON (T1.LOCNBR = T3.LOCNBR)
           LEFT JOIN SKYNET.PS2_LENDING_REVEXP T5 ON (T1.PRODUCT = T5.PRODUCT) AND (T1.POS = T5.POS) AND (T1.INSTANCE = 
          T5.INSTANCE) AND (T1.LOCNBR = T5.LOCNBR) AND (T1.BUSINESSDT = T5.BUSINESSDT)
      WHERE T1.BUSINESSDT BETWEEN INTNX('MONTH',TODAY(),-24,'B') AND TODAY()-1
      ORDER BY T1.LOCNBR,
               T1.BUSINESSDT,
               T1.PRODUCT,
               T1.INSTANCE,
               T1.PRODUCT_DESC;
%RUNQUIT(&job,&sub2);


DATA DAILY_SUMMARY_ALL_PRE;
/*	LENGTH WOAMTSUM GROSS_WRITE_OFF NET_WRITE_OFF NET_REVENUE 8;*/
	SET WORK.DAILY_SUMMARY_ALL_PRELOAD1_PRE;
		IF PRODUCT_DESC ^= "AL ETL" AND SUM(NEW_ADV_AMT,
		   NEW_ORIGINATIONS,
		   NEW_ADVFEE_AMT,
		   TOTADVRECV,
		   TOTADVFEERECV,
		   COMPLIANT_LOANS_OUTSTANDING,
		   DEFAULT_LOANS_OUTSTANDING,
		   TOTDEFAULTRECV,
		   TOTDEFAULTFEERECV,
		   NSF_AMOUNT,
		   NSF_PAYMENT_AMOUNT,
		   NSF_PREPAYMENT_AMOUNT,
		   WOAMTSUM,
		   WOBAMTSUM,
		   WORAMTSUM,
		   CASHAGAIN_COUNT,
		   BUYBACK_COUNT,
		   DEPOSIT_COUNT,
		   GROSS_REVENUE,
		   GROSS_WRITE_OFF,
		   NET_WRITE_OFF,
		   NET_REVENUE,
		   BEGIN_PWO_AMT,
		   CURRENT_PWO_AMT,
		   NEXT_MONTH_PWO_AMT,
		   NEXT_2_MONTH_PWO_AMT,
		   RCC_IN_PROCESS,
		   RCC_INELIGIBLE,
		   DEFAULT_PMT,
		   DEFAULT_CNT,
		   DEFAULT_AMT,
/*		   NEWCUSTCNTCOMPANY_OLD,*/
		   ACTUAL_DURATION_COUNT,
		   ACTUAL_DURATION_DAYS,
		   ACTUAL_DURATION_ADVAMT,
		   ACTUAL_DURATION_FEES,
		   BLACK_BOOK_VALUE,
		   PASTDUECNT_1,
	   	   PASTDUEAMT_1,
		   PASTDUEAMT_2,
		   PASTDUECNT_2,
		   PASTDUEAMT_3,
		   PASTDUECNT_3,
		   PASTDUEAMT_4,
		   PASTDUECNT_4,
		   PASTDUEAMT_5,
		   PASTDUECNT_5,
		   PASTDUEAMT_6,
		   PASTDUECNT_6,
		   SOLD_AMOUNT,
		   SOLD_COUNT,		
		   ADVCNT,
		   AVGADVAMT,
		   AVGDURATION,
		   AVGFEEAMT,
		   ADVAMTSUM,
		   ADVAMTSUM,
		   HELDCNT,
/*	  	   BUYCNT,*/
		   AGNCNT
/*		   DPCNT,*/
/*		   REVENUE_ACTUAL,*/
/*		   REVENUE_BUDGET,*/
/*		   CUSTOMER_DISCOUNT,*/
/*		   BADDEBT_ACTUAL,*/
/*		   BADDEBT_BUDGET,*/
/*		   CENTER_EXPENSE*/
		   ) = 0 THEN DELETE;
%RUNQUIT(&job,&sub2);

%INCLUDE "\\CSSSASAPP\CADA\SAS SOURCE CODE\PRODUCTION\SERVICE ACCOUNTS\SVC_SASUSER.SAS";
LIBNAME BIOR ORACLE
	USER=&USER
	PW=&PASSWORD
	PATH=BIOR
	SCHEMA=BIOR;

LIBNAME SKYNET "E:\SHARED\CADA\SAS DATA\DATAMART\STDM";

PROC SQL;
CONNECT TO ORACLE (USER=&USER. PW=&PASSWORD. PATH='BIOR');
	EXECUTE(UPDATE BIOR.DATAMART_STATUS
			SET QFUND1_INSTALL_STATUS = 'WAITING_CL'
			WHERE SOURCE = 'BIOR.O_DAILY_SUMMARY_ALL'
			)
	 BY ORACLE;
	 DISCONNECT FROM ORACLE;
%RUNQUIT(&job,&sub2);


/*WAITFOR CUST LIFECYCLE TO BE READY FOR THE DAY*/
%MACRO WAITFORCUSTLIFE();


	%DO %UNTIL (%EVAL(&COUNT_R. >= 1));	
		PROC SQL;
			CREATE TABLE CUST_LIFE_CHECK_TODAY AS
			SELECT INSTANCE
				  ,MAX(BUSINESS_DATE)	AS BUSINESSDT
			FROM BIOR.CUST_CATEGORY_DAILY_COUNT
			WHERE INSTANCE = 'QFUND1'
			GROUP BY INSTANCE
		;
		QUIT;

		DATA _NULL_;
			FORMAT WEEKDAY $20.;
			DAYOFWEEK = WEEKDAY(DATE());
			IF DAYOFWEEK = 1 THEN WEEKDAY = 'SUNDAY';
			ELSE IF DAYOFWEEK = 2 THEN WEEKDAY = 'MONDAY';
			ELSE IF DAYOFWEEK = 3 THEN WEEKDAY = 'TUESDAY';
			ELSE IF DAYOFWEEK = 4 THEN WEEKDAY = 'WEDNESDAY';
			ELSE IF DAYOFWEEK = 5 THEN WEEKDAY = 'THURSDAY';
			ELSE IF DAYOFWEEK = 6 THEN WEEKDAY = 'FRIDAY';
			ELSE IF DAYOFWEEK = 7 THEN WEEKDAY = 'SATURDAY';
			CALL SYMPUTX("DAYOFWEEK",WEEKDAY,'G');
		RUN;

		%IF &DAYOFWEEK. = SUNDAY
			OR &DAYOFWEEK. = TUESDAY
			OR &DAYOFWEEK. = WEDNESDAY
			OR &DAYOFWEEK. = THURSDAY
			OR &DAYOFWEEK. = FRIDAY
			OR &DAYOFWEEK. = SATURDAY %THEN 
				%DO;

					/*EADV*/
					PROC SQL;
						SELECT COUNT(*) INTO: COUNT_R
						FROM CUST_LIFE_CHECK_TODAY
						WHERE INSTANCE = 'QFUND1' AND BUSINESSDT >= DHMS(TODAY()-1,00,00,00)
					;
					QUIT;

				%END;
		%ELSE %IF &DAYOFWEEK. = MONDAY %THEN
				%DO;

					/*EADV*/
					PROC SQL;
						SELECT COUNT(*) INTO: COUNT_R
						FROM CUST_LIFE_CHECK_TODAY
						WHERE INSTANCE = 'QFUND1' AND BUSINESSDT >= DHMS(TODAY()-2,00,00,00)
					;
					QUIT;
				%END;
					
		%PUT THE COUNT IS EQUAL TO : &COUNT_R;

		%IF %EVAL(&COUNT_R. < 1) %THEN 
			%DO;
				/*SLEEPS FOR 300 SECONDS (5 MINUTES) UNTIL IT FINDS 16 FINISHED TABLES, IT WILL LOOP FOREVER UNTIL THE 16 FINISHED TABLES*/
				DATA SLEEP;
					CALL SLEEP(300,1);
				RUN;
			%END;
	%END;

%MEND;

%WAITFORCUSTLIFE

PROC SQL;
CONNECT TO ORACLE (USER=&USER. PW=&PASSWORD. PATH='BIOR');
	EXECUTE(UPDATE BIOR.DATAMART_STATUS
			SET QFUND1_INSTALL_STATUS = 'RUNNING'
			WHERE SOURCE = 'BIOR.O_DAILY_SUMMARY_ALL'
			)
	 BY ORACLE;
	 DISCONNECT FROM ORACLE;
%RUNQUIT(&job,&sub2);


PROC SQL;
   CREATE TABLE WORK.PROD_DESC_CHANGE AS 
   SELECT /* BUSINESS_DATE */
            (DATEPART(t1.BUSINESS_DATE)) FORMAT=MMDDYY10. AS BUSINESS_DATE, 
          t1.LOCATION_NBR, 
          t1.INSTANCE, 
          t1.PRODUCT, 
          /* PRODUCT_DESC */
            (CASE WHEN (INSTANCE = 'EAPROD1' AND T1.BUSINESS_DATE >= T2.DEALDATE  AND T2.DEALDATE ^= .) 
												    THEN "TX CSO Cash Advance" 
				  WHEN PRODUCTDESC = 'TX CSO' 		THEN 'EADV PAYDAY'
                  WHEN PRODUCTDESC = 'TEXAS TITLE' THEN 'TX TITLE' ELSE PRODUCTDESC END) AS PRODUCT_DESC, 
          /* NEW_CUST_CNT */
            (SUM(t1.NEW_CUST_CNT)) AS NEW_CUST_CNT, 
          /* REDEEM_CUST_CNT */
            (SUM(t1.REDEEM_CUST_CNT)) AS REDEEM_CUST_CNT, 
          /* NEW_REPEAT_CUST_CNT */
            (SUM(t1.NEW_REPEAT_CUST_CNT)) AS NEW_REPEAT_CUST_CNT, 
          /* REACTIVE_CUST_CNT */
            (SUM(t1.REACTIVE_CUST_CNT)) AS REACTIVE_CUST_CNT, 
          /* ACTIVE_CUST_CNT */
            (SUM(t1.ACTIVE_CUST_CNT)) AS ACTIVE_CUST_CNT, 
          /* INACTIVE_CUST_CNT */
            (SUM(t1.INACTIVE_CUST_CNT)) AS INACTIVE_CUST_CNT
      FROM BIOR.CUST_CATEGORY_DAILY_COUNT T1
	  LEFT JOIN SKYNET.TX_UC_DATEBYLOC AS T2
			ON (T1.LOCATION_NBR = T2.LOCNBR)
	  WHERE T1.INSTANCE = 'QFUND1' AND T1.BUSINESS_DATE >= DHMS(TODAY()-5,00,00,00)
      GROUP BY (CALCULATED BUSINESS_DATE),
               t1.LOCATION_NBR,
               t1.INSTANCE,
               t1.PRODUCT,
               (CALCULATED PRODUCT_DESC)
;
%RUNQUIT(&job,&sub2);

PROC SQL;
   CREATE TABLE DAILY_SUMMARY_ALL_QF1_1 AS 
   SELECT t1.Product, 
          t1.PRODUCT_DESC, 
          t1.pos, 
          t1.INSTANCE, 
          t1.brandcd, 
          t1.bankmodel, 
          t1.COUNTRYCD, 
          t1.STATE, 
          t1.CITY, 
          t1.ZIP, 
          t1.BUSINESS_UNIT, 
          t1.ZONENBR, 
          t1.ZONENAME, 
          t1.REGIONNBR, 
          t1.REGIONRDO, 
          t1.DIVISIONNBR, 
          t1.DIVISIONDDO, 
          t1.LOCNBR, 
          t1.Location_Name, 
          t1.LOC_OPEN_DT, 
          t1.LOC_CLOSE_DT, 
          /* BUSINESSDT */
            (DHMS(t1.BusinessDt,00,00,00)) FORMAT=DATETIME20. AS BUSINESSDT, 
          /* LAST_REPORT_DT */
            (DHMS(DATE()-1,00,00,00)) FORMAT=DATETIME20. AS LAST_REPORT_DT, 
          /* LOC_LAST_REPORTED_DT */
            (DHMS(t1.loc_last_reported_dt,00,00,00)) FORMAT=DATETIME20. AS LOC_LAST_REPORTED_DT, 
          t1.Latitude, 
          t1.Longitude, 
          t1.HOLIDAYNAME, 
          t1.lastthursday, 
          t1.ThursdayWeek, 
          t1.NEW_ADV_AMT, 
          t1.NEW_ORIGINATIONS, 
          t1.NEW_ADVFEE_AMT, 
          t1.TOTADVRECV, 
          t1.TOTADVFEERECV, 
          t1.DEFAULT_LOANS_OUTSTANDING, 
          t1.COMPLIANT_LOANS_OUTSTANDING, 
          t1.TOTDEFAULTRECV, 
          t1.TOTDEFAULTFEERECV, 
          t1.NSF_AMOUNT, 
          t1.NSF_PAYMENT_AMOUNT, 
          t1.NSF_PREPAYMENT_AMOUNT, 
          t1.WOAMTSUM, 
          t1.WOCNT, 
          t1.WOBAMTSUM, 
          t1.WOBCNT, 
          t1.WORAMTSUM, 
          t1.WORCNT, 
          t1.CASHAGAIN_COUNT, 
          t1.BUYBACK_COUNT, 
          t1.DEPOSIT_COUNT, 
          t1.GROSS_REVENUE, 
          t1.GROSS_WRITE_OFF, 
          t1.NET_WRITE_OFF, 
          t1.NET_REVENUE, 
          t1.BEGIN_PWO_AMT, 
          t1.CURRENT_PWO_AMT, 
          t1.NEXT_MONTH_PWO_AMT, 
          t1.NEXT_2_MONTH_PWO_AMT, 
          t1.RCC_IN_PROCESS, 
          t1.RCC_INELIGIBLE, 
          t1.DEL_RECV_AMT, 
          t1.DEL_RECV_CNT, 
          t1.DEFAULT_PMT, 
          t1.DEFAULT_CNT, 
          t1.DEFAULT_AMT, 
          /* NEWCUSTCNTCOMPANY */
            (CASE WHEN SUM(t2.NEW_CUST_CNT,t2.NEW_REPEAT_CUST_CNT) = . THEN 0 ELSE 
            SUM(t2.NEW_CUST_CNT,t2.NEW_REPEAT_CUST_CNT) END) AS NEWCUSTCNTCOMPANY, 
          /* REDEEM_CUSTOMER_CNT */
            (CASE 
               WHEN . = t2.REDEEM_CUST_CNT THEN 0
               ELSE t2.REDEEM_CUST_CNT
            END) AS REDEEM_CUSTOMER_CNT, 
          /* REACTIVE_CUSTOMER_CNT */
            (CASE 
               WHEN . = t2.REACTIVE_CUST_CNT THEN 0
               ELSE t2.REACTIVE_CUST_CNT
            END) AS REACTIVE_CUSTOMER_CNT, 
          /* ACTIVE_CUST_CNT */
            (CASE 
               WHEN . = t2.ACTIVE_CUST_CNT THEN 0
               ELSE t2.ACTIVE_CUST_CNT
            END) AS ACTIVE_CUST_CNT, 
          /* INACTIVE_CUST_CNT */
            (CASE 
               WHEN . = t2.INACTIVE_CUST_CNT THEN 0
               ELSE t2.INACTIVE_CUST_CNT
            END) AS INACTIVE_CUST_CNT, 
          t1.ACTUAL_DURATION_COUNT, 
          t1.ACTUAL_DURATION_DAYS, 
          t1.ACTUAL_DURATION_ADVAMT, 
          t1.ACTUAL_DURATION_FEES, 
          t1.AVGDURATIONDAYS, 
          t1.AVGDURATIONCNT, 
          t1.BLACK_BOOK_VALUE, 
          t1.PASTDUECNT_1, 
          t1.PASTDUEAMT_1, 
          t1.PASTDUEAMT_2, 
          t1.PASTDUECNT_2, 
          t1.PASTDUEAMT_3, 
          t1.PASTDUECNT_3, 
          t1.PASTDUEAMT_4, 
          t1.PASTDUECNT_4, 
          t1.PASTDUEAMT_5, 
          t1.PASTDUECNT_5, 
          t1.PASTDUEAMT_6, 
          t1.PASTDUECNT_6, 
          t1.REFINANCE_CNT, 
          t1.OVERSHORTAMT, 
          t1.HOLDOVERAMT, 
          t1.FIRST_PRESENTMENT_CNT, 
          t1.SATISFIED_PAYMENT_CNT, 
          t1.POSSESSION_AMT, 
          t1.POSSESSION_CNT, 
          t1.SOLD_AMOUNT, 
          t1.SOLD_COUNT, 
          t1.ADVCNT, 
          t1.REPMTPLANCNT, 
          t1.AVGADVAMT, 
          t1.AVGDURATION, 
          t1.AVGFEEAMT, 
          t1.ADVAMTSUM, 
          t1.HELDCNT, 
          t1.AGNCNT,
		  "STOREFRONT"				AS CHANNELCD
      FROM DAILY_SUMMARY_ALL_PRE t1
           LEFT JOIN WORK.PROD_DESC_CHANGE t2 ON (t1.INSTANCE = t2.INSTANCE) AND (t1.PRODUCT_DESC = t2.PRODUCT_DESC) 
          AND (T1.PRODUCT = t2.PRODUCT) AND (T1.BUSINESSDT = T2.BUSINESS_DATE) AND (t1.LOCNBR = t2.LOCATION_NBR);
%RUNQUIT(&job,&sub2);

PROC FORMAT;
    PICTURE CHECKTHEDAY OTHER=%0Y.%0M.%0D (DATATYPE=DATE);
    PICTURE CHECKTHETIME OTHER=%0H.%0M.%0S (DATATYPE=TIME);
%RUNQUIT(&job,&sub2);

%LET DATE=%SYSFUNC(INTNX(DAY,%SYSFUNC(TODAY()),0,END),DATE7.);
%PUT &DATE;


/* CREATE MACROS FOR BULKLOAD PATH AND TIMESTAMP */
DATA _NULL_;
	CALL SYMPUTX('TIMESTAMP',TRANWRD(PUT(DATETIME(),DATETIME20.),':','.'),'G');
    CALL SYMPUTX('PATH',"E:\SHARED\CADA\SAS DATA\DATAMART\SKYNET REDESIGN BULKLOAD LOGS\DAILY\QFUND1_QFUND2",'G');
    CALL SYMPUTX('PATHTWO',"E:\SHARED\CADA\SAS DATA\DATAMART\SKYNET REDESIGN BULKLOAD LOGS\DAILY\QFUND1_QFUND2\DIR2\",'G');
%RUNQUIT(&job,&sub2);

PROC SQL;
    INSERT INTO SKY.DAILYSUM_DATAMART_QF1 (BULKLOAD=YES BL_LOG="&PATH.\BL_&DATE..LOG" BL_DELETE_DATAFILE=YES 
                                                   BL_DEFAULT_DIR="&PATHTWO.")
    SELECT 
        *
    FROM DAILY_SUMMARY_ALL_QF1_1
	WHERE BUSINESSDT >= DHMS(TODAY()-5,00,00,00);
%RUNQUIT(&job,&sub2);

/* CREATE TIMESTAMP */
PROC FORMAT;
	PICTURE WHATDAYISIT OTHER=%0Y.%0M.%0D (DATATYPE=DATE);
	PICTURE WHATTIMEISIT OTHER=%0H.%0M.%0S (DATATYPE=TIME);
%RUNQUIT(&job,&sub2);

DATA _NULL_;
	CALL SYMPUTX('TIMESTAMP',TRANWRD(PUT(DATETIME(),DATETIME20.),':','.'),'G');
RUN;

%PUT &TIMESTAMP;


/*KICK OFF QF1_DAILY UPLOAD*/
SYSTASK COMMAND "'C:\PROGRAM FILES\SASHOME\SASFOUNDATION\9.4\SAS.EXE'
				 '&DAILY_FILE_PATH.\TRANSPOSE QFUND1.SAS'
				 -LOG '&DAILY_LOGPATH.\TRANSPOSE_QFUND1_&TIMESTAMP..LOG'
				 -CONFIG 'C:\PROGRAM FILES\SASHOME\SASFOUNDATION\9.4\SASV9.CFG'"
TASKNAME=TRANSPOSE_QFUND1
STATUS=TRANSPOSE_QFUND1;

/*UPLOAD QF1*/
%INCLUDE "&DAILY_FILE_PATH.\DAILYSUM_UPLOAD_QFUND1_1.SAS";


PROC SQL;
	CONNECT TO ORACLE(USER=&USER. PASSWORD=&PASSWORD. PATH='BIOR');
	EXECUTE(UPDATE BIOR.O_DAILY_SUMMARY_ALL
		    SET LAST_REPORT_DT = TO_DATE(TO_CHAR(CURRENT_DATE-1, 'MM/DD/YYYY'), 'MM/DD/YYYY')
			WHERE INSTANCE = 'QFUND1' AND PRODUCT = 'INSTALLMENT'
			)
	BY ORACLE;
	DISCONNECT FROM ORACLE;
QUIT;

WAITFOR _ALL_ TRANSPOSE_QFUND1;

/*ABORT PROGRAM*/
%MACRO STOPPROGRAM();

	%IF %EVAL(1=1) %THEN %DO;
		%abort cancel;
	%END;

%MEND;

%STOPPROGRAM
