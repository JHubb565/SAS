/***************************************************************************
Sub Program	: NextGen Input
Main		: Customer Datamart
Purpose		: Get all customer information from NextGen POS system
Programmer  : Spencer Hopkins
****************************************************************************/

/*
*****************************************************************************
*****************************************************************************
CHANGE LOG:
  DATE        	BY                 	COMMENTS  
=============================================================================
  03/03/2016	Spencer Hopkins		Changed source table from DEV1 to QA1
									Flattened tables 
  03/30/2016    Spencer Hopkins		Fix formatting issue (propcase names, etc)
  04/12/2016    Spencer Hopkins		Optimization - only copy necessary columns
  05/10/2016    Spencer Hopkins		upcase state (address)
  05/13/2016	Spencer Hopkins		Remove Custnbr (numeric) & rename
									 	pos_custnbr to custnbr (varchar)
  06/13/2016	Spencer Hopkins		Update final table for len/size 
										of STND_CUSTOMER_STATUS
  07/13/2016	Spencer Hopkins		Add email
									Remove customers with no activity yet in NG
									Fix bank account/routing numbers
  07/19/2016	Spencer Hopkins		Added placeholder for languagecd
  10/03/2016	Spencer Hopkins		Fix bank account num to char issue
  02/27/2017	Spencer Hopkins		Add ETL check	

*****************************************************************************
*****************************************************************************
*/


/*
============================================================================= 
     INCLUDE ERROR_CHECK
=============================================================================
*/
%INCLUDE "E:\SHARED\CADA\SAS SOURCE CODE\DEVELOPMENT\JHUBBARD\SKYNET REDESIGN\DATAMART REDESIGN\CUSTOMER\CUSTDM_ERROR_INPUTS.SAS";


/*
============================================================================= 
     SET UP LIBRARIES & MAKE COPIES OF PRODUCTION TABLES
=============================================================================
*/

%INCLUDE "E:\SHARED\CADA\SAS SOURCE CODE\PRODUCTION\SKYNET V3\SKYNET REDESIGN\TOP SECRET PROGRAM.SAS";


%LET DAYS_BACK = 5;



/*** NEXTGEN CUSTOMER TABLES ***/

DATA WORK.NG_CUST_MASTER(KEEP=FD_CREATE_SOURCE_DTTM FC_SOURCE_CUST_IDENTIFIER FC_BUSINESS_UNIT_CD 
								FC_CUST_NAME_FIRST FC_CUST_NAME_LAST_1 FC_CUST_NAME_LAST_2 FC_CUST_NAME_MIDDLE FD_CUST_DOB FI_SCD_KEY_ID_CUST_MASTER FC_BUSINESS_UNIT_CD FC_CUST_STATE_CD FD_CUST_RECORD_UPDATE_DT);
	SET NG_IDS.TA_CUSTOMER_MASTER;
	WHERE (FD_CUST_RECORD_UPDATE_DT >= DHMS(TODAY()-&DAYS_BACK.,00,00,00)
		  OR FD_CUST_REVIEW_LAST_DT >= DHMS(TODAY()-&DAYS_BACK.,00,00,00)
		  OR FD_ETL_CREATED_DTTM >= DHMS(TODAY()-&DAYS_BACK.,00,00,00)
		  OR FD_ETL_MODIFICATION_DTTM >= DHMS(TODAY()-&DAYS_BACK.,00,00,00));
%RUNQUIT(&job,&sub6);

DATA WORK.NG_CUST_SSN;
	SET NG_IDS.TA_CUSTOMER_SSN
		(KEEP=FC_SOURCE_CUST_IDENTIFIER FI_SCD_KEY_ID_CUST_SSN FE_CUST_SSN);
%RUNQUIT(&job,&sub6);

DATA WORK.NG_CUST_IDENT;
	SET NG_IDS.TA_CUSTOMER_IDENT
		(KEEP=FC_SOURCE_CUST_IDENTIFIER FD_SCD_EFFECTIVE_DTTM_END FC_CUST_ID_ISSUING_STATE_CD FC_CUST_ID_NBR FC_CUST_ID_CD);
	WHERE FC_CUST_ID_CD = 'DLID';
%RUNQUIT(&job,&sub6);

DATA WORK.NG_CUST_ADDRESS;
	SET NG_IDS.TA_CUSTOMER_ADDRESS
		(KEEP=FC_SOURCE_CUST_IDENTIFIER FI_SCD_KEY_ID_CUST_ADDR FC_CUST_ADDR_LINE_1 FC_CUST_ADDR_LINE_2 
			FC_CUST_ADDR_CITY FC_CUST_ADDR_STATE_CD FC_CUST_ADDR_POSTAL_CD FC_CUST_ADDR_COUNTRY_CD FC_CUST_ADDR_CD
			FC_CUST_ADDR_CAN_MARKET_FLG);
	WHERE FC_CUST_ADDR_CD = 'MAILINGADD';
%RUNQUIT(&job,&sub6);

DATA WORK.NG_CUST_CONTACT;
	SET NG_IDS.TA_CUSTOMER_CONTACT
		(KEEP=FC_SOURCE_CUST_IDENTIFIER FC_CUST_CONT_CD FI_SCD_KEY_ID_CUST_CONT FC_CUST_CONT_NBR FC_CUST_CONT_ADDR);
%RUNQUIT(&job,&sub6);

DATA WORK.NG_CUST_INCOME;
	SET NG_IDS.TA_CUSTOMER_INCOME
		(KEEP=FC_SOURCE_CUST_IDENTIFIER FN_CUST_INC_SEQ_NBR FI_SCD_KEY_ID_CUST_INC FC_SCD_EFFECTIVE_FLG FC_CUST_INC_PAY_FREQ_CD FN_CUST_INC_AMT_PERIOD_GROSS);
%RUNQUIT(&job,&sub6);

DATA WORK.NG_CUST_BANKING;
	SET NG_IDS.TA_CUSTOMER_BANKING
		(KEEP=FC_SOURCE_CUST_IDENTIFIER FI_SCD_KEY_ID_CUST_BANK FC_CUST_BANK_ABANBR FC_CUST_BANK_ACCT_NBR);
%RUNQUIT(&job,&sub6);


/*** NEXTGEN TRANSACTION TABLES ***/
DATA WORK.NG_MV_FIN_REC;
	SET NGODSFIN.MV_FINANCIAL_RECORD
		(KEEP=FI_CUSTOMER_NUMBER FD_TRANSACTION_DTTM FI_CENTER_ID);
%RUNQUIT(&job,&sub6);


/*** LOCATION SPECIFIC INFO ***/
DATA WORK.EDW_D_LOC_COPY;		
	SET EDW.D_LOCATION
		(KEEP=LOC_NBR BUSN_UNIT_ID BRND_CD CTRY_CD ST_PVC_CD ADR_CITY_NM MAIL_CD HIER_ZONE_NBR HIER_ZONE_NM HIER_RGN_NBR HIER_RDO_NM HIER_DIV_NBR HIER_DDO_NM LOC_NM OPEN_DT CLS_DT);
%RUNQUIT(&job,&sub6);		

DATA WORK.SKYNET_LOCATION_LATLONG_COPY;
	SET SKYNET.LOCATION_LATLONG
		(KEEP=LOCNBR LATITUDE LONGITUDE);
%RUNQUIT(&job,&sub6);



/*
============================================================================= 
     FLATTEN MASTER CUSTOMER TABLE
=============================================================================
*/

PROC SORT DATA=WORK.NG_CUST_MASTER;
	BY FC_SOURCE_CUST_IDENTIFIER FI_SCD_KEY_ID_CUST_MASTER;
%RUNQUIT(&job,&sub6);

DATA WORK.NG_CUST_MASTER_FLAT;
	SET WORK.NG_CUST_MASTER;
	BY FC_SOURCE_CUST_IDENTIFIER FI_SCD_KEY_ID_CUST_MASTER;
	IF LAST.FC_SOURCE_CUST_IDENTIFIER;
%RUNQUIT(&job,&sub6);


/*
============================================================================= 
     FLATTEN SSN CUSTOMER TABLE
=============================================================================
*/

PROC SORT DATA=WORK.NG_CUST_SSN;
	BY FC_SOURCE_CUST_IDENTIFIER FI_SCD_KEY_ID_CUST_SSN;
%RUNQUIT(&job,&sub6);

DATA WORK.NG_CUST_SSN_FLAT;
	SET WORK.NG_CUST_SSN;
	BY FC_SOURCE_CUST_IDENTIFIER FI_SCD_KEY_ID_CUST_SSN;
	IF LAST.FC_SOURCE_CUST_IDENTIFIER;
%RUNQUIT(&job,&sub6);


/*
============================================================================= 
     JOIN TRANS LEVEL TO MASTER CUSTOMER TABLE TO ADD LOCATION
=============================================================================
*/

PROC SORT DATA=WORK.NG_MV_FIN_REC;
	BY FI_CUSTOMER_NUMBER FD_TRANSACTION_DTTM;
%RUNQUIT(&job,&sub6);

DATA WORK.NG_MVFINREC_LAST;
	SET WORK.NG_MV_FIN_REC;
	BY FI_CUSTOMER_NUMBER FD_TRANSACTION_DTTM;
	IF LAST.FI_CUSTOMER_NUMBER;
%RUNQUIT(&job,&sub6);


PROC SQL;
	CREATE TABLE WORK.NG_CUST_MASTER_FINAL AS
	SELECT
		MASTER.*
		,CASE WHEN ODSFIN.FI_CENTER_ID = . THEN -1
			ELSE ODSFIN.FI_CENTER_ID
			END AS LOC_NBR
	FROM WORK.NG_CUST_MASTER_FLAT MASTER
		LEFT JOIN WORK.NG_MVFINREC_LAST ODSFIN ON MASTER.FC_SOURCE_CUST_IDENTIFIER = ODSFIN.FI_CUSTOMER_NUMBER
	;
%RUNQUIT(&job,&sub6);


/*
============================================================================= 
     CUSTOMER IDENTIFICATION INFORMATION
=============================================================================
*/

PROC SORT DATA=WORK.NG_CUST_IDENT;
	BY FC_SOURCE_CUST_IDENTIFIER FD_SCD_EFFECTIVE_DTTM_END;
%RUNQUIT(&job,&sub6);

DATA WORK.NG_CUST_IDENT_FINAL;
	SET WORK.NG_CUST_IDENT;
	BY FC_SOURCE_CUST_IDENTIFIER FD_SCD_EFFECTIVE_DTTM_END;
	IF LAST.FC_SOURCE_CUST_IDENTIFIER;
%RUNQUIT(&job,&sub6);


/*
============================================================================= 
     CUSTOMER ADDRESS INFORMATION
=============================================================================
*/

PROC SORT DATA=WORK.NG_CUST_ADDRESS;
	BY FC_SOURCE_CUST_IDENTIFIER FI_SCD_KEY_ID_CUST_ADDR;
%RUNQUIT(&job,&sub6);

DATA WORK.NG_CUST_ADDRESS_FINAL;
	SET WORK.NG_CUST_ADDRESS;
	BY FC_SOURCE_CUST_IDENTIFIER;
	IF LAST.FC_SOURCE_CUST_IDENTIFIER;
%RUNQUIT(&job,&sub6);


/*
============================================================================= 
     CUSTOMER CONTACT INFORMATION
=============================================================================
*/

PROC SORT DATA=NG_CUST_CONTACT;
	BY FC_SOURCE_CUST_IDENTIFIER FC_CUST_CONT_CD FI_SCD_KEY_ID_CUST_CONT;
%RUNQUIT(&job,&sub6);

DATA WORK.NG_CUST_CONTACT_FLAT;
	SET NG_CUST_CONTACT;
	BY FC_SOURCE_CUST_IDENTIFIER FC_CUST_CONT_CD FI_SCD_KEY_ID_CUST_CONT;
	IF LAST.FC_CUST_CONT_CD;
%RUNQUIT(&job,&sub6);


/* SELF JOIN PHONE TABLE TO CREATE COLUMNS FOR HOME#, CELL#, WORK#, OTHER# & OTHER PHONE CODE */
PROC SQL;
	CREATE TABLE WORK.NG_CUST_CONTACT_FINAL AS
	SELECT 
	    MAIN.FC_SOURCE_CUST_IDENTIFIER
	    ,HOME.FC_CUST_CONT_NBR      	AS HOME_PHONENBR
	    ,MOBILE.FC_CUST_CONT_NBR   		AS MOBILE_PHONENBR
	    ,WORKNUM.FC_CUST_CONT_NBR		AS WORK_PHONENBR
	    ,OTHERNUM.FC_CUST_CONT_NBR		AS OTHER_PHONENBR
	    ,CASE WHEN OTHER_PHONENBR = ''
				THEN ''
			  ELSE 'O' 
				END   					AS OTHER_PHONECD
	FROM 
	    (SELECT DISTINCT FC_SOURCE_CUST_IDENTIFIER FROM WORK.NG_CUST_CONTACT_FLAT) MAIN    
	LEFT JOIN WORK.NG_CUST_CONTACT_FLAT   HOME
	    ON (MAIN.FC_SOURCE_CUST_IDENTIFIER = HOME.FC_SOURCE_CUST_IDENTIFIER
	        AND HOME.FC_CUST_CONT_CD = 'SECONDARY')
	LEFT JOIN WORK.NG_CUST_CONTACT_FLAT   MOBILE
	    ON (MAIN.FC_SOURCE_CUST_IDENTIFIER = MOBILE.FC_SOURCE_CUST_IDENTIFIER
	        AND MOBILE.FC_CUST_CONT_CD = 'PRIMARY')
	LEFT JOIN WORK.NG_CUST_CONTACT_FLAT   WORKNUM
	    ON (MAIN.FC_SOURCE_CUST_IDENTIFIER = WORKNUM.FC_SOURCE_CUST_IDENTIFIER
	        AND WORKNUM.FC_CUST_CONT_CD = 'WORK')
	LEFT JOIN WORK.NG_CUST_CONTACT_FLAT   OTHERNUM
	    ON (MAIN.FC_SOURCE_CUST_IDENTIFIER = OTHERNUM.FC_SOURCE_CUST_IDENTIFIER
	        AND OTHERNUM.FC_CUST_CONT_CD = 'OTHER')
	;
%RUNQUIT(&job,&sub6);


/* CREATE EMAIL TABLE */
PROC SQL;
	CREATE TABLE WORK.NG_CUST_CONTACT_EMAIL AS
	SELECT
		FC_SOURCE_CUST_IDENTIFIER
		,FC_CUST_CONT_ADDR
	FROM WORK.NG_CUST_CONTACT_FLAT
	WHERE FC_CUST_CONT_CD = 'EMAIL'
	;
QUIT;

/*
============================================================================= 
     CUSTOMER BANK INFORMATION
=============================================================================
*/

PROC SORT DATA=WORK.NG_CUST_BANKING;
	BY FC_SOURCE_CUST_IDENTIFIER FI_SCD_KEY_ID_CUST_BANK;
%RUNQUIT(&job,&sub6);

DATA WORK.NG_CUST_BANKING_FINAL;
	SET WORK.NG_CUST_BANKING;
	BY FC_SOURCE_CUST_IDENTIFIER FI_SCD_KEY_ID_CUST_BANK;
	IF LAST.FC_SOURCE_CUST_IDENTIFIER;
%RUNQUIT(&job,&sub6);


/*
============================================================================= 
     CUSTOMER INCOME INFORMATION
=============================================================================
*/

PROC SQL;
	CREATE TABLE WORK.NG_CUST_INCOME_FLG AS
	SELECT *
	FROM WORK.NG_CUST_INCOME
	WHERE FC_SCD_EFFECTIVE_FLG = 'Y'
	;
QUIT;

/*PROC SORT DATA=WORK.NG_CUST_INCOME;*/
/*	BY FC_SOURCE_CUST_IDENTIFIER FN_CUST_INC_SEQ_NBR FI_SCD_KEY_ID_CUST_INC;*/
/*RUN;*/
/**/
/*DATA WORK.NG_CUST_INCOME_FLAT;*/
/*	SET WORK.NG_CUST_INCOME;*/
/*	BY FC_SOURCE_CUST_IDENTIFIER FN_CUST_INC_SEQ_NBR FI_SCD_KEY_ID_CUST_INC;*/
/*	IF LAST.FN_CUST_INC_SEQ_NBR;*/
/*RUN;*/

PROC SQL;
	CREATE TABLE WORK.NG_CUST_INCOME_GMI AS
	SELECT FC_SOURCE_CUST_IDENTIFIER
			,CASE WHEN FC_CUST_INC_PAY_FREQ_CD = 'BIWEEKLY'  THEN (FN_CUST_INC_AMT_PERIOD_GROSS*26)/12
				  WHEN FC_CUST_INC_PAY_FREQ_CD = 'BIMONTHLY' THEN  FN_CUST_INC_AMT_PERIOD_GROSS*2
				  WHEN FC_CUST_INC_PAY_FREQ_CD IN ('MONTHLY', 'OTHER') THEN FN_CUST_INC_AMT_PERIOD_GROSS
				  WHEN FC_CUST_INC_PAY_FREQ_CD = 'WEEKLY' THEN (FN_CUST_INC_AMT_PERIOD_GROSS*52)/12
				  END AS GMI_PARTIAL
	FROM WORK.NG_CUST_INCOME_FLG
	ORDER BY FC_SOURCE_CUST_IDENTIFIER
	;
%RUNQUIT(&job,&sub6);

PROC SQL;
	CREATE TABLE WORK.NG_CUST_INCOME_FINAL AS
	SELECT FC_SOURCE_CUST_IDENTIFIER
			,ROUND(SUM(GMI_PARTIAL),.01) AS GMI
			FROM WORK.NG_CUST_INCOME_GMI
			GROUP BY FC_SOURCE_CUST_IDENTIFIER
			;
%RUNQUIT(&job,&sub6);

/*
============================================================================= 
     D_LOCATION MODIFICATION
=============================================================================
*/

PROC SORT DATA=WORK.EDW_D_LOC_COPY;
	BY BUSN_UNIT_ID ST_PVC_CD;
RUN;

DATA WORK.BU_FLAT (KEEP=BU ST_PVC_CD);
	SET WORK.EDW_D_LOC_COPY;
	BY BUSN_UNIT_ID ST_PVC_CD;
	FORMAT BU $5.;
	IF LAST.BUSN_UNIT_ID;
	BU = PUT(BUSN_UNIT_ID,5. -l);
RUN;


/*PROC SQL;*/
/*	CREATE TABLE WORK.BU_MASTER AS*/
/*	SELECT BUSN_UNIT_ID*/
/*			,ST_PVC_CD*/
/*	FROM WORK.EDW_D_LOC_COPY*/
/*	;*/
/*QUIT;*/


/*
============================================================================= 
     PUTTING IT ALL TOGETHER
=============================================================================
*/

PROC SQL;
	CREATE TABLE MARKETING_AQUISITION AS
	SELECT INSTANCE
		  ,SSN
		  ,CUSTNBR
		  ,(UPCASE(MARKETING_SOURCE))	AS MARKETING_SOURCE 
		  ,MARKETING_SOURCE_DATE
	FROM BIOR.CUSTOMER_AQUISITION
	WHERE INSTANCE = 'NG'
	ORDER BY SSN
			,CUSTNBR
			,MARKETING_SOURCE_DATE
;
%RUNQUIT(&job,&sub1);

/*GET MOST RECENT MARKETING SOURCE DATE*/

DATA MOST_RECENT_AQU;
	SET MARKETING_AQUISITION;
	BY SSN
	   CUSTNBR
	   MARKETING_SOURCE_DATE;
	IF LAST.CUSTNBR THEN OUTPUT MOST_RECENT_AQU;
%RUNQUIT(&job,&sub1);

PROC SQL;
	CREATE TABLE CUSTOMER_DATAMART_NG AS
	SELECT
		'NEXTGEN' AS POS length=15 format=$15. 
		,'NG' AS INSTANCE length=15 format=$15.
		,'STOREFRONT'		AS CHANNELCD
		,LOC.BRND_CD AS BRANDCD
		,LOC.CTRY_CD AS COUNTRYCD
		,BU.ST_PVC_CD AS STATE
		,LOC.ADR_CITY_NM AS CITY
		,LOC.MAIL_CD AS ZIP
		,LOC.HIER_ZONE_NBR AS ZONENBR
		,LOC.HIER_ZONE_NM AS ZONENAME 
		,LOC.HIER_RGN_NBR AS REGIONNBR
		,LOC.HIER_RDO_NM AS REGIONRDO 
		,LOC.HIER_DIV_NBR AS DIVISIONNBR
		,LOC.HIER_DDO_NM AS DIVISIONDDO 
		,MASTER.LOC_NBR AS LOCNBR format 16.
		,LOC.LOC_NM AS LOCATION_NAME 
		,LOC.OPEN_DT AS LOC_OPEN_DT
		,LOC.CLS_DT AS LOC_CLOSE_DT
		,MASTER.FD_CREATE_SOURCE_DTTM AS APPLICATIONDT format DATETIME20.
		,DHMS(TODAY()-1,0,0,0) as LAST_REPORT_DT format DATETIME20.
		,LATI.LATITUDE AS LATITUDE
		,LATI.LONGITUDE AS LONGITUDE
		,MASTER.FC_SOURCE_CUST_IDENTIFIER AS CUSTNBR length=20 format=$20.
		,''		AS OMNINBR
/*		,INPUT(MASTER.FC_SOURCE_CUST_IDENTIFIER,20.) AS CUSTNBR */
		,SSN.FE_CUST_SSN AS SSN length=9 format=$9.
		,MASTER.FC_BUSINESS_UNIT_CD AS BUSINESSUNITCD length=5 format=$5.
		,'' AS STND_CUSTOMER_STATUS length= 35 format=$35.
		,propcase(MASTER.FC_CUST_NAME_FIRST) AS FIRSTNM length=35 format=$35.
		,CASE WHEN MASTER.FC_CUST_NAME_LAST_2 = ''
				THEN propcase(MASTER.FC_CUST_NAME_LAST_1)
				ELSE propcase(TRIM(MASTER.FC_CUST_NAME_LAST_1) || " " || MASTER.FC_CUST_NAME_LAST_2)
				END AS LASTNM length=35 format=$35.
		,propcase(MASTER.FC_CUST_NAME_MIDDLE) AS MIDDLENM length=35 format=$35. 
		,IDENT.FC_CUST_ID_ISSUING_STATE_CD AS DRIVERSLICST length=2 format=$2. 
		,IDENT.FC_CUST_ID_NBR AS DRIVERSLICNBR length=50 format=$50. 
		,MASTER.FD_CUST_DOB AS DOB format DATETIME20.
		,propcase(ADDR.FC_CUST_ADDR_LINE_1) AS ADDRESS_LN1 length=60 format=$60. 
		,propcase(ADDR.FC_CUST_ADDR_LINE_2) AS ADDRESS_LN2 length=60 format=$60. 
		,propcase(ADDR.FC_CUST_ADDR_CITY) AS ADDRESS_CITY length=60 format=$60. 
		,upcase(ADDR.FC_CUST_ADDR_STATE_CD) AS ADDRESS_STATE length=2 format=$2. 
		,ADDR.FC_CUST_ADDR_POSTAL_CD AS ADDRESS_ZIP length=9 format=$9. 
		,upcase(ADDR.FC_CUST_ADDR_COUNTRY_CD) AS ADDRESS_COUNTRY length=3 format=$3. 
		,PHONE.HOME_PHONENBR   		length=10 format=$10.
		,PHONE.MOBILE_PHONENBR 		length=10 format=$10.
		,PHONE.WORK_PHONENBR   		length=10 format=$10.
		,PHONE.OTHER_PHONENBR   	length=10 format=$10.
		,PHONE.OTHER_PHONECD 		length=5 format=$5.
		,EMAIL.FC_CUST_CONT_ADDR AS EMAILADDRESS length=100 format=$100.
		,BANK.FC_CUST_BANK_ABANBR AS BANK_ABANBR length=9 format=$9.
		,BANK.FC_CUST_BANK_ACCT_NBR AS BANK_ACCOUNTNBR length=20 format=$20.
		,INC.GMI
		,'' AS DATASHARECD length=35 format=$35.
		,CASE WHEN ADDR.FC_CUST_ADDR_CAN_MARKET_FLG = 'Y' THEN 'N'
			WHEN ADDR.FC_CUST_ADDR_CAN_MARKET_FLG = 'N' THEN 'Y'
			ELSE ""
			END AS DO_NOT_MAIL length=1 format=$1.
		,'' AS LANGUAGECD 			length=2 format=$2.
		,MASTER.FD_CUST_RECORD_UPDATE_DT AS UPDATEDT
	FROM WORK.NG_CUST_MASTER_FINAL MASTER
		LEFT JOIN WORK.EDW_D_LOC_COPY LOC ON MASTER.LOC_NBR = LOC.LOC_NBR
		LEFT JOIN WORK.SKYNET_LOCATION_LATLONG_COPY LATI ON MASTER.LOC_NBR = LATI.LOCNBR
		LEFT JOIN WORK.NG_CUST_SSN_FLAT SSN ON MASTER.FC_SOURCE_CUST_IDENTIFIER = SSN.FC_SOURCE_CUST_IDENTIFIER
		LEFT JOIN WORK.NG_CUST_IDENT_FINAL IDENT ON MASTER.FC_SOURCE_CUST_IDENTIFIER = IDENT.FC_SOURCE_CUST_IDENTIFIER
		LEFT JOIN WORK.NG_CUST_ADDRESS_FINAL ADDR ON MASTER.FC_SOURCE_CUST_IDENTIFIER = ADDR.FC_SOURCE_CUST_IDENTIFIER
		LEFT JOIN WORK.NG_CUST_CONTACT_FINAL PHONE ON MASTER.FC_SOURCE_CUST_IDENTIFIER = PHONE.FC_SOURCE_CUST_IDENTIFIER
		LEFT JOIN WORK.NG_CUST_BANKING_FINAL BANK ON MASTER.FC_SOURCE_CUST_IDENTIFIER = BANK.FC_SOURCE_CUST_IDENTIFIER
		LEFT JOIN WORK.NG_CUST_INCOME_FINAL INC ON MASTER.FC_SOURCE_CUST_IDENTIFIER = INC.FC_SOURCE_CUST_IDENTIFIER
		LEFT JOIN WORK.NG_CUST_CONTACT_EMAIL EMAIL ON MASTER.FC_SOURCE_CUST_IDENTIFIER = EMAIL.FC_SOURCE_CUST_IDENTIFIER
		LEFT JOIN WORK.BU_FLAT BU ON MASTER.FC_BUSINESS_UNIT_CD = BU.BU
/*	WHERE LOC.BRND_CD IS NOT MISSING*/
		;
%RUNQUIT(&job,&sub6);

PROC SQL;
	CREATE TABLE CUSTDM.CUSTOMER_DATAMART_NG AS
	SELECT A.*
		  ,B.MARKETING_SOURCE
		  ,B.MARKETING_SOURCE_DATE
	FROM CUSTOMER_DATAMART_NG A
	LEFT JOIN MOST_RECENT_AQU B
		ON (A.INSTANCE = B.INSTANCE
		AND A.SSN = B.SSN
		AND A.CUSTNBR = B.CUSTNBR)
	;
%RUNQUIT(&job,&sub1);

PROC FORMAT;
    PICTURE CHECKTHEDAY OTHER=%0Y.%0M.%0D (DATATYPE=DATE);
    PICTURE CHECKTHETIME OTHER=%0H.%0M.%0S (DATATYPE=TIME);
%RUNQUIT(&JOB,&SUB9);

%LET DATE=%SYSFUNC(INTNX(DAY,%SYSFUNC(TODAY()),0,END),DATE7.);
%PUT &DATE;


/* CREATE MACROS FOR BULKLOAD PATH AND TIMESTAMP */
DATA _NULL_;
    CALL SYMPUTX('TIMESTAMP',CATX('_',PUT(TODAY(),CHECKTHEDAY.),PUT(TIME(),CHECKTHETIME.)),'G');
    CALL SYMPUTX('PATH',"E:\SHARED\CADA\SAS DATA\DATAMART\SKYNET REDESIGN BULKLOAD LOGS\CUSTOMER\NG",'G');
    CALL SYMPUTX('PATHTWO',"E:\SHARED\CADA\SAS DATA\DATAMART\SKYNET REDESIGN BULKLOAD LOGS\CUSTOMER\NG\DIR2\",'G');
%RUNQUIT(&JOB,&SUB9);

PROC SQL;
    INSERT INTO SKY.CUSTOMER_DATAMART_NG (BULKLOAD=YES BL_LOG="&PATH.\BL_&DATE..LOG" BL_DELETE_DATAFILE=YES 
                                                   BL_DEFAULT_DIR="&PATHTWO.")
    SELECT 
        *
    FROM CUSTDM.CUSTOMER_DATAMART_NG;
%RUNQUIT(&JOB,&SUB9);
	
/*UPLOAD NG*/
%INCLUDE "&CUST_FILE_PATH.\CUSTDM_UPLOAD_NG.SAS";
