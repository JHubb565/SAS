/* SCHEDULE */
PROC SQL;
	CREATE TABLE COMB_SCHEDULED_PMTS AS
		SELECT (INTCK('WEEK',(&STARTDATE),(DATEPART(DEAL_DT))-1)+1) AS ADV_WEEK
	   		  ,INTCK('WEEK',(&STARTDATE),(DATEPART(DUEDT))-1)+1 AS SCHEDULED_WEEK
	   		  ,SUM(ADVAMT) AS COMB_SCHED_PRIN_PMTS
		FROM WORK.DEAL_LVL_INFO
	WHERE DEALSTATUSCD NOT IN ('V','R') AND CALCULATED ADV_WEEK >= 1
	GROUP BY CALCULATED ADV_WEEK
		    ,CALCULATED SCHEDULED_WEEK
;
QUIT;

/* PRINCIPAL AND FEE */
PROC SQL;
	CREATE TABLE WEEKLY_PAY_COMB_PF AS	
		SELECT ADV_WEEK
			  ,INTCK('WEEK',(&STARTDATE),DATEPART(TRANDT)-1)+1 AS PAY_WEEK
			  ,SUM(TRANAMT) FORMAT=DOLLAR20.2 AS COMB_PRIN_AND_FEES
		FROM WORK.PAYWEEK_DEALS
	WHERE PAY_WEEK NOT IS MISSING AND ADV_WEEK >= 1
	GROUP BY ADV_WEEK
		    ,CALCULATED PAY_WEEK
	ORDER BY ADV_WEEK
		    ,PAY_WEEK
;
QUIT;

/* PRINCIPAL */
PROC SQL;
	CREATE TABLE WEEKLY_PAY_SUMS_COMB AS
		SELECT ADV_WEEK
			  ,INTCK('WEEK',(&STARTDATE),DATEPART(TRANDT)-1)+1 AS PAY_WEEK
			  ,SUM(TRANAMT) FORMAT=DOLLAR20.2 AS COMB_PRIN
		FROM WORK.PAYWEEK_DEALS
	WHERE STNDAPPLIEDCD NOT LIKE '%FEE%' AND STNDAPPLIEDCD NOT IN ('OVERPAID') AND STNDTRANCD LIKE '%PAYMENT%' AND PAY_WEEK NOT IS MISSING AND ADV_WEEK >= 1
		  AND CALCULATED PAY_WEEK NOT IS MISSING
	GROUP BY ADV_WEEK
		    ,CALCULATED PAY_WEEK
	ORDER BY ADV_WEEK
;
QUIT;

/* TRANSPOSE DATA */
/* SCHEDULE */
PROC TRANSPOSE DATA=COMB_SCHEDULED_PMTS OUT=COMB_SCHED PREFIX=WEEK_;
	BY ADV_WEEK;
	VAR COMB_SCHED_PRIN_PMTS;
	ID SCHEDULED_WEEK;
RUN;

/* PRINCIPAL AND FEES */
PROC TRANSPOSE DATA=WEEKLY_PAY_COMB_PF OUT=COMB_PF PREFIX=WEEK_;
	BY ADV_WEEK;
	VAR COMB_PRIN_AND_FEES;
	ID PAY_WEEK;
RUN;

/* PRINCIPAL */
PROC TRANSPOSE DATA=WEEKLY_PAY_SUMS_COMB OUT=COMB_P PREFIX=WEEK_;
	BY ADV_WEEK;
	VAR COMB_PRIN;
	ID PAY_WEEK;
RUN;

DATA SERIES1 (RENAME=(I=ADV_WEEK));
	I = 0;
	_NAME_ = "COMB_PRIN_AND_FEES";
	DO I=1 TO 300;
	OUTPUT;
	END;
RUN;

DATA SERIES2 (RENAME=(I=ADV_WEEK));
	I = 0;
	_NAME_ = "COMB_PRIN";
	DO I=1 TO 300;
	OUTPUT;
	END;
RUN;

DATA SERIES3 (RENAME=(I=ADV_WEEK));
	I = 0;
	_NAME_ = "COMB_SCHED_PRIN_PMTS";
	DO I=1 TO 300;
	OUTPUT;
	END;
RUN;

/* COMBINE TABLES  */
PROC SQL;
	CREATE TABLE WORK.COMB_DATA_PRE AS 
		SELECT * FROM WORK.COMB_PF
 	OUTER UNION CORR 
		SELECT * FROM WORK.COMB_P
	OUTER UNION CORR 
		SELECT * FROM WORK.COMB_SCHED
;
QUIT;

PROC SQL;
	CREATE TABLE COMBINE_SERIES AS
	SELECT * 
	FROM SERIES1
	UNION ALL CORR
	SELECT *
	FROM SERIES2
	UNION ALL CORR
	SELECT *
	FROM SERIES3
;
QUIT;

PROC SQL;
	CREATE TABLE WORK.COMB_DATA AS
	SELECT A.ADV_WEEK
		  ,A._NAME_
		  ,B.*
	FROM COMBINE_SERIES A
	LEFT JOIN WORK.COMB_DATA_PRE B
		ON (A.ADV_WEEK = B.ADV_WEEK
		AND A._NAME_ = B._NAME_)
	ORDER BY _NAME_
			,ADV_WEEK
;
QUIT;

PROC CONTENTS DATA=COMB_DATA OUT=COL_NAMES(KEEP=NAME) NOPRINT;
RUN;

PROC SQL NOPRINT;
	SELECT NAME INTO :SORTED_COLS SEPARATED BY ' '
	FROM COL_NAMES;
	SELECT NAME INTO :SORTED_COLS2 SEPARATED BY ' '
	FROM COL_NAMES
	WHERE NAME NOT IN ('_NAME_')
;
QUIT;

DATA FINAL_PRE;
	RETAIN &SORTED_COLS;
	SET WORK.COMB_DATA;
RUN;

%MACRO FINAL_TABLE();
DATA FINAL;
	SET WORK.FINAL_PRE;
%LET J=1;
%LET VALS=&SORTED_COLS2;
%DO %WHILE(%SCAN(&VALS,&J) NE );
	%LET I=%SCAN(&VALS, &J);
		%DO;
			%PUT &I;
			IF &I = . THEN &I = 0;
		%END;
  %LET J=%EVAL(&J+1);
%END;
RUN;
%MEND;
%FINAL_TABLE

DATA XLS_SRC.FINAL_PF
	 XLS_SRC.FINAL_P
	 XLS_SRC.FINAL_SCHED;
	 SET WORK.FINAL;
	 IF _NAME_ = 'COMB_PRIN_AND_FEES' THEN OUTPUT XLS_SRC.FINAL_PF;
	 ELSE IF _NAME_ = 'COMB_PRIN' 	THEN OUTPUT XLS_SRC.FINAL_P;
	 ELSE IF _NAME_ = 'COMB_SCHED_PRIN_PMTS' THEN OUTPUT XLS_SRC.FINAL_SCHED;
RUN;