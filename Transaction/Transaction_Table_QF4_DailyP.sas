*Error Checking;
%include "E:\Shared\CADA\SAS Source Code\Development\nrochester\TRANSACTION_DATAMART_DAILY\Transaction_Table_Error_Check.sas";

*Libname Statements;
%include "E:\Shared\CADA\SAS Source Code\Development\nrochester\Libname_Statements.sas";
%INCLUDE "E:\SHARED\CADA\SAS SOURCE CODE\DEVELOPMENT\JHUBBARD\TOP SECRET PROGRAM.SAS";

*CUSTOMER JOIN PROGRAM;
%INCLUDE "E:\SHARED\CADA\SAS Source Code\Development\nrochester\TRANSACTION_DATAMART_DAILY\CUSTOMER_SSN_MACRO.SAS";
%SSN(QFUND4);

/* MACROS FOR SELECTING DATA */
%PUT &SYSUSERID;
%LET START=INTNX('DTDAY',DHMS(18628,0,0,0),1,'BEGINNING');
%LET THIRTYDAYS=INTNX('DTDAY',DHMS(%SYSFUNC(TODAY()),0,0,0),-5,'BEGINNING');
%PUT &START;
%PUT &THIRTYDAYS;

DATA _NULL_;
	CALL SYMPUTX('TRAN_LOGPATH',"E:\SHARED\CADA\LOGS\SKYNET V2",'G');
	CALL SYMPUTX('TRAN_FILE_PATH',"E:\SHARED\CADA\SAS SOURCE CODE\PRODUCTION\SKYNET V2\SKYNET REDESIGN\DATAMART REDESIGN\TRANSACTION",'G');
RUN;
/* START TIMER */
%LET _TIMER_START = %SYSFUNC(DATETIME());

/* DOWNLAOD LOAN TRANSACTION INFORMATION */
DATA WORK.QF_TRANSACTION_DATA_P1;
	SET ECA.QF_TRANSACTION_DATA;
WHERE CREATE_DATE_TIME > &THIRTYDAYS.;
%RUNQUIT(&job,&sub7);

/* DOWNLOAD LOAN INFORMATION */
DATA WORK.QF_PAYDAY_LOAN_DATA;
	SET ECA.QF_PAYDAY_LOAN_DATA;
%RUNQUIT(&job,&sub7);

/* REMOVE THE DOUBLE POSITIVE OF NSF_AMT AND NSF_PREPAYMENT_AMT WHEN TRANCODE="ACHPP" */
DATA WORK.QF_TRANSACTION_DATA_P (RENAME=(HEY=NSF_PREPAYMENT_AMT));
SET WORK.QF_TRANSACTION_DATA_P1;
IF TRANSACTION_TYPE="ACHPP" AND NSF_AMT = NSF_PREPAYMENT_AMT THEN HEY=0.00;
ELSE HEY=NSF_PREPAYMENT_AMT;
DROP NSF_PREPAYMENT_AMT;
%RUNQUIT(&job,&sub7);

/* FILTER OUT WOW, WO, WOR, AND DSLD FROM MAIN TRANSACTION INFORMATION */
DATA WORK.QF_TRANSACTION_DATA_P_1 WORK.WO WORK.DSLD WORK.WOW WORK.WOR;
SET WORK.QF_TRANSACTION_DATA_P;
IF TRANSACTION_TYPE="WO" AND VOID_FLAG="N" THEN OUTPUT WORK.WO;
ELSE IF TRANSACTION_TYPE="DSLD" AND VOID_FLAG="N" THEN OUTPUT WORK.DSLD;
ELSE IF TRANSACTION_TYPE="WOW" AND VOID_FLAG="N" THEN OUTPUT WORK.WOW;
ELSE IF TRANSACTION_TYPE="WOR" AND VOID_FLAG="N" THEN OUTPUT WORK.WOR;
ELSE OUTPUT WORK.QF_TRANSACTION_DATA_P_1;
%RUNQUIT(&job,&sub7);

/* ATTACH APPLIED CODES OF WRITE OFFS, WAIVES, RECOVERYS, AND LOAN SOLDS TO THE LOAN */

DATA WORK.WO;
SET WORK.WO;
KEEP LOAN_NBR TRANSACTION_NBR TRANSACTION_TYPE REF_TRAN_CODE TRANSACTION_AMT
BRANCH_NBR CUSTOMER_NBR TRANSACTION_DATE CREATE_DATE_TIME VOID_FLAG POSAPPLIEDCD;
RENAME TRANSACTION_AMT=TRANAMT;
POSAPPLIEDCD="WRITE_OFF";
%RUNQUIT(&job,&sub7);

DATA WORK.DSLD;
SET WORK.DSLD;
KEEP LOAN_NBR TRANSACTION_NBR TRANSACTION_TYPE REF_TRAN_CODE TRANSACTION_AMT
BRANCH_NBR CUSTOMER_NBR TRANSACTION_DATE CREATE_DATE_TIME VOID_FLAG POSAPPLIEDCD TRANAMT;
TRANAMT=TRANSACTION_AMT*-1;
POSAPPLIEDCD="LOAN_SOLD";
%RUNQUIT(&job,&sub7);

DATA WORK.WOW;
SET WORK.WOW;
KEEP LOAN_NBR TRANSACTION_NBR TRANSACTION_TYPE REF_TRAN_CODE TRANSACTION_AMT
BRANCH_NBR CUSTOMER_NBR TRANSACTION_DATE CREATE_DATE_TIME VOID_FLAG POSAPPLIEDCD TRANAMT;
TRANAMT=TRANSACTION_AMT*-1;
POSAPPLIEDCD="WRITE_OFF_WAIVED";
%RUNQUIT(&job,&sub7);

DATA WORK.WOR;
SET WORK.WOR;
KEEP LOAN_NBR TRANSACTION_NBR TRANSACTION_TYPE REF_TRAN_CODE TRANSACTION_AMT
BRANCH_NBR CUSTOMER_NBR TRANSACTION_DATE CREATE_DATE_TIME VOID_FLAG POSAPPLIEDCD TRANAMT;
TRANAMT=TRANSACTION_AMT*-1;
POSAPPLIEDCD="WRITE_OFF_RECOVERED";
%RUNQUIT(&job,&sub7);

/* ORDER COLUMNS IN SAME ORDER AS BASE LOAN TRANSACTION TABLE */

PROC SQL;
CREATE TABLE WORK.WO1 AS 
SELECT LOAN_NBR, TRANSACTION_NBR, TRANSACTION_TYPE, REF_TRAN_CODE, BRANCH_NBR, 
CUSTOMER_NBR, TRANSACTION_DATE, CREATE_DATE_TIME, VOID_FLAG, POSAPPLIEDCD LENGTH=40 FORMAT=$40., TRANAMT
FROM WORK.WO;
%RUNQUIT(&job,&sub7);

PROC SQL;
CREATE TABLE WORK.DSLD1 AS 
SELECT LOAN_NBR, TRANSACTION_NBR, TRANSACTION_TYPE, REF_TRAN_CODE, BRANCH_NBR, 
CUSTOMER_NBR, TRANSACTION_DATE, CREATE_DATE_TIME, VOID_FLAG, POSAPPLIEDCD LENGTH=40 FORMAT=$40., TRANAMT
FROM WORK.DSLD;
%RUNQUIT(&job,&sub7);

PROC SQL;
CREATE TABLE WORK.WOW1 AS 
SELECT LOAN_NBR, TRANSACTION_NBR, TRANSACTION_TYPE, REF_TRAN_CODE, BRANCH_NBR, 
CUSTOMER_NBR, TRANSACTION_DATE, CREATE_DATE_TIME, VOID_FLAG, POSAPPLIEDCD LENGTH=40 FORMAT=$40., TRANAMT
FROM WORK.WOW;
%RUNQUIT(&job,&sub7);

PROC SQL;
CREATE TABLE WORK.WOR1 AS 
SELECT LOAN_NBR, TRANSACTION_NBR, TRANSACTION_TYPE, REF_TRAN_CODE, BRANCH_NBR, 
CUSTOMER_NBR, TRANSACTION_DATE, CREATE_DATE_TIME, VOID_FLAG, POSAPPLIEDCD LENGTH=40 FORMAT=$40., TRANAMT
FROM WORK.WOR;
%RUNQUIT(&job,&sub7);

/* SORT LOAN TRANSACTION INFORMATION */
PROC SORT DATA=WORK.QF_TRANSACTION_DATA_P_1;
BY LOAN_NBR TRANSACTION_NBR TRANSACTION_TYPE REF_TRAN_CODE BRANCH_NBR;
%RUNQUIT(&job,&sub7);

/* TRANSPOSE APPLIED CODE COLUMNS DOWN FROM LOAN TRANSACTION */
PROC TRANSPOSE DATA=WORK.QF_TRANSACTION_DATA_P_1 OUT=WORK.QF_TRANSACTION_DATA_P2;
VAR ADV_AMT ADV_FEE_AMT REBATE_AMT WAIVE_FEE_AMT NSF_AMT NSF_FEE_AMT /*WO_AMT WO_FEE_AMT */
NSF_PREPAYMENT_AMT REF_AMT ADV_INT_AMT ADV_MMF_AMT INT_REBATE MMF_REBATE LATECHARGE UCLATECHARGE;
BY LOAN_NBR TRANSACTION_NBR TRANSACTION_TYPE REF_TRAN_CODE BRANCH_NBR CUSTOMER_NBR TRANSACTION_DATE CREATE_DATE_TIME VOID_FLAG;
%RUNQUIT(&job,&sub7);

/* ONLY TAKE TRANSACTIONS THAT ARE NOT ZERO FOR JOINING */
DATA WORK.LOAN_TRANSPOSE_NOZEROQF4 (RENAME=(COL1=TRANAMT _LABEL_=POSAPPLIEDCD) DROP=_NAME_);
SET WORK.QF_TRANSACTION_DATA_P2;
WHERE COL1 NOT IN (0,.,0.00);
%RUNQUIT(&job,&sub7);

/* APPEND WRITE OFF, WAIVE, RECOVERED, AND LOAN SOLD INFORMATION TO BASE LOAN TRANSACTION TABLE */

PROC APPEND BASE=WORK.LOAN_TRANSPOSE_NOZEROQF4 DATA=WORK.WO1;
%RUNQUIT(&job,&sub7);

PROC APPEND BASE=WORK.LOAN_TRANSPOSE_NOZEROQF4 DATA=WORK.DSLD1;
%RUNQUIT(&job,&sub7);

PROC APPEND BASE=WORK.LOAN_TRANSPOSE_NOZEROQF4 DATA=WORK.WOW1;
%RUNQUIT(&job,&sub7);

PROC APPEND BASE=WORK.LOAN_TRANSPOSE_NOZEROQF4 DATA=WORK.WOR1;
%RUNQUIT(&job,&sub7);

/* JOIN BASE POS INFORMATION TOGETHER */
PROC SQL;
	CREATE TABLE TRANSACTION_TABLE_QF4P1 AS	
		SELECT 
			(CASE WHEN B.LOCATION_AA = . THEN 
			A.BRANCH_NBR ELSE B.LOCATION_AA END) AS LOCNBR,
			A.LOAN_NBR AS DEALNBR1,
			A.TRANSACTION_NBR AS DEALTRANNBR1,
			A.REF_TRAN_CODE AS ORIGTRANNBR1,
			A.VOID_FLAG AS VOIDFLG,
			A.TRANSACTION_TYPE AS POSTRANCD,
			A.TRANSACTION_DATE AS TRANDT,
			A.POSAPPLIEDCD,
			A.TRANAMT,
			A.CREATE_DATE_TIME AS TRANCREATEDT FORMAT=DATETIME20.,
			"PDL" AS PRODUCTCD,
			A.CUSTOMER_NBR AS CUSTNBR1,
			C.LOAN_DATE AS DEAL_DT FORMAT=DATETIME20.,
			D.SSN AS SSN,
			C.LOAN_STATUS AS DEALSTATUSCD LENGTH=15,
			'' AS MONETARYCD LENGTH=15
		FROM WORK.LOAN_TRANSPOSE_NOZEROQF4 A
			LEFT JOIN CADA.ECA_LOCATION_XREF B ON (B.BRANCH_ECA=A.BRANCH_NBR)
			LEFT JOIN WORK.QF_PAYDAY_LOAN_DATA C ON (C.LOAN_NBR=A.LOAN_NBR)
			LEFT JOIN (&SQL_TEXT.) D ON (D.CUSTNBR=A.CUSTOMER_NBR)
		WHERE A.CREATE_DATE_TIME > &THIRTYDAYS.;
%RUNQUIT(&job,&sub7);

/* CONVERT NUMERIC FIELDS TO CHARACTER */
DATA TRANSACTION_TABLE_QF4P (DROP=DEALNBR1 DEALTRANNBR1 ORIGTRANNBR1 CUSTNBR1);
	SET TRANSACTION_TABLE_QF4P1;
     IF PUT(CUSTNBR1,15.)~='.'            THEN CUSTNBR=PUT(STRIP(CUSTNBR1),15.);
ELSE IF PUT(STRIP(CUSTNBR1),15.)='.'      THEN CUSTNBR='';
     IF PUT(STRIP(DEALNBR1),15.)~='.'     THEN DEALNBR=PUT(STRIP(DEALNBR1),15.);
ELSE IF PUT(STRIP(DEALNBR1),15.)='.'      THEN DEALNBR='';
	 IF PUT(STRIP(DEALTRANNBR1),15.)~='.' THEN DEALTRANNBR=PUT(STRIP(DEALTRANNBR1),15.);
ELSE IF PUT(DEALTRANNBR1,15.)='.'         THEN DEALTRANNBR='';
	 IF PUT(STRIP(ORIGTRANNBR1),15.)~='.' THEN ORIGTRANNBR=PUT(STRIP(ORIGTRANNBR1),15.);
ELSE IF PUT(STRIP(ORIGTRANNBR1),15.)='.'  THEN ORIGTRANNBR='';
%RUNQUIT(&job,&sub7);

/* FILTER VOIDED TRANSACTIONS INTO SEPARATE TABLE                        */
/* RENAME ORIGTRANNBR TO DEALTRANNBR FOR LATER JOINING BACK TO THE TABLE */
PROC SQL;
	CREATE TABLE VOIDS_QF4P AS 
		SELECT 
			LOCNBR,
			DEALNBR,
			ORIGTRANNBR AS DEALTRANNBR,
			VOIDFLG,
			POSTRANCD,
			TRANDT AS VOIDDT,
			POSAPPLIEDCD,
			TRANAMT,
			TRANCREATEDT FORMAT=DATETIME20.,
			PRODUCTCD,
			CUSTNBR,
			DEALSTATUSCD,
			MONETARYCD
		FROM TRANSACTION_TABLE_QF4P
		WHERE VOIDFLG IN ('V','R');
%RUNQUIT(&job,&sub7);

/* CREATE 30 DAY PORTION OF POS INFORMATION */
PROC SQL;
	CREATE TABLE TRANSACTION_TABLE_QF4_UPDATEP AS
		SELECT 
			(CASE WHEN T1.PRODUCTCD = "TLP" THEN "TITLE" 
				  WHEN T1.PRODUCTCD = "PDL" THEN "PAYDAY"
				  ELSE "UNKNOWN" END) AS 
            	  PRODUCT LENGTH=20 FORMAT=$20.,
			(CASE WHEN T1.PRODUCTCD = "TLP" THEN "ECA TITLE" 
				  WHEN T1.PRODUCTCD = "PDL" THEN "ECA PAYDAY"
                  ELSE "UNKNOWN" END) 
				  AS PRODUCTDESC  LENGTH=30 FORMAT=$30.,
			'QFUND' AS POS LENGTH=20  FORMAT=$20.,
			'QFUND4' AS INSTANCE LENGTH=20  FORMAT=$20.,
			'STOREFRONT'		AS CHANNELCD,
			T2.ST_PVC_CD AS STATE length=2 format=$2.,
			T1.LOCNBR,
			T1.SSN,
			T1.CUSTNBR,
			''		AS OMNINBR,
			DHMS(DATEPART(T1.DEAL_DT),0,0,0) AS DEAL_DT 		FORMAT=DATETIME20.,
			T1.DEAL_DT AS DEAL_DTTM								FORMAT=DATETIME20.,
			T1.DEALNBR,
			LEFT("0") AS TITLE_DEALNBR LENGTH=15 FORMAT=$15.,
			T1.DEALTRANNBR,
			T1.ORIGTRANNBR,
			T1.VOIDFLG LENGTH=2 FORMAT=$2.,
			T10.VOIDDT,
			T1.DEALSTATUSCD LENGTH=15,
			T1.POSTRANCD LENGTH=50 FORMAT=$50.,
   COALESCE(T8.STNDTRANCD,'UNKNOWN') AS STNDTRANCD LENGTH=25 FORMAT=$25.,
			T1.POSAPPLIEDCD LENGTH=50 FORMAT=$50.,
 (CASE WHEN T1.POSTRANCD='PAY' AND T1.POSAPPLIEDCD='IFC' THEN 'INTEREST FEE CHARGED' ELSE
   COALESCE(T7.STNDAPPLIEDCD,'UNKNOWN')END) AS STNDAPPLIEDCD LENGTH=20 FORMAT=$20.,
 (CASE WHEN T1.MONETARYCD CONTAINS 'ACH' AND T1.DEALSTATUSCD NOT IN ('WO','DEF','WOT') THEN 'Y'
 	   WHEN T1.MONETARYCD CONTAINS 'ACH' AND T1.DEALSTATUSCD IN ('WO','DEF','WOT') THEN 'N'
	   WHEN T1.POSTRANCD CONTAINS  'ACH' AND T1.DEALSTATUSCD NOT IN ('WO','DEF','WOT') THEN 'Y'
 	   WHEN T1.POSTRANCD CONTAINS  'ACH' AND T1.DEALSTATUSCD IN ('WO','DEF','WOT') THEN 'N'
	   WHEN T1.POSTRANCD CONTAINS  'ECC' AND T1.DEALSTATUSCD NOT IN ('WO','DEF','WOT') THEN 'Y'
	   WHEN T1.POSTRANCD CONTAINS  'ECC' AND T1.DEALSTATUSCD IN ('WO','DEF','WOT') THEN 'N'
	   WHEN T1.POSTRANCD IN ('ACHP','ACHPP') THEN 'Y'
	   WHEN T1.POSTRANCD IN ('ACHD') THEN 'N'
	   ELSE T8.CI_FLG END) AS CI_FLG,
			T1.MONETARYCD,
			T1.TRANAMT,
			T1.TRANDT,
			T1.TRANCREATEDT,
			DHMS(DATEPART(T1.TRANCREATEDT),0,0,0) AS BUSINESSDT FORMAT=DATETIME20.,
			DHMS(DATEPART(T1.TRANDT),0,0,0) 	  AS TRANDATE   FORMAT=DATETIME20.,
			%SYSFUNC(DATETIME()) AS UPDATEDT FORMAT=DATETIME20.,
			"" AS NCP_IND LENGTH=1,
			. AS CREATEUSR
		FROM TRANSACTION_TABLE_QF4P T1
			LEFT JOIN EDW.D_LOCATION T2 ON T2.LOC_NBR=T1.LOCNBR
			LEFT JOIN BIOR.L_APPLIEDCODES T7 ON T7.POSAPPLIEDCD=T1.POSAPPLIEDCD
			LEFT JOIN BIOR.L_TRANSACTIONCODES T8 ON (T8.POS='QFUND4' AND T8.POSTRANCD=T1.POSTRANCD)
			LEFT JOIN WORK.VOIDS_QF4P T10 ON (T10.DEALNBR=T1.DEALNBR AND T10.DEALTRANNBR=T1.DEALTRANNBR AND T10.POSAPPLIEDCD=T1.POSAPPLIEDCD AND T10.POSTRANCD=T1.POSTRANCD)
		WHERE T1.TRANCREATEDT > &THIRTYDAYS.;
%RUNQUIT(&job,&sub7);

/* SORT POS INFORMATION */
/* STORE IN SAS DATA FOLDER */
PROC SORT DATA=WORK.TRANSACTION_TABLE_QF4_UPDATEP OUT=TRANSACTION_TABLE_QF4_UPDATEP NODUPKEY DUPOUT=DUPSDELETEQF4P;
BY DEALNBR DEALTRANNBR POSTRANCD POSAPPLIEDCD TRANAMT TITLE_DEALNBR;
%RUNQUIT(&job,&sub7);

PROC FORMAT;
    PICTURE CHECKTHEDAY OTHER=%0Y.%0M.%0D (DATATYPE=DATE);
    PICTURE CHECKTHETIME OTHER=%0H.%0M.%0S (DATATYPE=TIME);
RUN;

%LET DATE=%SYSFUNC(INTNX(DAY,%SYSFUNC(TODAY()),0,END),DATE7.);
%PUT &DATE;

/* CREATE MACROS FOR BULKLOAD PATH AND TIMESTAMP */
DATA _NULL_;
	CALL SYMPUTX('TIMESTAMP',TRANWRD(PUT(DATETIME(),DATETIME20.),':','.'),'G');
    CALL SYMPUTX('PATH',"E:\SHARED\CADA\SAS DATA\DATAMART\SKYNET REDESIGN BULKLOAD LOGS\TRANSACTION\QFUND4",'G');
    CALL SYMPUTX('PATHTWO',"E:\SHARED\CADA\SAS DATA\DATAMART\SKYNET REDESIGN BULKLOAD LOGS\TRANSACTION\QFUND4\DIR2\",'G');
RUN;

PROC SQL;
    INSERT INTO SKY.TRAN_DATAMART_QF4P (BULKLOAD=YES BL_LOG="&PATH.\BL_&DATE..LOG" BL_DELETE_DATAFILE=YES 
                                                   BL_DEFAULT_DIR="&PATHTWO.")
    SELECT 
        *
    FROM TRANSACTION_TABLE_QF4_UPDATEP
	WHERE STATE NOT IN ('TN');
QUIT;

/* STOP TIMER */
DATA _NULL_;
  DUR = DATETIME() - &_TIMER_START;
  PUT 30*'-' / ' TOTAL DURATION:' DUR TIME13.2 / 30*'-';
RUN;


/*UPLOAD QF4*/
%INCLUDE "&TRAN_FILE_PATH.\TRANSACTION_UPLOAD_QF4P.SAS";
