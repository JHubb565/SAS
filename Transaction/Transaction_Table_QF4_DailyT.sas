*Error Checking;
%include "E:\Shared\CADA\SAS Source Code\Development\nrochester\TRANSACTION_DATAMART_DAILY\Transaction_Table_Error_Check.sas";

*Libname Statements;
%include "E:\Shared\CADA\SAS Source Code\Development\nrochester\Libname_Statements.sas";
%INCLUDE "E:\SHARED\CADA\SAS SOURCE CODE\DEVELOPMENT\JHUBBARD\TOP SECRET PROGRAM.SAS";

*Wait For Macro;

*CUSTOMER JOIN PROGRAM;
%INCLUDE "E:\SHARED\CADA\SAS Source Code\Development\nrochester\TRANSACTION_DATAMART_DAILY\CUSTOMER_SSN_MACRO.SAS";
%SSN(QFUND4);

/* MACROS FOR SELECTING DATA */
%PUT &SYSUSERID;
%LET START=INTNX('DTDAY',DHMS(18628,0,0,0),1,'BEGINNING');
%LET THIRTYDAYS=INTNX('DTDAY',DHMS(%SYSFUNC(TODAY()),0,0,0),-5,'BEGINNING');
%PUT &START;
%PUT &THIRTYDAYS;

DATA _NULL_;
	CALL SYMPUTX('TRAN_LOGPATH',"E:\SHARED\CADA\LOGS\SKYNET V2",'G');
	CALL SYMPUTX('TRAN_FILE_PATH',"E:\SHARED\CADA\SAS SOURCE CODE\PRODUCTION\SKYNET V2\SKYNET REDESIGN\DATAMART REDESIGN\TRANSACTION",'G');
RUN;
/* START TIMER */
%LET _TIMER_START = %SYSFUNC(DATETIME());

DATA WORK.QF4_FIRSTPLZ;
SET ECA.QF_TP_TRANSACTION_DATA;
WHERE CREATE_DATE_TIME >&THIRTYDAYS.;
%RUNQUIT(&job,&sub8);

PROC SORT DATA=WORK.QF4_FIRSTPLZ OUT=WORK.QF_TRANSACTION_DATA_T;
BY LOAN_NBR TITLE_LOAN_NBR TRANSACTION_NBR TRANSACTION_TYPE REF_TRAN_CODE BRANCH_NBR;
%RUNQUIT(&job,&sub8);

/* DOWNLAOD LOAN TRANSACTION INFORMATION */
/* FILTER WOR AND SET OUT */
DATA WORK.QF_TRANSACTION_DATA_T_1 WORK.WOR1 WORK.SET1 WORK.WO1 WORK.WLF1;
	SET WORK.QF_TRANSACTION_DATA_T;
BY LOAN_NBR TITLE_LOAN_NBR;
IF TRANSACTION_TYPE="WOR" AND VOID_FLAG="N" AND TRANSACTION_AMT IN (0.00,0,.) THEN OUTPUT WORK.WOR1;
ELSE IF TRANSACTION_TYPE="SET" AND VOID_FLAG="N" THEN OUTPUT WORK.SET1;
ELSE IF TRANSACTION_TYPE="WO" AND VOID_FLAG="N" AND NOT LAST.TITLE_LOAN_NBR AND (BAL_PRINCIPAL_AMT IN (0.00,0,.) AND 
BAL_LIEN_FEE_AMT IN (0.00,0,.) AND BAL_INT_AMOUNT IN (0.00,0,.) AND REPO_CHARGE IN (0.00,0,.) AND 
STORAGE_COST IN (0.00,0,.) AND LATE_FEE IN (0.00,0,.) AND OTHER_FEE IN (0.00,0,.)) THEN OUTPUT WORK.WO1;
ELSE IF TRANSACTION_TYPE="WLF" AND VOID_FLAG="N" THEN OUTPUT WORK.WLF1;
ELSE OUTPUT WORK.QF_TRANSACTION_DATA_T_1;
WHERE CREATE_DATE_TIME > &THIRTYDAYS.;
%RUNQUIT(&job,&sub8);

/* DOWNLOAD LOAN INFORMATION */
DATA WORK.QF_TP_LOAN_DATA;
	SET ECA.QF_TP_LOAN_DATA;
%RUNQUIT(&job,&sub8);

/* ATTACH APPLIED CODE OF WRITEOFF RECOVERY TO THE TRANSACTION */
DATA WORK.WOR2;
SET WORK.WOR1;
KEEP LOAN_NBR TITLE_LOAN_NBR TRANSACTION_NBR TRANSACTION_TYPE REF_TRAN_CODE TOTAL_AMOUNT_DUE TRANSACTION_AMT
BRANCH_NBR CUSTOMER_NBR TRANSACTION_DATE CREATE_DATE_TIME VOID_FLAG POSAPPLIEDCD TRANAMT;
TRANAMT=TOTAL_AMOUNT_DUE;
POSAPPLIEDCD="WRITE_OFF_RECOVERED";
%RUNQUIT(&job,&sub8);

DATA WORK.SET2;
SET WORK.SET1;
KEEP LOAN_NBR TITLE_LOAN_NBR TRANSACTION_NBR TRANSACTION_TYPE REF_TRAN_CODE TRANSACTION_AMT OTHER_FEE
BRANCH_NBR CUSTOMER_NBR TRANSACTION_DATE CREATE_DATE_TIME VOID_FLAG POSAPPLIEDCD TRANAMT;
IF OTHER_FEE IN(0,.) THEN TRANAMT=TRANSACTION_AMT*-1;
ELSE TRANAMT=OTHER_FEE;
POSAPPLIEDCD="SETTLEMENT_AMT";
%RUNQUIT(&job,&sub8);

DATA WORK.WO2;
SET WORK.WO1;
KEEP LOAN_NBR TITLE_LOAN_NBR TRANSACTION_NBR TRANSACTION_TYPE REF_TRAN_CODE TOTAL_AMOUNT_DUE TRANSACTION_AMT
BRANCH_NBR CUSTOMER_NBR TRANSACTION_DATE CREATE_DATE_TIME VOID_FLAG POSAPPLIEDCD TRANAMT;
TRANAMT=TOTAL_AMOUNT_DUE*-1;
POSAPPLIEDCD="WRITE_OFF";
%RUNQUIT(&job,&sub8);

DATA WORK.WLF2;
SET WORK.WLF1;
KEEP LOAN_NBR TITLE_LOAN_NBR TRANSACTION_NBR TRANSACTION_TYPE REF_TRAN_CODE TOTAL_AMOUNT_DUE TRANSACTION_AMT
BRANCH_NBR CUSTOMER_NBR TRANSACTION_DATE CREATE_DATE_TIME VOID_FLAG POSAPPLIEDCD TRANAMT;
TRANAMT=TRANSACTION_AMT*-1;
POSAPPLIEDCD="WAIVE_LATE_FEE";
%RUNQUIT(&job,&sub8);

/* ORDER COLUMNS IN SAME ORDER AS BASE LOAN TRANSACTION TABLE */

PROC SQL;
CREATE TABLE WORK.SET AS 
SELECT LOAN_NBR, TITLE_LOAN_NBR, TRANSACTION_NBR, TRANSACTION_TYPE, REF_TRAN_CODE, BRANCH_NBR, 
CUSTOMER_NBR, TRANSACTION_DATE, CREATE_DATE_TIME, VOID_FLAG, POSAPPLIEDCD LENGTH=40 FORMAT=$40., TRANAMT
FROM WORK.SET2;

CREATE TABLE WORK.WOR AS 
SELECT LOAN_NBR, TITLE_LOAN_NBR, TRANSACTION_NBR, TRANSACTION_TYPE, REF_TRAN_CODE, BRANCH_NBR, 
CUSTOMER_NBR, TRANSACTION_DATE, CREATE_DATE_TIME, VOID_FLAG, POSAPPLIEDCD LENGTH=40 FORMAT=$40., TRANAMT
FROM WORK.WOR2;

CREATE TABLE WORK.WO AS 
SELECT LOAN_NBR, TITLE_LOAN_NBR, TRANSACTION_NBR, TRANSACTION_TYPE, REF_TRAN_CODE, BRANCH_NBR, 
CUSTOMER_NBR, TRANSACTION_DATE, CREATE_DATE_TIME, VOID_FLAG, POSAPPLIEDCD LENGTH=40 FORMAT=$40., TRANAMT
FROM WORK.WO2;

CREATE TABLE WORK.WLF AS 
SELECT LOAN_NBR, TITLE_LOAN_NBR, TRANSACTION_NBR, TRANSACTION_TYPE, REF_TRAN_CODE, BRANCH_NBR, 
CUSTOMER_NBR, TRANSACTION_DATE, CREATE_DATE_TIME, VOID_FLAG, POSAPPLIEDCD LENGTH=40 FORMAT=$40., TRANAMT
FROM WORK.WLF2;
%RUNQUIT(&job,&sub8);

/* SORT LOAN TRANSACTION INFORMATION */
PROC SORT DATA=WORK.QF_TRANSACTION_DATA_T_1;
BY LOAN_NBR TITLE_LOAN_NBR TRANSACTION_NBR TRANSACTION_TYPE REF_TRAN_CODE BRANCH_NBR;
%RUNQUIT(&job,&sub8);

/* TRANSPOSE APPLIED CODE COLUMNS DOWN FROM LOAN TRANSACTION */
PROC TRANSPOSE DATA=WORK.QF_TRANSACTION_DATA_T_1 OUT=WORK.QF_TRANSACTION_DATA_T_2;
VAR BAL_PRINCIPAL_AMT BAL_LIEN_FEE_AMT BAL_INT_AMOUNT REPO_CHARGE STORAGE_COST LATE_FEE OTHER_FEE;
BY LOAN_NBR TITLE_LOAN_NBR TRANSACTION_NBR TRANSACTION_TYPE REF_TRAN_CODE BRANCH_NBR CUSTOMER_NBR TRANSACTION_DATE CREATE_DATE_TIME VOID_FLAG;
%RUNQUIT(&job,&sub8);

/* ONLY TAKE TRANSACTIONS THAT ARE NOT ZERO FOR JOINING */
DATA WORK.LOAN_TRANSPOSE_NOZEROQF4T (RENAME=(COL1=TRANAMT _LABEL_=POSAPPLIEDCD) DROP=_NAME_);
SET WORK.QF_TRANSACTION_DATA_T_2;
WHERE COL1 NOT IN (0,.);
%RUNQUIT(&job,&sub8);

/* APPEND WRITE OFF RECOVERED AND LOAN SOLD INFORMATION TO BASE LOAN TRANSACTION TABLE */
PROC APPEND BASE=WORK.LOAN_TRANSPOSE_NOZEROQF4T DATA=WORK.WOR;
%RUNQUIT(&job,&sub8);

PROC APPEND BASE=WORK.LOAN_TRANSPOSE_NOZEROQF4T DATA=WORK.SET;
%RUNQUIT(&job,&sub8);

PROC APPEND BASE=WORK.LOAN_TRANSPOSE_NOZEROQF4T DATA=WORK.WO;
%RUNQUIT(&job,&sub8);

PROC APPEND BASE=WORK.LOAN_TRANSPOSE_NOZEROQF4T DATA=WORK.WLF;
%RUNQUIT(&job,&sub8);

/* JOIN BASE POS INFORMATION TOGETHER */
PROC SQL;
	CREATE TABLE TRANSACTION_TABLE_QF4T2 AS	
		SELECT 
			(CASE WHEN B.LOCATION_AA = . THEN 
			A.BRANCH_NBR ELSE B.LOCATION_AA END) AS LOCNBR,
			A.LOAN_NBR AS DEALNBR1,
			A.TITLE_LOAN_NBR AS TITLE_DEALNBR1,
			A.TRANSACTION_NBR AS DEALTRANNBR1,
			A.REF_TRAN_CODE AS ORIGTRANNBR1,
			A.VOID_FLAG AS VOIDFLG,
			A.TRANSACTION_TYPE AS POSTRANCD,
			A.TRANSACTION_DATE AS TRANDT,
			A.POSAPPLIEDCD,
			A.TRANAMT,
			A.CREATE_DATE_TIME AS TRANCREATEDT FORMAT=DATETIME20.,
			"TLP" AS PRODUCTCD,
			A.CUSTOMER_NBR AS CUSTNBR1,
			C.LOAN_DATE AS DEAL_DT FORMAT=DATETIME20.,
			D.SSN,
			C.LOAN_STATUS AS DEALSTATUSCD LENGTH=15,
			'' AS MONETARYCD LENGTH=15
		FROM WORK.LOAN_TRANSPOSE_NOZEROQF4T A
			LEFT JOIN CADA.ECA_LOCATION_XREF B ON (B.BRANCH_ECA=A.BRANCH_NBR)
			LEFT JOIN ECA.QF_TP_LOAN_DATA C ON (C.LOAN_NBR=A.LOAN_NBR AND C.TITLE_LOAN_NBR=A.TITLE_LOAN_NBR)
			LEFT JOIN (&SQL_TEXT.) D ON (D.CUSTNBR=A.CUSTOMER_NBR)
		WHERE A.CREATE_DATE_TIME > &THIRTYDAYS.;
%RUNQUIT(&job,&sub8);

DATA WORK.TRANSACTION_TABLE_QF4T1;
SET WORK.TRANSACTION_TABLE_QF4T2;
IF LENGTH(COMPRESS(PUT(LOCNBR,8.))) = 5 THEN LOCNBR=(LOCNBR/100);
ELSE IF LENGTH(COMPRESS(PUT(LOCNBR,8.))) ~= 5 THEN LOCNBR=LOCNBR;
%RUNQUIT(&job,&sub8);

/* CONVERT NUMERIC FIELDS TO CHARACTER */
DATA TRANSACTION_TABLE_QF4T (DROP=DEALNBR1 DEALTRANNBR1 ORIGTRANNBR1 CUSTNBR1);
	SET TRANSACTION_TABLE_QF4T1;
     IF PUT(CUSTNBR1,15.)~='.'            THEN CUSTNBR=PUT(STRIP(CUSTNBR1),15.);
ELSE IF PUT(STRIP(CUSTNBR1),15.)='.'      THEN CUSTNBR='';
     IF PUT(STRIP(DEALNBR1),15.)~='.'     THEN DEALNBR=PUT(STRIP(DEALNBR1),15.);
ELSE IF PUT(STRIP(DEALNBR1),15.)='.'      THEN DEALNBR='';
	 IF PUT(STRIP(DEALTRANNBR1),15.)~='.' THEN DEALTRANNBR=PUT(STRIP(DEALTRANNBR1),15.);
ELSE IF PUT(DEALTRANNBR1,15.)='.'         THEN DEALTRANNBR='';
	 IF PUT(STRIP(ORIGTRANNBR1),15.)~='.' THEN ORIGTRANNBR=PUT(STRIP(ORIGTRANNBR1),15.);
ELSE IF PUT(STRIP(ORIGTRANNBR1),15.)='.'  THEN ORIGTRANNBR='';
	 IF PUT(STRIP(TITLE_DEALNBR1),15.)~='.' THEN TITLE_DEALNBR=PUT(STRIP(TITLE_DEALNBR1),15.);
ELSE IF PUT(STRIP(TITLE_DEALNBR1),15.)='.'  THEN TITLE_DEALNBR='';
%RUNQUIT(&job,&sub8);

/* FILTER VOIDED TRANSACTIONS INTO SEPARATE TABLE                        */
/* RENAME ORIGTRANNBR TO DEALTRANNBR FOR LATER JOINING BACK TO THE TABLE */
PROC SQL;
	CREATE TABLE VOIDS_QF4T AS 
		SELECT 
			LOCNBR,
			DEALNBR,
			TITLE_DEALNBR,
			ORIGTRANNBR AS DEALTRANNBR,
			VOIDFLG,
			POSTRANCD,
			TRANDT AS VOIDDT,
			POSAPPLIEDCD,
			TRANAMT,
			TRANCREATEDT FORMAT=DATETIME20.,
			PRODUCTCD,
			CUSTNBR,
			DEALSTATUSCD,
			MONETARYCD
		FROM TRANSACTION_TABLE_QF4T
		WHERE VOIDFLG IN ('V','R');
%RUNQUIT(&job,&sub8);

/* CREATE 5 YEAR PORTION OF POS INFORMATION */
PROC SQL;
	CREATE TABLE TRANSACTION_TABLE_QF4_UPDATET AS
		SELECT 
			(CASE WHEN T1.PRODUCTCD = "PDL" THEN "PAYDAY"
				  WHEN T1.PRODUCTCD = "TLP" THEN "TITLE"
				  ELSE "UNKNOWN" END) AS 
            	  PRODUCT LENGTH=20 FORMAT=$20.,
			(CASE WHEN T1.PRODUCTCD = "PDL" THEN "ECA PAYDAY"
				  WHEN T1.PRODUCTCD = "TLP" THEN "ECA TITLE"
                  ELSE "UNKNOWN" END)
				  AS PRODUCTDESC  LENGTH=30 FORMAT=$30.,
			'QFUND' AS POS length=20  format=$20.,
			'QFUND4' AS INSTANCE length=20  format=$20.,
			'STOREFRONT'		AS CHANNELCD,
			T2.ST_PVC_CD AS STATE length=2 format=$2.,
			T1.LOCNBR,
			T1.SSN,
			T1.CUSTNBR,
			''		AS OMNINBR,
			DHMS(DATEPART(T1.DEAL_DT),0,0,0) AS DEAL_DT 		FORMAT=DATETIME20.,
			T1.DEAL_DT AS DEAL_DTTM								FORMAT=DATETIME20.,
			T1.DEALNBR,
			T1.TITLE_DEALNBR,
			T1.DEALTRANNBR,
			T1.ORIGTRANNBR,
			T1.VOIDFLG LENGTH=2 FORMAT=$2.,
			T10.VOIDDT,
			T1.DEALSTATUSCD LENGTH=15,
			T1.POSTRANCD LENGTH=50 FORMAT=$50.,
   COALESCE(T8.STNDTRANCD,'UNKNOWN') AS STNDTRANCD LENGTH=25 FORMAT=$25.,
			T1.POSAPPLIEDCD LENGTH=50 FORMAT=$50.,
 (CASE WHEN T1.POSTRANCD='PAY' AND T1.POSAPPLIEDCD='IFC' THEN 'INTEREST FEE CHARGED' ELSE
   COALESCE(T7.STNDAPPLIEDCD,'UNKNOWN')END) AS STNDAPPLIEDCD LENGTH=20 FORMAT=$20.,
 (CASE WHEN T1.MONETARYCD CONTAINS 'ACH' AND T1.DEALSTATUSCD NOT IN ('WO','DEF','WOT') THEN 'Y'
 	   WHEN T1.MONETARYCD CONTAINS 'ACH' AND T1.DEALSTATUSCD IN ('WO','DEF','WOT') THEN 'N'
	   WHEN T1.POSTRANCD CONTAINS  'ACH' AND T1.DEALSTATUSCD NOT IN ('WO','DEF','WOT') THEN 'Y'
 	   WHEN T1.POSTRANCD CONTAINS  'ACH' AND T1.DEALSTATUSCD IN ('WO','DEF','WOT') THEN 'N'
	   WHEN T1.POSTRANCD CONTAINS  'ECC' AND T1.DEALSTATUSCD NOT IN ('WO','DEF','WOT') THEN 'Y'
	   WHEN T1.POSTRANCD CONTAINS  'ECC' AND T1.DEALSTATUSCD IN ('WO','DEF','WOT') THEN 'N'
	   WHEN T1.POSTRANCD IN ('ACHP','ACHPP') THEN 'Y'
	   WHEN T1.POSTRANCD IN ('ACHD') THEN 'N'
	   ELSE T8.CI_FLG END) AS CI_FLG,
			T1.MONETARYCD,
			T1.TRANAMT,
			T1.TRANDT,
			T1.TRANCREATEDT,
			DHMS(DATEPART(T1.TRANCREATEDT),0,0,0) AS BUSINESSDT FORMAT=DATETIME20.,
			DHMS(DATEPART(T1.TRANDT),0,0,0) 	  AS TRANDATE   FORMAT=DATETIME20.,
			%SYSFUNC(DATETIME()) AS UPDATEDT FORMAT=DATETIME20.,
			"" AS NCP_IND LENGTH=1,
			. AS CREATEUSR
		FROM TRANSACTION_TABLE_QF4T T1
			LEFT JOIN EDW.D_LOCATION T2 ON T2.LOC_NBR=T1.LOCNBR
			LEFT JOIN BIOR.L_APPLIEDCODES T7 ON T7.POSAPPLIEDCD=T1.POSAPPLIEDCD
			LEFT JOIN BIOR.L_TRANSACTIONCODES T8 ON (T8.POS='QFUND4' AND T8.POSTRANCD=T1.POSTRANCD)
			LEFT JOIN WORK.VOIDS_QF4T T10 ON (T10.DEALNBR=T1.DEALNBR AND T10.TITLE_DEALNBR=T1.TITLE_DEALNBR AND T10.DEALTRANNBR=T1.DEALTRANNBR AND T10.POSAPPLIEDCD=T1.POSAPPLIEDCD AND T10.POSTRANCD=T1.POSTRANCD)
		WHERE T1.TRANCREATEDT > &THIRTYDAYS.;
%RUNQUIT(&job,&sub8);

/* SORT POS INFORMATION */
/* STORE IN SAS DATA FOLDER */
PROC SORT DATA=WORK.TRANSACTION_TABLE_QF4_UPDATET OUT=TRANSACTION_TABLE_QF4_UPDATET NODUPKEY DUPOUT=DUPSDELETEQF4T;
BY DEALNBR DEALTRANNBR POSTRANCD POSAPPLIEDCD TRANAMT TITLE_DEALNBR;
%RUNQUIT(&job,&sub8);

PROC FORMAT;
    PICTURE CHECKTHEDAY OTHER=%0Y.%0M.%0D (DATATYPE=DATE);
    PICTURE CHECKTHETIME OTHER=%0H.%0M.%0S (DATATYPE=TIME);
RUN;

%LET DATE=%SYSFUNC(INTNX(DAY,%SYSFUNC(TODAY()),0,END),DATE7.);
%PUT &DATE;

/* CREATE MACROS FOR BULKLOAD PATH AND TIMESTAMP */
DATA _NULL_;
	CALL SYMPUTX('TIMESTAMP',TRANWRD(PUT(DATETIME(),DATETIME20.),':','.'),'G');
    CALL SYMPUTX('PATH',"E:\SHARED\CADA\SAS DATA\DATAMART\SKYNET REDESIGN BULKLOAD LOGS\TRANSACTION\QFUND4\QFUND4TT",'G');
    CALL SYMPUTX('PATHTWO',"E:\SHARED\CADA\SAS DATA\DATAMART\SKYNET REDESIGN BULKLOAD LOGS\TRANSACTION\QFUND4\QFUND4TT\DIR2\",'G');
RUN;

PROC SQL;
    INSERT INTO SKY.TRAN_DATAMART_QF4T (BULKLOAD=YES BL_LOG="&PATH.\BL_&DATE..LOG" BL_DELETE_DATAFILE=YES 
                                                   BL_DEFAULT_DIR="&PATHTWO.")
    SELECT 
        *
    FROM TRANSACTION_TABLE_QF4_UPDATET
	WHERE STATE NOT IN ('TN');
QUIT;

/* STOP TIMER */
DATA _NULL_;
  DUR = DATETIME() - &_TIMER_START;
  PUT 30*'=' / ' TOTAL DURATION:' DUR TIME13.2 / 30*'=';
RUN;


/*UPLOAD QF4*/
%INCLUDE "&TRAN_FILE_PATH.\TRANSACTION_UPLOAD_QF4T.SAS";
